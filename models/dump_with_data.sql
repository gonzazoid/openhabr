--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


--
-- Name: plv8; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plv8 WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plv8; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plv8 IS 'PL/JavaScript (v8) trusted procedural language';


SET search_path = public, pg_catalog;

--
-- Name: addcomment(bigint, bigint, bigint, character varying); Type: FUNCTION; Schema: public; Owner: openhabr
--

CREATE FUNCTION addcomment(_user_id bigint, _post_id bigint, _parent_id bigint, _text character varying) RETURNS boolean
    LANGUAGE plpgsql
    AS $$

DECLARE
    result boolean;

BEGIN

    INSERT INTO comments ("article_id", "author", "reply_to", "body") VALUES (_post_id, _user_id, _parent_id, _text);
    UPDATE articles SET comments_count = comments_count + 1 WHERE id = _post_id;
    result = true;

RETURN result;

END;

$$;


ALTER FUNCTION public.addcomment(_user_id bigint, _post_id bigint, _parent_id bigint, _text character varying) OWNER TO openhabr;

--
-- Name: adduser(character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: openhabr
--

CREATE FUNCTION adduser(_nickname character varying, _mail character varying, _pwd character varying, _sid character varying) RETURNS boolean
    LANGUAGE plpgsql
    AS $$

DECLARE
    result boolean;

BEGIN

IF NOT EXISTS(SELECT * FROM users WHERE nickname = _nickname OR mail = _mail) THEN

    INSERT INTO users ("nickname", "mail", "pwd", "sid") values (_nickname, _mail, _pwd, _sid);
    result = true;

ELSE

    result = false;

END IF;

RETURN result;

END;

$$;


ALTER FUNCTION public.adduser(_nickname character varying, _mail character varying, _pwd character varying, _sid character varying) OWNER TO openhabr;

--
-- Name: users_id; Type: SEQUENCE; Schema: public; Owner: openhabr
--

CREATE SEQUENCE users_id
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE users_id OWNER TO openhabr;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: users; Type: TABLE; Schema: public; Owner: openhabr; Tablespace: 
--

CREATE TABLE users (
    id bigint DEFAULT nextval('users_id'::regclass) NOT NULL,
    nickname character varying NOT NULL,
    mail character varying NOT NULL,
    carma real DEFAULT 0 NOT NULL,
    rating real DEFAULT 0 NOT NULL,
    fullname character varying DEFAULT ' '::character varying NOT NULL,
    status character varying DEFAULT 'пользователь'::character varying NOT NULL,
    pwd character varying(128) NOT NULL,
    sid character varying(128) DEFAULT ' '::character varying NOT NULL,
    medals integer[] DEFAULT '{3}'::integer[] NOT NULL,
    readonly boolean DEFAULT true NOT NULL
);


ALTER TABLE users OWNER TO openhabr;

--
-- Name: auth(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: openhabr
--

CREATE FUNCTION auth(_nickname character varying, _pwd character varying, _sid character varying) RETURNS SETOF users
    LANGUAGE plpgsql
    AS $$

BEGIN

RETURN QUERY UPDATE users SET sid = _sid WHERE nickname = _nickname AND pwd = _pwd RETURNING *;

END;

$$;


ALTER FUNCTION public.auth(_nickname character varying, _pwd character varying, _sid character varying) OWNER TO openhabr;

--
-- Name: get_hubs(integer, integer); Type: FUNCTION; Schema: public; Owner: openhabr
--

CREATE FUNCTION get_hubs(_count integer, _offset integer) RETURNS TABLE(id bigint, name character varying, title character varying, subscribers integer, posts integer, popular bigint[], rating real, tag_id bigint[], tag_title character varying[])
    LANGUAGE sql
    AS $$

SELECT hubs.id, hubs.name, hubs.title, hubs.subscribers, hubs.posts, hubs.popular, hubs.rating, m.tag_id, m.tag_title
FROM (
    WITH maximums AS(
        SELECT id, popular
        FROM hubs
        ORDER BY rating DESC
        LIMIT _count
        OFFSET _offset
    )
    SELECT maximums.id, array_agg(tags.id) AS tag_id, array_agg(tags.title) AS tag_title
    FROM maximums 
    LEFT OUTER JOIN tags ON (tags.id = ANY(maximums.popular))
    GROUP BY maximums.id
) m, hubs
WHERE m.id = hubs.id
ORDER BY rating DESC;

$$;


ALTER FUNCTION public.get_hubs(_count integer, _offset integer) OWNER TO openhabr;

--
-- Name: get_user_by_name(character varying); Type: FUNCTION; Schema: public; Owner: openhabr
--

CREATE FUNCTION get_user_by_name(_nickname character varying) RETURNS TABLE(id bigint, nickname character varying, mail character varying, carma real, rating real, fullname character varying, status character varying, pwd character varying, sid character varying, medals integer[], readonly boolean, medal_title character varying[], medal_description character varying[])
    LANGUAGE sql
    AS $$
-- надо подтянуть медальки
SELECT users.*, m.medal_title, m.medal_description
FROM(
    SELECT users.id, array_agg(medals.title) AS medal_title, array_agg(medals.description) AS medal_description
    FROM users, medals 
    WHERE nickname = _nickname AND medals.id = ANY(users.medals)
    GROUP BY users.id
) m, users
WHERE users.id = m.id;
$$;


ALTER FUNCTION public.get_user_by_name(_nickname character varying) OWNER TO openhabr;

--
-- Name: reset_session(bigint); Type: FUNCTION; Schema: public; Owner: openhabr
--

CREATE FUNCTION reset_session(_id bigint) RETURNS SETOF users
    LANGUAGE sql
    AS $$

UPDATE users SET sid = '' WHERE id = _id RETURNING *;

$$;


ALTER FUNCTION public.reset_session(_id bigint) OWNER TO openhabr;

--
-- Name: articles_id; Type: SEQUENCE; Schema: public; Owner: openhabr
--

CREATE SEQUENCE articles_id
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE articles_id OWNER TO openhabr;

--
-- Name: articles; Type: TABLE; Schema: public; Owner: openhabr; Tablespace: 
--

CREATE TABLE articles (
    id bigint DEFAULT nextval('articles_id'::regclass) NOT NULL,
    author bigint NOT NULL,
    type integer NOT NULL,
    stamp timestamp without time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    hubs integer[] NOT NULL,
    tags bigint[],
    title character varying NOT NULL,
    cut character varying NOT NULL,
    body character varying NOT NULL,
    views integer DEFAULT 0 NOT NULL,
    favorites integer DEFAULT 0 NOT NULL,
    rating real DEFAULT 0 NOT NULL,
    draft boolean DEFAULT true NOT NULL,
    cut_title character varying,
    comments_count integer DEFAULT 0 NOT NULL
);


ALTER TABLE articles OWNER TO openhabr;

--
-- Name: TABLE articles; Type: COMMENT; Schema: public; Owner: openhabr
--

COMMENT ON TABLE articles IS 'статьи';


--
-- Name: COLUMN articles.type; Type: COMMENT; Schema: public; Owner: openhabr
--

COMMENT ON COLUMN articles.type IS 'перевод/новость/урок/статья/исследование';


--
-- Name: comments_id; Type: SEQUENCE; Schema: public; Owner: openhabr
--

CREATE SEQUENCE comments_id
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE comments_id OWNER TO openhabr;

--
-- Name: comments; Type: TABLE; Schema: public; Owner: openhabr; Tablespace: 
--

CREATE TABLE comments (
    id bigint DEFAULT nextval('comments_id'::regclass) NOT NULL,
    article_id bigint NOT NULL,
    author bigint NOT NULL,
    reply_to bigint DEFAULT 0 NOT NULL,
    body character varying NOT NULL,
    stamp timestamp without time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    rating real DEFAULT 0 NOT NULL,
    last_changed timestamp without time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);


ALTER TABLE comments OWNER TO openhabr;

--
-- Name: COLUMN comments.reply_to; Type: COMMENT; Schema: public; Owner: openhabr
--

COMMENT ON COLUMN comments.reply_to IS 'id коммента, на который отвечает этот. 0 - если ответ на статью а не комментарий';


--
-- Name: hubs_id; Type: SEQUENCE; Schema: public; Owner: openhabr
--

CREATE SEQUENCE hubs_id
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE hubs_id OWNER TO openhabr;

--
-- Name: hubs; Type: TABLE; Schema: public; Owner: openhabr; Tablespace: 
--

CREATE TABLE hubs (
    id bigint DEFAULT nextval('hubs_id'::regclass) NOT NULL,
    name character varying NOT NULL,
    title character varying NOT NULL,
    subscribers integer DEFAULT 0 NOT NULL,
    posts integer DEFAULT 0 NOT NULL,
    popular bigint[],
    rating real DEFAULT 0 NOT NULL
);


ALTER TABLE hubs OWNER TO openhabr;

--
-- Name: COLUMN hubs.name; Type: COMMENT; Schema: public; Owner: openhabr
--

COMMENT ON COLUMN hubs.name IS 'используется в урле';


--
-- Name: COLUMN hubs.title; Type: COMMENT; Schema: public; Owner: openhabr
--

COMMENT ON COLUMN hubs.title IS 'выводится в тексте';


--
-- Name: medals_id; Type: SEQUENCE; Schema: public; Owner: openhabr
--

CREATE SEQUENCE medals_id
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE medals_id OWNER TO openhabr;

--
-- Name: medals; Type: TABLE; Schema: public; Owner: openhabr; Tablespace: 
--

CREATE TABLE medals (
    id integer DEFAULT nextval('medals_id'::regclass) NOT NULL,
    title character varying NOT NULL,
    description character varying NOT NULL
);


ALTER TABLE medals OWNER TO openhabr;

--
-- Name: tags_id; Type: SEQUENCE; Schema: public; Owner: openhabr
--

CREATE SEQUENCE tags_id
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE tags_id OWNER TO openhabr;

--
-- Name: tags; Type: TABLE; Schema: public; Owner: openhabr; Tablespace: 
--

CREATE TABLE tags (
    id bigint DEFAULT nextval('tags_id'::regclass) NOT NULL,
    title character varying NOT NULL
);


ALTER TABLE tags OWNER TO openhabr;

--
-- Data for Name: articles; Type: TABLE DATA; Schema: public; Owner: openhabr
--

COPY articles (id, author, type, stamp, hubs, tags, title, cut, body, views, favorites, rating, draft, cut_title, comments_count) FROM stdin;
5	1	1	2016-01-27 15:24:22.842517	{4,5}	{}	Full-Stack Redux Tutorial	This tutorial will guide you through building a full-stack Redux and Immutable-js application from scratch. We'll go through all the steps of constructing a Node+Redux backend and a React+Redux frontend for a real-world application, using test-first development. In our toolbox will also be ES6, Babel, Socket.io, Webpack, and Mocha. It's an intriguing stack, and you'll be up to speed with it in no time!	Оригинал находится <a href="http://teropa.info/blog/2015/09/10/full-stack-redux-tutorial.html">здесь</a><hr>\n\n<div class="body">\n    <div class="aside small">\n  <p>\n    <em>Update 2015-11-06:</em> Updated to the new <a href="http://babeljs.io/blog/2015/10/29/6.0.0/">Babel 6 release</a>. The Babel packages we need to install are now a bit different, and an additional <code>"babel"</code> section is needed in the <code>package.json</code> in both projects.\n  </p>\n  <p>\n    <em>Update 2015-10-09:</em> Updated to React 0.14, React Router 1.0.0 RC3, and jsdom 6.x. The changes include:\n    </p><ul>\n      <li>Installing and using React and ReactDOM separately.</li>\n      <li>Using the PureRenderMixin from a separate NPM package.</li>\n      <li>Changing the way the routes are set up in <code>index.jsx</code></li>\n      <li>Changing the way the current route's contents are populated into <code>App.jsx</code></li>\n      <li>Removing the <code>getDOMNode()</code> calls in unit tests, as the test helpers now directly return the DOM nodes.</li>\n    </ul>\n  <p></p>\n  <p>\n    <em>Update 2015-09-19:</em> Clarified which version of the React Router is used. Various other small fixes and improvements. Thanks to Jesus Rodriguez and everyone who has been suggesting fixed in the comments!\n  </p>\n</div>\n\n<p><a href="http://rackt.github.io/redux/">Redux</a> is one of the most exciting things happening in JavaScript at the moment. It stands out from the landscape of libraries and frameworks by getting so many things absolutely right: A simple, predictable state model. An emphasis on functional programming and immutable data. A tiny, focused API... What's not to like?</p>\n\n<p>Redux is a very small library and learning all of its APIs is not very difficult. But for many people, it creates a paradigm shift: The tiny amount of building blocks and the self-imposed limitations of pure functions and immutable data may make one feel constrained. How exactly do you get things done?</p>\n\n<p>This tutorial will guide you through building a full-stack Redux and <a href="http://facebook.github.io/immutable-js/">Immutable-js</a> application from scratch. We'll go through all the steps of constructing a Node+Redux backend and a React+Redux frontend for a real-world application, using test-first development. In our toolbox will also be ES6, <a href="http://babeljs.io/">Babel</a>, <a href="http://socket.io/">Socket.io</a>, <a href="http://webpack.github.io/">Webpack</a>, and <a href="https://mochajs.org/">Mocha</a>. It's an intriguing stack, and you'll be up to speed with it in no time!</p>\n\n<p></p>\n\n<h3 id="table-of-contents">Table of Contents</h3>\n\n<ul>\n<li>\n<a href="#table-of-contents">Table of Contents</a>\n</li>\n<li>\n<a href="#what-you-will-need">What You Will Need</a>\n</li>\n<li>\n<a href="#the-app">The App</a>\n</li>\n<li>\n<a href="#the-architecture">The Architecture</a>\n</li>\n<li>\n<a href="#the-server-application">The Server Application</a>\n<ul>\n<li>\n<a href="#designing-the-application-state-tree">Designing The Application State Tree</a>\n</li>\n<li>\n<a href="#project-setup">Project Setup</a>\n</li>\n<li>\n<a href="#getting-comfortable-with-immutable">Getting Comfortable With Immutable</a>\n</li>\n<li>\n<a href="#writing-the-application-logic-with-pure-functions">Writing The Application Logic With Pure Functions</a>\n<ul>\n<li>\n<a href="#loading-entries">Loading Entries</a>\n</li>\n<li>\n<a href="#starting-the-vote">Starting The Vote</a>\n</li>\n<li>\n<a href="#voting">Voting</a>\n</li>\n<li>\n<a href="#moving-to-the-next-pair">Moving to The Next Pair</a>\n</li>\n<li>\n<a href="#ending-the-vote">Ending The Vote</a>\n</li>\n</ul>\n\n<p></p></li>\n<li>\n<a href="#introducing-actions-and-reducers">Introducing Actions and Reducers</a>\n</li>\n<li>\n<a href="#a-taste-of-reducer-composition">A Taste of Reducer Composition</a>\n</li>\n<li>\n<a href="#introducing-the-redux-store">Introducing The Redux Store</a>\n</li>\n<li>\n<a href="#setting-up-a-socket-io-server">Setting Up a Socket.io Server</a>\n</li>\n<li>\n<a href="#broadcasting-state-from-a-redux-listener">Broadcasting State from A Redux Listener</a>\n</li>\n<li>\n<a href="#receiving-remote-redux-actions">Receiving Remote Redux Actions</a>\n</li>\n</ul>\n</li>\n<li>\n<a href="#the-client-application">The Client Application</a>\n<ul>\n<li>\n<a href="#client-project-setup">Client Project Setup</a>\n<ul>\n<li>\n<a href="#unit-testing-support">Unit Testing support</a>\n</li>\n</ul>\n</li>\n<li>\n<a href="#react-and-react-hot-loader">React and react-hot-loader</a>\n</li>\n<li>\n<a href="#writing-the-ui-for-the-voting-screen">Writing The UI for The Voting Screen</a>\n</li>\n<li>\n<a href="#immutable-data-and-pure-rendering">Immutable Data And Pure Rendering</a>\n</li>\n<li>\n<a href="#writing-the-ui-for-the-results-screen-and-handling-routing">Writing The UI for The Results Screen And Handling Routing</a>\n</li>\n<li>\n<a href="#introducing-a-client-side-redux-store">Introducing A Client-Side Redux Store</a>\n</li>\n<li>\n<a href="#getting-data-in-from-redux-to-react">Getting Data In from Redux to React</a>\n</li>\n<li>\n<a href="#setting-up-the-socket-io-client">Setting Up The Socket.io Client</a>\n</li>\n<li>\n<a href="#receiving-actions-from-the-server">Receiving Actions From The Server</a>\n</li>\n<li>\n<a href="#dispatching-actions-from-react-components">Dispatching Actions From React Components</a>\n</li>\n<li>\n<a href="#sending-actions-to-the-server-using-redux-middleware">Sending Actions To The Server Using Redux Middleware</a>\n</li>\n</ul>\n</li>\n<li>\n<a href="#exercises">Exercises</a>\n<ul>\n<li>\n<a href="#1-invalid-vote-prevention">1. Invalid Vote Prevention</a>\n</li>\n<li>\n<a href="#2-improved-vote-state-reset">2. Improved Vote State Reset</a>\n</li>\n<li>\n<a href="#3-duplicate-vote-prevention">3. Duplicate Vote Prevention</a>\n</li>\n<li>\n<a href="#4-restarting-the-vote">4. Restarting The Vote</a>\n</li>\n<li>\n<a href="#5-indicating-socket-connection-state">5. Indicating Socket Connection State</a>\n</li>\n<li>\n<a href="#bonus-challenge-going-peer-to-peer">Bonus Challenge: Going Peer to Peer</a>\n</li>\n</ul>\n</li>\n</ul><p></p>\n\n<h3 id="what-you-will-need">What You Will Need</h3>\n\n<p>This tutorial is going to be most useful for developers who know how to write JavaScript aplications. We'll be using Node, ES6, <a href="http://facebook.github.io/react/">React</a>, <a href="http://webpack.github.io/">Webpack</a>, and <a href="http://babeljs.io/">Babel</a>, so if you have some familiarity with these tools, you'll have no trouble following along. Even if you don't, you should be able to pick up the basics as we go.</p>\n\n<div class="aside">\n<p>\nIf you're looking for a good introduction to webapp development with React, Webpack, and ES6, I suggest taking a look at <a href="http://survivejs.com/">SurviveJS</a>.\n</p>\n</div>\n\n<p>In terms of tools, you'll need to have <a href="https://nodejs.org/en/">Node with NPM</a> installed and your favourite text editor ready to go, but that's pretty much it.</p>\n\n<h3 id="the-app">The App</h3>\n\n<p>We'll be developing an application for organizing live votes for parties, conferences, meetings, and other gatherings of people.</p>\n\n<p>The idea is that we'll have a collection of things to vote from: Movies, songs, programming languages, <a href="https://twitter.com/horse_js">Horse JS quotes</a>, anything. The app will put them against each other in pairs, so that on each round people can vote for their favorite of the pair. When there's just one thing left, that's the winner.</p>\n\n<p>For example, here's how a vote on the best <a href="http://www.imdb.com/name/nm0000965/?ref_=tt_ov_dr">Danny Boyle film</a> could go:</p>\n\n<p><img alt="The app puts entries against each other in pairs, until a winner is found." src="http://teropa.info/images/vote_logic.png">\n</p><pre class="ws-hack"></pre><p></p>\n\n<p>The app will have two separate user interfaces: The voting UI can be used on a mobile device, or anything else that has a web browser. The results UI is designed to be beamed on a projector or some other large screen. It'll show the results of the running vote in real time.</p>\n\n<p><img src="http://teropa.info/images/vote_system.png"></p>\n\n<h3 id="the-architecture">The Architecture</h3>\n\n<p>The system will technically consist of two applications: There's a browser app we'll make with React that provides both the user interfaces, and a server app we'll make for Node that handles the voting logic. Communication between the two will be done using WebSockets.</p>\n\n<p>We're going to use <a href="http://rackt.github.io/redux/">Redux</a> to organize the application code both on the client and on the server. For holding the state we'll use <a href="https://facebook.github.io/immutable-js/">Immutable</a> data structures.</p>\n\n<div class="aside">\n<p>\n  Even though there'll be a lot of similarity between the client and server - both will use Redux, for example - this isn't really a <a href="https://medium.com/@mjackson/universal-javascript-4761051b7ae9">universal/isomorphic application</a> and the two won't actually share any code.\n</p>\n<p>\n  It'll be more like a distributed system formed by apps that communicate by passing messages.\n</p>\n</div>\n\n<h3 id="the-server-application">The Server Application</h3>\n\n<p>We're going to write the Node application first and the React application after that. This will let us concentrate on the core logic before we start thinking about the UI.</p>\n\n<p>As we create the server app, we'll get acquainted with Redux and Immutable, and will see how an application built with them holds together. Redux is most often associated with React applications, but it really isn't limited to that use case. Part of what we're going to learn is how useful Redux can be in other contexts as well!</p>\n\n<p>I recommend following the tutorial by writing the app from scratch, but if you prefer you can <a href="https://github.com/teropa/redux-voting-server">grab the code from GitHub</a> instead.</p>\n\n<h4 id="designing-the-application-state-tree">Designing The Application State Tree</h4>\n\n<p>Designing a Redux app often begins by thinking about the <em>application state</em> data structure. This is what describes what's going on in your application at any given time.</p>\n\n<p>All kinds of frameworks and architectures have state. In Ember apps and Backbone apps, state is in Models. In Angular apps, state is often in Factories and Services. In most Flux implementations, it is in Stores. How does Redux differ from these?</p>\n\n<p>The main difference is that in Redux, the application state is all stored in one single <em>tree structure</em>. In other words, everything there is to know about your application's state is stored in one data structure formed out of  maps and arrays.</p>\n\n<p>This has many consequences, as we will soon begin to see. One of the most important ones is how this lets you think about the application state in isolation from the application's <em>behavior</em>. The state is pure data. It doesn't have methods or functions. And it isn't tucked away inside objects. <em>It's all in one place</em>.</p>\n\n<p>This may sound like a limitation, especially if you're coming to Redux from an object-oriented background. But it actually feels kind of liberating because of the way it lets you concentrate on the data and nothing but the data. And if you spend a little bit of time designing the application state, pretty much everything else will follow.</p>\n\n<p>This is not to say that you always design your entire state tree first and then the rest of the app. Usually you end up evolving both in parallel. However, I find it quite helpful to have an initial idea of what the state tree should look like in different situations before I start coding.</p>\n\n<p>So, let's look at what the state tree of our voting app might be. The purpose of the app is to vote on a number of items (movies, bands, etc.). A reasonable initial state for the app might be just the collection of items that will be voted on. We'll call this collection <em>entries</em>:</p>\n\n<p><img src="http://teropa.info/images/vote_server_tree_entries.png"></p><p></p><p></p>\n\n<p>Once the first vote has begun, there should be some way to distinguish what is currently being voted on. In this state, there might be a <em>vote</em> entry in the state, which holds the pair of items currently under vote. The pair should probably also be taken out of the <em>entries</em> collection:</p>\n\n<p><img src="http://teropa.info/images/vote_server_tree_pair.png"></p><p></p><p></p>\n\n<p>After the votes have started coming in, the tally of votes should be stored as well. We can do that with another data structure inside the <em>vote</em>:</p>\n\n<p><img src="http://teropa.info/images/vote_server_tree_tally.png"></p><p></p><p></p>\n\n<p>Once a vote is done, the losing entry is thrown away and the winning entry is back in <em>entries</em>, as the <em>last</em> item. It will later be voted against something else. The next two entries will then also have been taken under vote:</p>\n\n<p><img src="http://teropa.info/images/vote_server_tree_next.png"></p><p></p><p></p>\n\n<p>We can imagine these states cycling as long as there are entries left to vote on. At some point there's going to be just one entry left though. At that point, it can be declared as the winner and the vote will be over:</p>\n\n<p><img src="http://teropa.info/images/vote_server_tree_winner.png"></p><p></p><p></p>\n\n<p>This seems like a reasonable design to get started with. There are many different ways to design the state for these requirements, and this might not be the optimal one. But that doesn't really matter. It just needs to be good enough to get started. The important thing is that we have formed a concrete idea of how the application will carry out its duties. That's before we've even thought about any of the code!</p>\n\n<h4 id="project-setup">Project Setup</h4>\n\n<p>It's time to get our hands dirty. Before we do anything else, we need to create a project directory and initialize it as an NPM project:</p>\n\n<pre class="hljs">mkdir voting-server\n<span class="hljs-built_in">cd</span> voting-server\nnpm init -y\n</pre>\n\n<p>This results in a directory with the single file <code>package.json</code> in it.</p>\n\n<p>We're going to be writing our code in ES6. Altough Node supports many ES6 features starting at version 4.0.0, it still doesn't support modules, which we want to use. We'll need to add Babel to the project, so that we can use all the ES6 features we want and transpile the code to ES5:</p>\n\n<pre class="hljs">npm install --save-dev babel-core babel-cli babel-preset-es2015\n</pre>\n\n<p>Since we'll be writing a bunch of unit tests, we'll also need some libraries to write them with:</p>\n\n<pre class="hljs">npm install --save-dev mocha chai\n</pre>\n\n<p><a href="https://mochajs.org/">Mocha</a> is the test framework we'll be using and <a href="http://chaijs.com/">Chai</a> is an assertion/expectation library we'll use inside our tests to specify what we expect to happen.</p>\n\n<p>We'll be able to run tests with the <code>mocha</code> command that we have under <code>node_modules</code>:</p>\n\n<pre class="hljs">./node_modules/mocha/bin/mocha --compilers js:babel-core/register --recursive\n</pre>\n\n<p>This command tells Mocha to recursively find all tests from the project and run them. It uses Babel to transpile ES6 code before running it.</p>\n\n<p>It'll be easier in the long run to store this command in our <code>package.json</code>:</p>\n\n<div class="codeblock-banner">package.json</div>\n\n<pre class="hljs"><span class="hljs-string">"scripts"</span>: {\n  <span class="hljs-string">"test"</span>: <span class="hljs-string">"mocha --compilers js:babel-core/register --recursive"</span>\n},\n</pre>\n\n<p>Another thing we need to do is enable Babel's ES6/ES2015 language support. It's done by activating the <code>babel-preset-es2015</code> package that we already installed. We just need to add a <code>"babel"</code> section to <code>package.json</code>:</p>\n\n<div class="codeblock-banner">package.json</div>\n\n<pre class="hljs"><span class="hljs-string">"babel"</span>: {\n  <span class="hljs-string">"presets"</span>: [<span class="hljs-string">"es2015"</span>]\n}\n</pre>\n\n<p>Now we can just run the tests with the <code>npm</code> command:</p>\n\n<pre class="hljs">npm run <span class="hljs-built_in">test</span>\n</pre>\n\n<p>Another command called <code>test:watch</code> will be useful for launching a process that watches for changes in our code and runs the tests after each change:</p>\n\n<div class="codeblock-banner">package.json</div>\n\n<pre class="hljs"><span class="hljs-string">"scripts"</span>: {\n  <span class="hljs-string">"test"</span>: <span class="hljs-string">"mocha --compilers js:babel-core/register --recursive"</span>,\n  <span class="hljs-string">"test:watch"</span>: <span class="hljs-string">"npm run test -- --watch"</span>\n},\n</pre>\n\n<p>One of the first libraries we're going to be using is Facebook's <a href="http://facebook.github.io/immutable-js/">Immutable</a>, which provides a number of data structures for us to use. We're going to start discussing Immutable in the next section, but for now let's just add it to the project, along with the <a href="https://github.com/astorije/chai-immutable">chai-immutable</a> library that extends Chai to add support for comparing Immutable data structures:</p>\n\n<pre class="hljs">npm install --save immutable\nnpm install --save-dev chai-immutable\n</pre>\n\n<p>We need to let plug in chai-immutable before any tests are run. That we can do in a little test helper file, which should create next:</p>\n\n<div class="codeblock-banner">test/test_helper.js</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> chai <span class="hljs-keyword">from</span> <span class="hljs-string">'chai'</span>;\n<span class="hljs-keyword">import</span> chaiImmutable <span class="hljs-keyword">from</span> <span class="hljs-string">'chai-immutable'</span>;\n\nchai.use(chaiImmutable);\n</pre>\n\n<p>Then we need to have Mocha require this file before it starts running tests:</p>\n\n<div class="codeblock-banner">package.json</div>\n\n<pre class="hljs"><span class="hljs-string">"scripts"</span>: {\n  <span class="hljs-string">"test"</span>: <span class="hljs-string">"mocha --compilers js:babel-core/register </span><span class="codeblock-highlight"><span class="hljs-string">--require ./test/test_helper.js</span></span><span class="hljs-string">  --recursive"</span>,\n  <span class="hljs-string">"test:watch"</span>: <span class="hljs-string">"npm run test -- --watch"</span>\n},\n</pre>\n\n<p>That gives us everything we need to get started.</p>\n\n<h4 id="getting-comfortable-with-immutable">Getting Comfortable With Immutable</h4>\n\n<p>The second important point about the Redux architecture is that the state is not just a tree, but it is in fact an <em>immutable tree</em>.</p>\n\n<p>Looking at the trees in the previous section, it might at first seem like a reasonable idea to have code that changes the state of the application by just making updates in the tree: Replacing things in maps, removing things from arrays, etc. However, this is not how things are done in Redux.</p>\n\n<p>A Redux application's state tree is an <em>immutable data structure</em>. That means that once you have a state tree, it will never change as long as it exists. It will keep holding the same state forever. How you then go to the next state is by producing <em>another</em> state tree that reflects the changes you wanted to make.</p>\n\n<p>This means any two successive states of the application are stored in two separate and independent trees. How you get from one to the next is by applying a <em>function</em> that takes the current state and <em>returns</em> a new state.</p>\n\n<p><img src="http://teropa.info/images/vote_state_succession.png"></p><p></p><p></p>\n\n<p>And why is this a good idea? Well, the first thing that people usually mention is that if you have all your state in one tree <em>and</em> you do these kinds of non-destructive updates, you can hold on to the history of your application state without doing much extra work: Just keep a collection of the previous state trees around. You can then do things like undo/redo for "free" - just set the current application state to the previous or next tree in the history. You can also serialize the history and save it for later, or send it to some storage so that you can replay it later, which can be hugely helpful when debugging.</p>\n\n<p>However, I'd say that even beyond these extra features, the most important thing about immutable data is how it simplifies your code. You get to program with <a href="https://en.wikipedia.org/wiki/Pure_function">pure functions</a>: Functions that take data and return data and do nothing else. These are functions that you can trust to behave predictably. You can call them as many times as you like and their behavior won't change. Give them the same arguments, and they'll return the same results. They're not going to change the state of the world. Testing becomes trivial, as you don't need to set up stubs or other fakes to "prepare the universe" before you call something. It's just data in, data out.</p>\n\n<p>Immutable data structures are the material we'll build our application's state from, so let's spend some time getting comfortable with it by writing some unit tests that illustrate how it all works.</p>\n\n<div class="aside">\n<p>\n  If you're already comfortable with immutable data and the <a href="http://facebook.github.io/immutable-js/">Immutable</a> library, feel free to skip to the next section.\n</p>\n</div>\n\n<p>To get acquainted with the idea of immutability, it may be helpful to first talk about the simplest possible data structure: What if you had a "counter" application whose state was nothing but a single number? The state would go  from 0 to 1 to 2 to 3, etc.</p>\n\n<p>We are already used to thinking of numbers as immutable data. When the counter increments, we don't <em>mutate</em> a number. It would in fact be impossible as there are no "setters" on numbers. You can't say <code>42.setValue(43)</code>.</p>\n\n<p>What happens instead is we get <em>another</em> number, which is the result of adding 1 to the previous number. That we can do with a pure function. Its argument is the current state and its return value will be used as the next state. When it is called, it does not change the current state. Here is such a function and a unit test for it:</p>\n\n<div class="codeblock-banner">test/immutable_spec.js</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> {expect} <span class="hljs-keyword">from</span> <span class="hljs-string">'chai'</span>;\n\ndescribe(<span class="hljs-string">'immutability'</span>, () =&gt; {\n\n  describe(<span class="hljs-string">'a number'</span>, () =&gt; {\n\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">increment</span>(<span class="hljs-params">currentState</span>) </span>{\n      <span class="hljs-keyword">return</span> currentState + <span class="hljs-number">1</span>;\n    }\n\n    it(<span class="hljs-string">'is immutable'</span>, () =&gt; {\n      <span class="hljs-keyword">let</span> state = <span class="hljs-number">42</span>;\n      <span class="hljs-keyword">let</span> nextState = increment(state);\n\n      expect(nextState).to.equal(<span class="hljs-number">43</span>);\n      expect(state).to.equal(<span class="hljs-number">42</span>);\n    });\n\n  });\n\n});\n</pre>\n\n<p>The fact that <code>state</code> doesn't change when <code>increment</code> is called should be obvious. How could it? Numbers are immutable!</p>\n\n<div class="aside">\n<p>\nYou may have noticed that this test really has nothing to do with our application - we don't even have any application code yet!\n</p>\n<p>\nThe test is just a learning tool for us. I often find it useful to explore a new API or technique by writing unit tests that exercise the relevant ideas, which is what we're doing here. Kent Beck calls these kinds of tests "Learning Tests" in <a href="http://www.amazon.com/Test-Driven-Development-By-Example/dp/0321146530">his original TDD book</a>.\n</p>\n</div>\n\n<p>What we're going to do next is extend this same idea of immutability to all kinds of data structures, not just numbers.</p>\n\n<p>With Immutable's <a href="https://facebook.github.io/immutable-js/docs/#/Listf">Lists</a>, we can, for example, have an application whose state is a list of movies. An operation that adds a movie produces <em>a new list that is the old list and the new movie combined</em>. Crucially, the old state <em>remains unchanged</em> after the operation:</p>\n\n<div class="codeblock-banner">test/immutable_spec.js</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> {expect} <span class="hljs-keyword">from</span> <span class="hljs-string">'chai'</span>;\n<span class="codeblock-highlight"><span class="hljs-keyword">import</span> {List} <span class="hljs-keyword">from</span> <span class="hljs-string">'immutable'</span>;</span>\n\ndescribe(<span class="hljs-string">'immutability'</span>, () =&gt; {\n\n  <span class="hljs-comment">// ...</span>\n\n  describe(<span class="hljs-string">'A List'</span>, () =&gt; {\n\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addMovie</span>(<span class="hljs-params">currentState, movie</span>) </span>{\n      <span class="hljs-keyword">return</span> currentState.push(movie);\n    }\n\n    it(<span class="hljs-string">'is immutable'</span>, () =&gt; {\n      <span class="hljs-keyword">let</span> state = List.of(<span class="hljs-string">'Trainspotting'</span>, <span class="hljs-string">'28 Days Later'</span>);\n      <span class="hljs-keyword">let</span> nextState = addMovie(state, <span class="hljs-string">'Sunshine'</span>);\n\n      expect(nextState).to.equal(List.of(\n        <span class="hljs-string">'Trainspotting'</span>,\n        <span class="hljs-string">'28 Days Later'</span>,\n        <span class="hljs-string">'Sunshine'</span>\n      ));\n      expect(state).to.equal(List.of(\n        <span class="hljs-string">'Trainspotting'</span>,\n        <span class="hljs-string">'28 Days Later'</span>\n      ));\n    });\n\n  });\n\n});\n\n</pre>\n\n<p>The old state would not have remained unchanged if we'd pushed into a regular array! Since we're using an Immutable List instead, we have the same semantics as we had with the number example.</p>\n\n<p>The idea extends to full state <em>trees</em> as well. A state tree is just a nested data structure of Lists, <a href="https://facebook.github.io/immutable-js/docs/#/Map">Maps</a>, and possibly other kinds of collections. Applying an operation to it involves producing a <em>new state tree</em>, leaving the previous one untouched. If the state tree is a Map with a key <code>'movies'</code> that contains a List of movies, adding a movie means we need to create a new Map, where the <code>movies</code> key points to a new List:</p>\n\n<div class="codeblock-banner">test/immutable_spec.js</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> {expect} <span class="hljs-keyword">from</span> <span class="hljs-string">'chai'</span>;\n<span class="hljs-keyword">import</span> {List<span class="codeblock-highlight">, Map</span>} <span class="hljs-keyword">from</span> <span class="hljs-string">'immutable'</span>;\n\ndescribe(<span class="hljs-string">'immutability'</span>, () =&gt; {\n\n  <span class="hljs-comment">// ...</span>\n\n  describe(<span class="hljs-string">'a tree'</span>, () =&gt; {\n\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addMovie</span>(<span class="hljs-params">currentState, movie</span>) </span>{\n      <span class="hljs-keyword">return</span> currentState.set(\n        <span class="hljs-string">'movies'</span>,\n        currentState.get(<span class="hljs-string">'movies'</span>).push(movie)\n      );\n    }\n\n    it(<span class="hljs-string">'is immutable'</span>, () =&gt; {\n      <span class="hljs-keyword">let</span> state = <span class="hljs-built_in">Map</span>({\n        movies: List.of(<span class="hljs-string">'Trainspotting'</span>, <span class="hljs-string">'28 Days Later'</span>)\n      });\n      <span class="hljs-keyword">let</span> nextState = addMovie(state, <span class="hljs-string">'Sunshine'</span>);\n\n      expect(nextState).to.equal(<span class="hljs-built_in">Map</span>({\n        movies: List.of(\n          <span class="hljs-string">'Trainspotting'</span>,\n          <span class="hljs-string">'28 Days Later'</span>,\n          <span class="hljs-string">'Sunshine'</span>\n        )\n      }));\n      expect(state).to.equal(<span class="hljs-built_in">Map</span>({\n        movies: List.of(\n          <span class="hljs-string">'Trainspotting'</span>,\n          <span class="hljs-string">'28 Days Later'</span>\n        )\n      }));\n    });\n\n  });\n\n});\n</pre>\n\n<p>This is exactly the same behavior as before, just extended to show that it works with nested data structures too. The same idea holds to all shapes and sizes of data.</p>\n\n<p>For operations on nested data structures such as this one, Immutable provides several helper functions that make it easier to "reach into" the nested data to produce an updated value. We can use one called <a href="https://facebook.github.io/immutable-js/docs/#/Map/update">update</a> in this case to make the code more concise:</p>\n\n<div class="codeblock-banner">test/immutable_spec.js</div>\n\n<pre class="hljs"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addMovie</span>(<span class="hljs-params">currentState, movie</span>) </span>{\n  <span class="hljs-keyword">return</span> currentState.update(<span class="hljs-string">'movies'</span>, movies =&gt; movies.push(movie));\n}\n</pre>\n\n<p>This gives us an understanding of how immutable data feels like. It is what we'll be using for our application state. There's a lot of functionality packed into the <a href="https://facebook.github.io/immutable-js/docs/#/">Immutable API</a> though, and we've only just scratched the surface.</p>\n\n<div class="aside">\n<p>\nWhile immutable data is a key aspect of Redux architectures, there is no hard requirement to use the Immutable library with it. In fact, the examples in the <a href="http://rackt.github.io/redux/">official Redux documentation</a> mostly use plain old JavaScript objects and arrays, and simply refrain from mutating them <em>by convention</em>.\n</p>\n<p>\nIn this tutorial, we'll use the Immutable library instead, and there are several reasons for it:\n</p><ul>\n  <li>Immutable's data structures are designed from the ground up to be used immutably and thus provide an API that makes immutable operations convenient.</li>\n  <li>I'm partial to <a href="http://codequarterly.com/2011/rich-hickey/">Rich Hickey's view that there is no such as thing as immutability by convention</a>. If you use  data structures that allow mutations, sooner or later you or someone else is bound to make a mistake and mutate them. This is especially true when you're just getting started. Things like <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze">Object.freeze()</a> may help with this.</li>\n  <li>Immutable's data structures are <a href="https://en.wikipedia.org/wiki/Persistent_data_structure">persistent</a>, meaning that they are internally structured so that producing new versions is efficient both in terms of time and memory, even for large state trees. Using plain objects and arrays may result in excessive amounts of copying, which hurts performance.</li>\n</ul>\n<p></p>\n</div>\n\n<h4 id="writing-the-application-logic-with-pure-functions">Writing The Application Logic With Pure Functions</h4>\n\n<p>Armed with an understanding of immutable state trees and the functions that operate on them, we can turn our attention to the logic of our voting application itself. The core of the app will be formed from the pieces that we have been discussing: A tree structure and a set of functions that produce new versions of that tree structure.</p>\n\n<h5 id="loading-entries">Loading Entries</h5>\n\n<p>First of all, as we discussed earlier, the application allows "loading in" a collection of entries that will be voted on. We could have a function called <code>setEntries</code> that takes a previous state and a collection of entries and produces a state where the entries are included. Here's a test for that:</p>\n\n<div class="codeblock-banner">test/core_spec.js</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> {List, Map} <span class="hljs-keyword">from</span> <span class="hljs-string">'immutable'</span>;\n<span class="hljs-keyword">import</span> {expect} <span class="hljs-keyword">from</span> <span class="hljs-string">'chai'</span>;\n\n<span class="hljs-keyword">import</span> {setEntries} <span class="hljs-keyword">from</span> <span class="hljs-string">'../src/core'</span>;\n\ndescribe(<span class="hljs-string">'application logic'</span>, () =&gt; {\n\n  describe(<span class="hljs-string">'setEntries'</span>, () =&gt; {\n\n    it(<span class="hljs-string">'adds the entries to the state'</span>, () =&gt; {\n      <span class="hljs-keyword">const</span> state = <span class="hljs-built_in">Map</span>();\n      <span class="hljs-keyword">const</span> entries = List.of(<span class="hljs-string">'Trainspotting'</span>, <span class="hljs-string">'28 Days Later'</span>);\n      <span class="hljs-keyword">const</span> nextState = setEntries(state, entries);\n      expect(nextState).to.equal(<span class="hljs-built_in">Map</span>({\n        entries: List.of(<span class="hljs-string">'Trainspotting'</span>, <span class="hljs-string">'28 Days Later'</span>)\n      }));\n    });\n\n  });\n\n});\n</pre>\n\n<p>Our initial implementation of <code>setEntries</code> can just do the simplest thing possible: It can set an <code>entries</code> key in the state Map, and set the value as the given List of entries. That produces the first of the state trees we designed earlier.</p>\n\n<div class="codeblock-banner">src/core.js</div>\n\n<pre class="hljs"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setEntries</span>(<span class="hljs-params">state, entries</span>) </span>{\n  <span class="hljs-keyword">return</span> state.set(<span class="hljs-string">'entries'</span>, entries);\n}\n</pre>\n\n<p>For convenience, we'll allow the input entries to be a regular JavaScript array (or actually anything <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Iteration_protocols">iterable</a>). It should still be an Immutable List by the time it's in the state tree:</p>\n\n<div class="codeblock-banner">test/core_spec.js</div>\n\n<pre class="hljs">it(<span class="hljs-string">'converts to immutable'</span>, () =&gt; {\n  <span class="hljs-keyword">const</span> state = <span class="hljs-built_in">Map</span>();\n  <span class="hljs-keyword">const</span> entries = [<span class="hljs-string">'Trainspotting'</span>, <span class="hljs-string">'28 Days Later'</span>];\n  <span class="hljs-keyword">const</span> nextState = setEntries(state, entries);\n  expect(nextState).to.equal(<span class="hljs-built_in">Map</span>({\n    entries: List.of(<span class="hljs-string">'Trainspotting'</span>, <span class="hljs-string">'28 Days Later'</span>)\n  }));\n});\n</pre>\n\n<p>In the implementation we should pass the given entries into the List constructor to satisfy this requirement:</p>\n\n<div class="codeblock-banner">src/core.js</div>\n\n<pre class="hljs"><span class="codeblock-highlight"><span class="hljs-keyword">import</span> {List} <span class="hljs-keyword">from</span> <span class="hljs-string">'immutable'</span>;</span>\n\n<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setEntries</span>(<span class="hljs-params">state, entries</span>) </span>{\n  <span class="hljs-keyword">return</span> state.set(<span class="hljs-string">'entries'</span>, <span class="codeblock-highlight">List(entries)</span>);\n}\n</pre>\n\n<h5 id="starting-the-vote">Starting The Vote</h5>\n\n<p>We can begin the voting by calling a function called <code>next</code> on a state that already has entries set. That means, going from the first to the second of the state trees we designed.</p>\n\n<p>The function takes no additional arguments. It should create a <code>vote</code> Map on the state, where the two first entries are included under the key <code>pair</code>. The entries under vote should no longer be in the <code>entries</code> List:</p>\n\n<div class="codeblock-banner">test/core_spec.js</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> {List, Map} <span class="hljs-keyword">from</span> <span class="hljs-string">'immutable'</span>;\n<span class="hljs-keyword">import</span> {expect} <span class="hljs-keyword">from</span> <span class="hljs-string">'chai'</span>;\n<span class="hljs-keyword">import</span> {setEntries<span class="codeblock-highlight">, next</span>} <span class="hljs-keyword">from</span> <span class="hljs-string">'../src/core'</span>;\n\ndescribe(<span class="hljs-string">'application logic'</span>, () =&gt; {\n\n  <span class="hljs-comment">// ..</span>\n\n  describe(<span class="hljs-string">'next'</span>, () =&gt; {\n\n    it(<span class="hljs-string">'takes the next two entries under vote'</span>, () =&gt; {\n      <span class="hljs-keyword">const</span> state = <span class="hljs-built_in">Map</span>({\n        entries: List.of(<span class="hljs-string">'Trainspotting'</span>, <span class="hljs-string">'28 Days Later'</span>, <span class="hljs-string">'Sunshine'</span>)\n      });\n      <span class="hljs-keyword">const</span> nextState = next(state);\n      expect(nextState).to.equal(<span class="hljs-built_in">Map</span>({\n        vote: <span class="hljs-built_in">Map</span>({\n          pair: List.of(<span class="hljs-string">'Trainspotting'</span>, <span class="hljs-string">'28 Days Later'</span>)\n        }),\n        entries: List.of(<span class="hljs-string">'Sunshine'</span>)\n      }));\n    });\n\n  });\n\n});\n</pre>\n\n<p>The implementation for this will <a href="https://facebook.github.io/immutable-js/docs/#/Map/merge">merge</a> an update into the old state, where the first two entries are put in one List, and the rest in the new version of <code>entries</code>:</p>\n\n<div class="codeblock-banner">src/core.js</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> {List<span class="codeblock-highlight">, Map</span>} <span class="hljs-keyword">from</span> <span class="hljs-string">'immutable'</span>;\n\n<span class="hljs-comment">// ...</span>\n\n<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">next</span>(<span class="hljs-params">state</span>) </span>{\n  <span class="hljs-keyword">const</span> entries = state.get(<span class="hljs-string">'entries'</span>);\n  <span class="hljs-keyword">return</span> state.merge({\n    vote: <span class="hljs-built_in">Map</span>({pair: entries.take(<span class="hljs-number">2</span>)}),\n    entries: entries.skip(<span class="hljs-number">2</span>)\n  });\n}\n</pre>\n\n<h5 id="voting">Voting</h5>\n\n<p>When a vote is ongoing, it should be possible for people to vote on entries. When a new vote is cast for an entry, a "tally" for it should appear in the vote. If there already is a tally for the entry, it should be incremented:</p>\n\n<div class="codeblock-banner">test/core_spec.js</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> {List, Map} <span class="hljs-keyword">from</span> <span class="hljs-string">'immutable'</span>;\n<span class="hljs-keyword">import</span> {expect} <span class="hljs-keyword">from</span> <span class="hljs-string">'chai'</span>;\n<span class="hljs-keyword">import</span> {setEntries, next<span class="codeblock-highlight">, vote</span>} <span class="hljs-keyword">from</span> <span class="hljs-string">'../src/core'</span>;\n\ndescribe(<span class="hljs-string">'application logic'</span>, () =&gt; {\n\n  <span class="hljs-comment">// ...</span>\n\n  describe(<span class="hljs-string">'vote'</span>, () =&gt; {\n\n    it(<span class="hljs-string">'creates a tally for the voted entry'</span>, () =&gt; {\n      <span class="hljs-keyword">const</span> state = <span class="hljs-built_in">Map</span>({\n        vote: <span class="hljs-built_in">Map</span>({\n          pair: List.of(<span class="hljs-string">'Trainspotting'</span>, <span class="hljs-string">'28 Days Later'</span>)\n        }),\n        entries: List()\n      });\n      <span class="hljs-keyword">const</span> nextState = vote(state, <span class="hljs-string">'Trainspotting'</span>);\n      expect(nextState).to.equal(<span class="hljs-built_in">Map</span>({\n        vote: <span class="hljs-built_in">Map</span>({\n          pair: List.of(<span class="hljs-string">'Trainspotting'</span>, <span class="hljs-string">'28 Days Later'</span>),\n          tally: <span class="hljs-built_in">Map</span>({\n            <span class="hljs-string">'Trainspotting'</span>: <span class="hljs-number">1</span>\n          })\n        }),\n        entries: List()\n      }));\n    });\n\n    it(<span class="hljs-string">'adds to existing tally for the voted entry'</span>, () =&gt; {\n      <span class="hljs-keyword">const</span> state = <span class="hljs-built_in">Map</span>({\n        vote: <span class="hljs-built_in">Map</span>({\n          pair: List.of(<span class="hljs-string">'Trainspotting'</span>, <span class="hljs-string">'28 Days Later'</span>),\n          tally: <span class="hljs-built_in">Map</span>({\n            <span class="hljs-string">'Trainspotting'</span>: <span class="hljs-number">3</span>,\n            <span class="hljs-string">'28 Days Later'</span>: <span class="hljs-number">2</span>\n          })\n        }),\n        entries: List()\n      });\n      <span class="hljs-keyword">const</span> nextState = vote(state, <span class="hljs-string">'Trainspotting'</span>);\n      expect(nextState).to.equal(<span class="hljs-built_in">Map</span>({\n        vote: <span class="hljs-built_in">Map</span>({\n          pair: List.of(<span class="hljs-string">'Trainspotting'</span>, <span class="hljs-string">'28 Days Later'</span>),\n          tally: <span class="hljs-built_in">Map</span>({\n            <span class="hljs-string">'Trainspotting'</span>: <span class="hljs-number">4</span>,\n            <span class="hljs-string">'28 Days Later'</span>: <span class="hljs-number">2</span>\n          })\n        }),\n        entries: List()\n      }));\n    });\n\n  });\n\n});\n</pre>\n\n<div class="aside">\n<p>\n  You could build all these nested Maps and Lists more concisely using the <a href="https://facebook.github.io/immutable-js/docs/#/fromJS">fromJS</a> function from Immutable.\n</p>\n</div>\n\n<p>We can make these tests pass with the following:</p>\n\n<div class="codeblock-banner">src/core.js</div>\n\n<pre class="hljs"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">vote</span>(<span class="hljs-params">state, entry</span>) </span>{\n  <span class="hljs-keyword">return</span> state.updateIn(\n    [<span class="hljs-string">'vote'</span>, <span class="hljs-string">'tally'</span>, entry],\n    <span class="hljs-number">0</span>,\n    tally =&gt; tally + <span class="hljs-number">1</span>\n  );\n}\n</pre>\n\n<p>Using <a href="https://facebook.github.io/immutable-js/docs/#/Map/updateIn">updateIn</a> makes this pleasingly succinct. What the code expresses is "reach into the nested data structure path <code>['vote', 'tally', 'Trainspotting']</code>, and apply this function there. If there are keys missing along the path, create new Maps in their place. If the value at the end is missing, initialize it with <code>0</code>".</p>\n\n<p>It packs a lot of punch, but this is exactly the kind of code that makes working with immutable data structures pleasant, so it's worth spending a bit of time getting comfortable with it.</p>\n\n<h5 id="moving-to-the-next-pair">Moving to The Next Pair</h5>\n\n<p>Once the vote for a given pair is over, we should proceed to the next one. The winning entry from the current vote should be kept, and added back to the end of the entries, so that it will later be paired with something else. The losing entry is thrown away. If there is a tie, both entries are kept.</p>\n\n<p>We'll add this logic to the existing implementation of <code>next</code>:</p>\n\n<div class="codeblock-banner">test/core_spec.js</div>\n\n<pre class="hljs">describe(<span class="hljs-string">'next'</span>, () =&gt; {\n\n  <span class="hljs-comment">// ...</span>\n\n  it(<span class="hljs-string">'puts winner of current vote back to entries'</span>, () =&gt; {\n    <span class="hljs-keyword">const</span> state = <span class="hljs-built_in">Map</span>({\n      vote: <span class="hljs-built_in">Map</span>({\n        pair: List.of(<span class="hljs-string">'Trainspotting'</span>, <span class="hljs-string">'28 Days Later'</span>),\n        tally: <span class="hljs-built_in">Map</span>({\n          <span class="hljs-string">'Trainspotting'</span>: <span class="hljs-number">4</span>,\n          <span class="hljs-string">'28 Days Later'</span>: <span class="hljs-number">2</span>\n        })\n      }),\n      entries: List.of(<span class="hljs-string">'Sunshine'</span>, <span class="hljs-string">'Millions'</span>, <span class="hljs-string">'127 Hours'</span>)\n    });\n    <span class="hljs-keyword">const</span> nextState = next(state);\n    expect(nextState).to.equal(<span class="hljs-built_in">Map</span>({\n      vote: <span class="hljs-built_in">Map</span>({\n        pair: List.of(<span class="hljs-string">'Sunshine'</span>, <span class="hljs-string">'Millions'</span>)\n      }),\n      entries: List.of(<span class="hljs-string">'127 Hours'</span>, <span class="hljs-string">'Trainspotting'</span>)\n    }));\n  });\n\n  it(<span class="hljs-string">'puts both from tied vote back to entries'</span>, () =&gt; {\n    <span class="hljs-keyword">const</span> state = <span class="hljs-built_in">Map</span>({\n      vote: <span class="hljs-built_in">Map</span>({\n        pair: List.of(<span class="hljs-string">'Trainspotting'</span>, <span class="hljs-string">'28 Days Later'</span>),\n        tally: <span class="hljs-built_in">Map</span>({\n          <span class="hljs-string">'Trainspotting'</span>: <span class="hljs-number">3</span>,\n          <span class="hljs-string">'28 Days Later'</span>: <span class="hljs-number">3</span>\n        })\n      }),\n      entries: List.of(<span class="hljs-string">'Sunshine'</span>, <span class="hljs-string">'Millions'</span>, <span class="hljs-string">'127 Hours'</span>)\n    });\n    <span class="hljs-keyword">const</span> nextState = next(state);\n    expect(nextState).to.equal(<span class="hljs-built_in">Map</span>({\n      vote: <span class="hljs-built_in">Map</span>({\n        pair: List.of(<span class="hljs-string">'Sunshine'</span>, <span class="hljs-string">'Millions'</span>)\n      }),\n      entries: List.of(<span class="hljs-string">'127 Hours'</span>, <span class="hljs-string">'Trainspotting'</span>, <span class="hljs-string">'28 Days Later'</span>)\n    }));\n  });\n\n});\n</pre>\n\n<p>In the implementation we'll just concatenate the "winners" of the current vote to the entries. We can find those winners with a new function called <code>getWinners</code>:</p>\n\n<div class="codeblock-banner">src/core.js</div>\n\n<pre class="hljs"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getWinners</span>(<span class="hljs-params">vote</span>) </span>{\n  <span class="hljs-keyword">if</span> (!vote) <span class="hljs-keyword">return</span> [];\n  <span class="hljs-keyword">const</span> [a, b] = vote.get(<span class="hljs-string">'pair'</span>);\n  <span class="hljs-keyword">const</span> aVotes = vote.getIn([<span class="hljs-string">'tally'</span>, a], <span class="hljs-number">0</span>);\n  <span class="hljs-keyword">const</span> bVotes = vote.getIn([<span class="hljs-string">'tally'</span>, b], <span class="hljs-number">0</span>);\n  <span class="hljs-keyword">if</span>      (aVotes &gt; bVotes)  <span class="hljs-keyword">return</span> [a];\n  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (aVotes &lt; bVotes)  <span class="hljs-keyword">return</span> [b];\n  <span class="hljs-keyword">else</span>                       <span class="hljs-keyword">return</span> [a, b];\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">next</span>(<span class="hljs-params">state</span>) </span>{\n  <span class="hljs-keyword">const</span> entries = state.get(<span class="hljs-string">'entries'</span>)\n                       <span class="codeblock-highlight">.concat(getWinners(state.get(<span class="hljs-string">'vote'</span>)))</span>;\n  <span class="hljs-keyword">return</span> state.merge({\n    vote: <span class="hljs-built_in">Map</span>({pair: entries.take(<span class="hljs-number">2</span>)}),\n    entries: entries.skip(<span class="hljs-number">2</span>)\n  });\n}\n</pre>\n\n<h5 id="ending-the-vote">Ending The Vote</h5>\n\n<p>At some point there's just going to be one entry left when a vote ends. At that point we have a winning entry. What we should do is, instead of trying to form a next vote, just set the winner in the state explicitly. The vote is over.</p>\n\n<div class="codeblock-banner">test/core_spec.js</div>\n\n<pre class="hljs">describe(<span class="hljs-string">'next'</span>, () =&gt; {\n\n  <span class="hljs-comment">// ...</span>\n\n  it(<span class="hljs-string">'marks winner when just one entry left'</span>, () =&gt; {\n    <span class="hljs-keyword">const</span> state = <span class="hljs-built_in">Map</span>({\n      vote: <span class="hljs-built_in">Map</span>({\n        pair: List.of(<span class="hljs-string">'Trainspotting'</span>, <span class="hljs-string">'28 Days Later'</span>),\n        tally: <span class="hljs-built_in">Map</span>({\n          <span class="hljs-string">'Trainspotting'</span>: <span class="hljs-number">4</span>,\n          <span class="hljs-string">'28 Days Later'</span>: <span class="hljs-number">2</span>\n        })\n      }),\n      entries: List()\n    });\n    <span class="hljs-keyword">const</span> nextState = next(state);\n    expect(nextState).to.equal(<span class="hljs-built_in">Map</span>({\n      winner: <span class="hljs-string">'Trainspotting'</span>\n    }));\n  });\n\n});\n</pre>\n\n<p>In the implementation of <code>next</code> we should have a special case for the situation where the entries has a size of 1 after we've processed the current vote:</p>\n\n<div class="codeblock-banner">src/core.js</div>\n\n<pre class="hljs"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">next</span>(<span class="hljs-params">state</span>) </span>{\n  <span class="hljs-keyword">const</span> entries = state.get(<span class="hljs-string">'entries'</span>)\n                       .concat(getWinners(state.get(<span class="hljs-string">'vote'</span>)));\n<span class="codeblock-highlight">  <span class="hljs-keyword">if</span> (entries.size === <span class="hljs-number">1</span>) {\n    <span class="hljs-keyword">return</span> state.remove(<span class="hljs-string">'vote'</span>)\n                .remove(<span class="hljs-string">'entries'</span>)\n                .set(<span class="hljs-string">'winner'</span>, entries.first());\n  } <span class="hljs-keyword">else</span> {</span>\n    <span class="hljs-keyword">return</span> state.merge({\n      vote: <span class="hljs-built_in">Map</span>({pair: entries.take(<span class="hljs-number">2</span>)}),\n      entries: entries.skip(<span class="hljs-number">2</span>)\n    });\n<span class="codeblock-highlight">  }</span>\n}\n</pre>\n\n<p>We could have just returned <code>Map({winner: entries.first()})</code> here. But instead we still take the old state as the starting point and explicitly remove <code>'vote'</code> and <code>'entries'</code> keys from it. The reason for this is future-proofing: At some point we might have some unrelated data in the state, and it should pass through this function unchanged. It is generally a good idea in these state transformation functions to always morph the old state into the new one instead of building the new state completely from scratch.</p>\n\n<p>Here we have an acceptable version of the core logic of our app, expressed as a few functions. We also have unit tests for them, and writing those tests has been relatively easy: No setup, no mocks, no stubs. That's the beauty of pure functions. We can just call them and inspect the return values.</p>\n\n<p>Note that we haven't even installed Redux yet. We've been able to focus totally on the logic of the app itself, without bringing the "framework" in. There's something very pleasing about that.</p>\n\n<h4 id="introducing-actions-and-reducers">Introducing Actions and Reducers</h4>\n\n<p>We have the core functions of our app, but in Redux you don't actually call those functions directly. There is a layer of indirection between the functions and the outside world: <em>Actions</em>.</p>\n\n<p>An action is a simple data structure that describes a change that should occur in your app state. It's basically a description of a function call packaged into a little object. By convention, every action has a <code>type</code> attribute that describes which operation the action is for. Each action may also carry additional attributes. Here are a few example actions that match the core functions we have just written:</p>\n\n<pre class="hljs">{type: <span class="hljs-string">'SET_ENTRIES'</span>, entries: [<span class="hljs-string">'Trainspotting'</span>, <span class="hljs-string">'28 Days Later'</span>]}\n\n{type: <span class="hljs-string">'NEXT'</span>}\n\n{type: <span class="hljs-string">'VOTE'</span>, entry: <span class="hljs-string">'Trainspotting'</span>}\n</pre>\n\n<p>If actions are expressed like this, we also need a way to turn them into the actual core function calls. For example, given the <code>VOTE</code> action, the following call should be made:</p>\n\n<pre class="hljs"><span class="hljs-comment">// This action</span>\n<span class="hljs-keyword">let</span> voteAction = {type: <span class="hljs-string">'VOTE'</span>, entry: <span class="hljs-string">'Trainspotting'</span>}\n<span class="hljs-comment">// should cause this to happen</span>\n<span class="hljs-keyword">return</span> vote(state, voteAction.entry);\n</pre>\n\n<p>What we're going to write is a generic function that takes any kind of action - along with the current state - and invokes the core function that matches the action. This function is called a <em>reducer</em>:</p>\n\n<div class="codeblock-banner">src/reducer.js</div>\n\n<pre class="hljs"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reducer</span>(<span class="hljs-params">state, action</span>) </span>{\n  <span class="hljs-comment">// Figure out which function to call and call it</span>\n}\n</pre>\n\n<p>We should test that the reducer can indeed handle each of our three actions:</p>\n\n<div class="codeblock-banner">test/reducer_spec.js</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> {Map, fromJS} <span class="hljs-keyword">from</span> <span class="hljs-string">'immutable'</span>;\n<span class="hljs-keyword">import</span> {expect} <span class="hljs-keyword">from</span> <span class="hljs-string">'chai'</span>;\n\n<span class="hljs-keyword">import</span> reducer <span class="hljs-keyword">from</span> <span class="hljs-string">'../src/reducer'</span>;\n\ndescribe(<span class="hljs-string">'reducer'</span>, () =&gt; {\n\n  it(<span class="hljs-string">'handles SET_ENTRIES'</span>, () =&gt; {\n    <span class="hljs-keyword">const</span> initialState = <span class="hljs-built_in">Map</span>();\n    <span class="hljs-keyword">const</span> action = {type: <span class="hljs-string">'SET_ENTRIES'</span>, entries: [<span class="hljs-string">'Trainspotting'</span>]};\n    <span class="hljs-keyword">const</span> nextState = reducer(initialState, action);\n\n    expect(nextState).to.equal(fromJS({\n      entries: [<span class="hljs-string">'Trainspotting'</span>]\n    }));\n  });\n\n  it(<span class="hljs-string">'handles NEXT'</span>, () =&gt; {\n    <span class="hljs-keyword">const</span> initialState = fromJS({\n      entries: [<span class="hljs-string">'Trainspotting'</span>, <span class="hljs-string">'28 Days Later'</span>]\n    });\n    <span class="hljs-keyword">const</span> action = {type: <span class="hljs-string">'NEXT'</span>};\n    <span class="hljs-keyword">const</span> nextState = reducer(initialState, action);\n\n    expect(nextState).to.equal(fromJS({\n      vote: {\n        pair: [<span class="hljs-string">'Trainspotting'</span>, <span class="hljs-string">'28 Days Later'</span>]\n      },\n      entries: []\n    }));\n  });\n\n  it(<span class="hljs-string">'handles VOTE'</span>, () =&gt; {\n    <span class="hljs-keyword">const</span> initialState = fromJS({\n      vote: {\n        pair: [<span class="hljs-string">'Trainspotting'</span>, <span class="hljs-string">'28 Days Later'</span>]\n      },\n      entries: []\n    });\n    <span class="hljs-keyword">const</span> action = {type: <span class="hljs-string">'VOTE'</span>, entry: <span class="hljs-string">'Trainspotting'</span>};\n    <span class="hljs-keyword">const</span> nextState = reducer(initialState, action);\n\n    expect(nextState).to.equal(fromJS({\n      vote: {\n        pair: [<span class="hljs-string">'Trainspotting'</span>, <span class="hljs-string">'28 Days Later'</span>],\n        tally: {Trainspotting: <span class="hljs-number">1</span>}\n      },\n      entries: []\n    }));\n  });\n\n});\n</pre>\n\n<p>Our reducer should delegate to one of the core functions based on the type of the action. It also knows how to unpack the additional arguments of each function from the action object:</p>\n\n<div class="codeblock-banner">src/reducer.js</div>\n\n<pre class="hljs"><span class="codeblock-highlight"><span class="hljs-keyword">import</span> {setEntries, next, vote} <span class="hljs-keyword">from</span> <span class="hljs-string">'./core'</span>;</span>\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reducer</span>(<span class="hljs-params">state, action</span>) </span>{\n<span class="codeblock-highlight">  <span class="hljs-keyword">switch</span> (action.type) {\n  <span class="hljs-keyword">case</span> <span class="hljs-string">'SET_ENTRIES'</span>:\n    <span class="hljs-keyword">return</span> setEntries(state, action.entries);\n  <span class="hljs-keyword">case</span> <span class="hljs-string">'NEXT'</span>:\n    <span class="hljs-keyword">return</span> next(state);\n  <span class="hljs-keyword">case</span> <span class="hljs-string">'VOTE'</span>:\n    <span class="hljs-keyword">return</span> vote(state, action.entry)\n  }\n  <span class="hljs-keyword">return</span> state;</span>\n}\n</pre>\n\n<p>Note that if the reducer doesn't recognize the action, it just returns the current state.</p>\n\n<p>An important additional requirement of reducers is that if they are called with an undefined state, they know how to initialize it to a meaningful value. In our case, the initial value is a Map. So, giving an <code>undefined</code> state should work as if an empty Map had been given:</p>\n\n<div class="codeblock-banner">test/reducer_spec.js</div>\n\n<pre class="hljs">describe(<span class="hljs-string">'reducer'</span>, () =&gt; {\n\n  <span class="hljs-comment">// ...</span>\n\n  it(<span class="hljs-string">'has an initial state'</span>, () =&gt; {\n    <span class="hljs-keyword">const</span> action = {type: <span class="hljs-string">'SET_ENTRIES'</span>, entries: [<span class="hljs-string">'Trainspotting'</span>]};\n    <span class="hljs-keyword">const</span> nextState = reducer(<span class="hljs-literal">undefined</span>, action);\n    expect(nextState).to.equal(fromJS({\n      entries: [<span class="hljs-string">'Trainspotting'</span>]\n    }));\n  });\n\n});\n</pre>\n\n<p>Since our application's logic is in <code>core.js</code>, it makes sense to introduce the initial state there:</p>\n\n<div class="codeblock-banner">src/core.js</div>\n\n<pre class="hljs"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> INITIAL_STATE = <span class="hljs-built_in">Map</span>();\n</pre>\n\n<p>In the reducer we'll import it and use it as the default value of the state argument:</p>\n\n<div class="codeblock-banner">src/reducer.js</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> {setEntries, next, vote<span class="codeblock-highlight">, INITIAL_STATE</span>} <span class="hljs-keyword">from</span> <span class="hljs-string">'./core'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reducer</span>(<span class="hljs-params">state</span></span><span class="codeblock-highlight"><span class="hljs-function"><span class="hljs-params"> = INITIAL_STATE</span></span></span><span class="hljs-function"><span class="hljs-params">, action</span>) </span>{\n  <span class="hljs-keyword">switch</span> (action.type) {\n  <span class="hljs-keyword">case</span> <span class="hljs-string">'SET_ENTRIES'</span>:\n    <span class="hljs-keyword">return</span> setEntries(state, action.entries);\n  <span class="hljs-keyword">case</span> <span class="hljs-string">'NEXT'</span>:\n    <span class="hljs-keyword">return</span> next(state);\n  <span class="hljs-keyword">case</span> <span class="hljs-string">'VOTE'</span>:\n    <span class="hljs-keyword">return</span> vote(state, action.entry)\n  }\n  <span class="hljs-keyword">return</span> state;\n}\n</pre>\n\n<p>What is interesting about the way this reducer works is how it can be generically used to take the application from one state to the next, given any type of action. Actually, given a collection of past actions, you can actually just <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce">reduce</a> that collection into the current state. That's why the function is called a <em>reducer</em>: It fulfills the contract of a reduce callback function.</p>\n\n<div class="codeblock-banner">test/reducer_spec.js</div>\n\n<pre class="hljs">it(<span class="hljs-string">'can be used with reduce'</span>, () =&gt; {\n  <span class="hljs-keyword">const</span> actions = [\n    {type: <span class="hljs-string">'SET_ENTRIES'</span>, entries: [<span class="hljs-string">'Trainspotting'</span>, <span class="hljs-string">'28 Days Later'</span>]},\n    {type: <span class="hljs-string">'NEXT'</span>},\n    {type: <span class="hljs-string">'VOTE'</span>, entry: <span class="hljs-string">'Trainspotting'</span>},\n    {type: <span class="hljs-string">'VOTE'</span>, entry: <span class="hljs-string">'28 Days Later'</span>},\n    {type: <span class="hljs-string">'VOTE'</span>, entry: <span class="hljs-string">'Trainspotting'</span>},\n    {type: <span class="hljs-string">'NEXT'</span>}\n  ];\n  <span class="hljs-keyword">const</span> finalState = actions.reduce(reducer, <span class="hljs-built_in">Map</span>());\n\n  expect(finalState).to.equal(fromJS({\n    winner: <span class="hljs-string">'Trainspotting'</span>\n  }));\n});\n</pre>\n\n<p>This ability to <em>batch</em> and/or <em>replay</em> a collection of actions is a major benefit of the action/reducer model of state transitions, when compared to calling the core functions directly. For example, given that actions are just objects that you can also serialize to JSON, you could easily send them over to a Web Worker and run your reducer logic there. Or you can even send them over the network, as we're going to do later!</p>\n\n<div class="aside">\n<p>\nNote that we are using plain objects as actions instead of Immutable data structures. This is something Redux actually requires us to do.\n</p>\n</div>\n\n<h4 id="a-taste-of-reducer-composition">A Taste of Reducer Composition</h4>\n\n<p>Our core functionality is currently defined so that each function takes the whole state of the application and returns the whole, next state of the application.</p>\n\n<p>It is easy to see how keeping to this pattern may not be a good idea in large applications. If each and every operation in the application needs to be aware of the structure of the whole state, things can easily get brittle.  If you wanted to change the shape of the state, it would require a whole lot of changes.</p>\n\n<p>It is a much better idea to, whenever you can, make operations work on the smallest piece (or <em>subtree</em>) of the state possible. What we're talking about is modularization: Have the functionality that deals with a given piece of data deal with only that part of the data, as if the rest didn't exist.</p>\n\n<p>Our application is so tiny that we don't have a problem of this kind yet, but we do already have one opportunity to improve on this: There is no reason for the <code>vote</code> function to receive the whole app state, since it only works on the <code>'vote'</code> part of it. That's the only thing it should know about. We can modify the existing unit tests for <code>vote</code> to reflect this idea:</p>\n\n<div class="codeblock-banner">test/core_spec.js</div>\n\n<pre class="hljs">describe(<span class="hljs-string">'vote'</span>, () =&gt; {\n\n  it(<span class="hljs-string">'creates a tally for the voted entry'</span>, () =&gt; {\n    <span class="hljs-keyword">const</span> state = <span class="hljs-built_in">Map</span>({\n<span class="codeblock-highlight">      pair: List.of(<span class="hljs-string">'Trainspotting'</span>, <span class="hljs-string">'28 Days Later'</span>)</span>\n    });\n    <span class="hljs-keyword">const</span> nextState = vote(state, <span class="hljs-string">'Trainspotting'</span>)\n    expect(nextState).to.equal(<span class="hljs-built_in">Map</span>({\n<span class="codeblock-highlight">      pair: List.of(<span class="hljs-string">'Trainspotting'</span>, <span class="hljs-string">'28 Days Later'</span>),\n      tally: <span class="hljs-built_in">Map</span>({\n        <span class="hljs-string">'Trainspotting'</span>: <span class="hljs-number">1</span>\n      })</span>\n    }));\n  });\n\n  it(<span class="hljs-string">'adds to existing tally for the voted entry'</span>, () =&gt; {\n    <span class="hljs-keyword">const</span> state = <span class="hljs-built_in">Map</span>({\n<span class="codeblock-highlight">      pair: List.of(<span class="hljs-string">'Trainspotting'</span>, <span class="hljs-string">'28 Days Later'</span>),\n      tally: <span class="hljs-built_in">Map</span>({\n        <span class="hljs-string">'Trainspotting'</span>: <span class="hljs-number">3</span>,\n        <span class="hljs-string">'28 Days Later'</span>: <span class="hljs-number">2</span>\n      })</span>\n    });\n    <span class="hljs-keyword">const</span> nextState = vote(state, <span class="hljs-string">'Trainspotting'</span>);\n    expect(nextState).to.equal(<span class="hljs-built_in">Map</span>({\n<span class="codeblock-highlight">      pair: List.of(<span class="hljs-string">'Trainspotting'</span>, <span class="hljs-string">'28 Days Later'</span>),\n      tally: <span class="hljs-built_in">Map</span>({\n        <span class="hljs-string">'Trainspotting'</span>: <span class="hljs-number">4</span>,\n        <span class="hljs-string">'28 Days Later'</span>: <span class="hljs-number">2</span>\n      })</span>\n    }));\n  });\n\n});\n</pre>\n\n<p>As we see, this also simplifies the test code, which is usually a good sign!</p>\n\n<p>The <code>vote</code> implementation should now just take the vote part of the state, and update its tally:</p>\n\n<div class="codeblock-banner">src/core.js</div>\n\n<pre class="hljs"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">vote</span>(</span><span class="codeblock-highlight"><span class="hljs-function"><span class="hljs-params">voteState</span></span></span><span class="hljs-function"><span class="hljs-params">, entry</span>) </span>{\n  <span class="hljs-keyword">return</span> <span class="codeblock-highlight">voteState</span>.updateIn(\n    <span class="codeblock-highlight">[<span class="hljs-string">'tally'</span>, entry]</span>,\n    <span class="hljs-number">0</span>,\n    tally =&gt; tally + <span class="hljs-number">1</span>\n  );\n}\n</pre>\n\n<p>Now it becomes the job of our <em>reducer</em> to pick apart the state so that it gives only the relevant part to the <code>vote</code> function:</p>\n\n<div class="codeblock-banner">src/reducer.js</div>\n\n<pre class="hljs"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reducer</span>(<span class="hljs-params">state = INITIAL_STATE, action</span>) </span>{\n  <span class="hljs-keyword">switch</span> (action.type) {\n  <span class="hljs-keyword">case</span> <span class="hljs-string">'SET_ENTRIES'</span>:\n    <span class="hljs-keyword">return</span> setEntries(state, action.entries);\n  <span class="hljs-keyword">case</span> <span class="hljs-string">'NEXT'</span>:\n    <span class="hljs-keyword">return</span> next(state);\n  <span class="hljs-keyword">case</span> <span class="hljs-string">'VOTE'</span>:\n    <span class="codeblock-highlight"><span class="hljs-keyword">return</span> state.update(<span class="hljs-string">'vote'</span>,\n                        voteState =&gt; vote(voteState, action.entry));</span>\n  }\n  <span class="hljs-keyword">return</span> state;\n}\n</pre>\n\n<p>This is a small example of the kind of pattern that becomes much more important the larger an application gets: The main reducer function only hands parts of the state to lower-level reducer functions. We separate the job of finding the right location in the state tree from applying the update to that location.</p>\n\n<p>The <a href="http://rackt.github.io/redux/docs/basics/Reducers.html">Redux documentation for reducers</a> goes into these patterns of <em>reducer composition</em> in a lot more detail, and also describes some helper functions that makes reducer composition easier in many cases.</p>\n\n<h4 id="introducing-the-redux-store">Introducing The Redux Store</h4>\n\n<p>Now that we have a reducer, we can start looking at how this all plugs into Redux itself.</p>\n\n<p>As we just saw, if you had a collection of all the actions that are ever going to occur in your application, you could just call <code>reduce</code>. Out pops the final state of your app. Of course, you usually <em>don't</em> have a collection of all those actions. They will arrive spread out over time, as things happen in the world: When users interact with the app, when data is received from networks, or when timeouts trigger.</p>\n\n<p>To deal with this reality, we can use a <em>Redux Store</em>. It is an object that, as the name implies, <em>stores</em> the state of your application over time.</p>\n\n<p>A Redux Store is initialized with a <em>reducer function</em>, such as the one we have just implemented:</p>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> {createStore} <span class="hljs-keyword">from</span> <span class="hljs-string">'redux'</span>;\n\n<span class="hljs-keyword">const</span> store = createStore(reducer);\n</pre>\n\n<p>What you can then do is <em>dispatch</em> actions to that Store. The Store will internally use your reducer to apply the actions to the current state, and store the resulting, <em>next</em> state:</p>\n\n<pre class="hljs">store.dispatch({type: <span class="hljs-string">'NEXT'</span>});\n</pre>\n\n<p>At any point in time, you can obtain the current state from inside the Store:</p>\n\n<pre class="hljs">store.getState();\n</pre>\n\n<p>We're going to set up and export a Redux Store in a file called <code>store.js</code>. Let's test it first. We should be able to make a store, read its initial state, dispatch action, and witness the changed state:</p>\n\n<div class="codeblock-banner">test/store_spec.js</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> {Map, fromJS} <span class="hljs-keyword">from</span> <span class="hljs-string">'immutable'</span>;\n<span class="hljs-keyword">import</span> {expect} <span class="hljs-keyword">from</span> <span class="hljs-string">'chai'</span>;\n\n<span class="hljs-keyword">import</span> makeStore <span class="hljs-keyword">from</span> <span class="hljs-string">'../src/store'</span>;\n\ndescribe(<span class="hljs-string">'store'</span>, () =&gt; {\n\n  it(<span class="hljs-string">'is a Redux store configured with the correct reducer'</span>, () =&gt; {\n    <span class="hljs-keyword">const</span> store = makeStore();\n    expect(store.getState()).to.equal(<span class="hljs-built_in">Map</span>());\n\n    store.dispatch({\n      type: <span class="hljs-string">'SET_ENTRIES'</span>,\n      entries: [<span class="hljs-string">'Trainspotting'</span>, <span class="hljs-string">'28 Days Later'</span>]\n    });\n    expect(store.getState()).to.equal(fromJS({\n      entries: [<span class="hljs-string">'Trainspotting'</span>, <span class="hljs-string">'28 Days Later'</span>]\n    }));\n  });\n\n});\n</pre>\n\n<p>Before we can create the Store, we need to add Redux into the project:</p>\n\n<pre class="hljs">npm install --save redux\n</pre>\n\n<p>Then we can create <code>store.js</code>, where we simply call <code>createStore</code> with our reducer:</p>\n\n<div class="codeblock-banner">src/store.js</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> {createStore} <span class="hljs-keyword">from</span> <span class="hljs-string">'redux'</span>;\n<span class="hljs-keyword">import</span> reducer <span class="hljs-keyword">from</span> <span class="hljs-string">'./reducer'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">makeStore</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">return</span> createStore(reducer);\n}\n</pre>\n\n<p>So, the Redux store ties things together into something we'll be able to use as the central point of our application: It holds the current state, and over time can receive actions that evolve the state from one version to the next, using the core application logic we have written and exposed through the reducer.</p>\n\n<div class="aside">\n<p>\n  <em>Question:</em> How many variables do you need in a Redux application?<br>\n  <em>Answer:</em> One. The one inside the store.\n</p>\n<p>\n  This notion may sound ludicrous at first - at least if you haven't done much functional programming. How can you do anything useful with just one variable?\n</p>\n<p>\n  But the fact is we <em>don't</em> need any more variables than that. The current state tree is the only thing that varies over time in our core application. The rest is all constants and immutable values.\n</p>\n</div>\n\n<p>It is quite remarkable just how small the integration surface area between our application code and Redux actually is. Because we have a generic reducer function, that's the only thing we need to let Redux know about. The rest is all in our own, non-framework-specific, highly portable and purely functional code!</p>\n\n<p>If we now create the <code>index.js</code> entry point for the application, we can have it create and export a store:</p>\n\n<div class="codeblock-banner">index.js</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> makeStore <span class="hljs-keyword">from</span> <span class="hljs-string">'./src/store'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> store = makeStore();\n</pre>\n\n<p>Since we also export the store, you could now fire up a Node REPL (with e.g. <code>babel-node</code>), require the <code>index.js</code> file and interact with the application using the store.</p>\n\n<h4 id="setting-up-a-socket-io-server">Setting Up a Socket.io Server</h4>\n\n<p>Our application is going to act as a server for a separate browser application that provides the UIs for voting and viewing results. For that purpose, we need a way for the clients to communicate with the server, and vice versa.</p>\n\n<p>This is an app that benefits from real-time communication, since it's fun for voters to see their own actions and those of others immediately when they occur. For that reason, we're going to use WebSockets to communicate. More specifically, we're going to use the <a href="http://socket.io/">Socket.io</a> library that provides a nice abstraction for WebSockets that works across browsers. It also has a number of <a href="http://www.jonahnisenson.com/how-does-socket-io-fallback-to-xhr-or-jsonp/">fallback mechanisms</a> for clients that don't support WebSockets.</p>\n\n<p>Let's add Socket.io to the project:</p>\n\n<pre class="hljs">npm install --save socket.io\n</pre>\n\n<p>Then, let's create a file called <code>server.js</code> which exports a function that creates a Socket.io server:</p>\n\n<div class="codeblock-banner">src/server.js</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> Server <span class="hljs-keyword">from</span> <span class="hljs-string">'socket.io'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">startServer</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">const</span> io = <span class="hljs-keyword">new</span> Server().attach(<span class="hljs-number">8090</span>);\n}\n</pre>\n\n<p>This creates a Socket.io server, as well as a regular HTTP server bound to port 8090. The choice of port is arbitrary, but it needs to match the port we'll later use to connect from clients.</p>\n\n<p>We can then have <code>index.js</code> call this function, so that a server is started when the app starts:</p>\n\n<div class="codeblock-banner">index.js</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> makeStore <span class="hljs-keyword">from</span> <span class="hljs-string">'./src/store'</span>;\n<span class="codeblock-highlight"><span class="hljs-keyword">import</span> startServer <span class="hljs-keyword">from</span> <span class="hljs-string">'./src/server'</span>;</span>\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> store = makeStore();\n<span class="codeblock-highlight">startServer();</span>\n</pre>\n\n<p>If we now add a <code>start</code> command to our <code>package.json</code>, we'll make startup a bit simpler:</p>\n\n<div class="codeblock-banner">package.json</div>\n\n<pre class="hljs"><span class="hljs-string">"scripts"</span>: {\n  <span class="codeblock-highlight"><span class="hljs-string">"start"</span>: <span class="hljs-string">"babel-node index.js"</span>,</span>\n  <span class="hljs-string">"test"</span>: <span class="hljs-string">"mocha --compilers js:babel-core/register  --require ./test/test_helper.js  --recursive"</span>,\n  <span class="hljs-string">"test:watch"</span>: <span class="hljs-string">"npm run test -- --watch"</span>\n},\n</pre>\n\n<p>Now we can simply start the server (and create the Redux store) by typing:</p>\n\n<pre class="hljs">npm run start\n</pre>\n\n<div class="aside">\n  <p>\n    The <code>babel-node</code> command comes from the <a href="https://babeljs.io/docs/usage/cli/">babel-cli</a> package that we installed earlier. It allows us to easily run Node code with Babel transpiling support enabled. It adds some performance overhead so it isn't generally recommended for production use, but it works well for the purposes of our tutorial.\n  </p>\n</div>\n\n<h4 id="broadcasting-state-from-a-redux-listener">Broadcasting State from A Redux Listener</h4>\n\n<p>We have a Socket.io server and we have a Redux state container but they aren't yet integrated in any way. The next thing we'll do is change that.</p>\n\n<p>Our server should be able to let clients know about the current state of the application (i.e. "what is being voted on?", "What is the current tally of votes?", "Is there a winner yet?"). It can do so by <a href="http://socket.io/docs/server-api/#server#emit">emitting a Socket.io event</a> to all connected clients whenever something changes.</p>\n\n<p>And how can we know when something has changed? Well, Redux provides something for exactly this purpose: You can <em>subscribe</em> to a Redux store. You do that by providing a function that the store will call after every action it applies, when the state has potentially changed. It is essentially a callback to state changes within the store.</p>\n\n<p>We'll do this in <code>startServer</code>, so let's give it the Redux store first:</p>\n\n<div class="codeblock-banner">index.js</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> makeStore <span class="hljs-keyword">from</span> <span class="hljs-string">'./src/store'</span>;\n<span class="hljs-keyword">import</span> {startServer} <span class="hljs-keyword">from</span> <span class="hljs-string">'./src/server'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> store = makeStore();\nstartServer(<span class="codeblock-highlight">store</span>);\n</pre>\n\n<p>What we'll do is subscribe a listener to the store that reads the current state, turns it into a plain JavaScript object, and emits it as a <code>state</code> event on the Socket.io server. The result will be that a JSON-serialized snapshot of the state is sent over all active Socket.io connections.</p>\n\n<div class="codeblock-banner">src/server.js</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> Server <span class="hljs-keyword">from</span> <span class="hljs-string">'socket.io'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">startServer</span>(</span><span class="codeblock-highlight"><span class="hljs-function"><span class="hljs-params">store</span></span></span><span class="hljs-function">) </span>{\n  <span class="hljs-keyword">const</span> io = <span class="hljs-keyword">new</span> Server().attach(<span class="hljs-number">8090</span>);\n\n<span class="codeblock-highlight">  store.subscribe(\n    () =&gt; io.emit(<span class="hljs-string">'state'</span>, store.getState().toJS())\n  );</span>\n}\n</pre>\n\n<div class="aside">\n<p>\nWe are now publishing the <em>whole</em> state to everyone whenever any changes occur. This may end up causing a lot of data transfer. One could think of various ways of optimizing this (e.g. just sending the relevant subset, sending diffs instead of snapshots...), but this implementation has the benefit of being easy to write, so we'll just use it for our example app.\n</p>\n</div>\n\n<p>In addition to sending a state snapshot whenever state changes, it will be useful for clients to <em>immediately</em> receive the current state when they connect to the application. That lets them sync their client-side state to the latest server state right away.</p>\n\n<p>We can listen to <code>'connection'</code> events on our Socket.io server. We get one each time a client connects. In the event listener we can emit the current state right away:</p>\n\n<div class="codeblock-banner">src/server.js</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> Server <span class="hljs-keyword">from</span> <span class="hljs-string">'socket.io'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">startServer</span>(<span class="hljs-params">store</span>) </span>{\n  <span class="hljs-keyword">const</span> io = <span class="hljs-keyword">new</span> Server().attach(<span class="hljs-number">8090</span>);\n\n  store.subscribe(\n    () =&gt; io.emit(<span class="hljs-string">'state'</span>, store.getState().toJS())\n  );\n\n<span class="codeblock-highlight">  io.on(<span class="hljs-string">'connection'</span>, (socket) =&gt; {\n    socket.emit(<span class="hljs-string">'state'</span>, store.getState().toJS());\n  });</span>\n\n}\n</pre>\n\n<h4 id="receiving-remote-redux-actions">Receiving Remote Redux Actions</h4>\n\n<p>In addition to emitting the application state out to clients, we should also be able to receive updates from them: Voters will be assigning votes, and the vote organizer will be moving the contest forward using the <code>NEXT</code> action.</p>\n\n<p>The solution we'll use for this is actually quite simple. What we can do is simply have our clients emit <code>'action'</code> events that we feed directly into our Redux store:</p>\n\n<div class="codeblock-banner">src/server.js</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> Server <span class="hljs-keyword">from</span> <span class="hljs-string">'socket.io'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">startServer</span>(<span class="hljs-params">store</span>) </span>{\n  <span class="hljs-keyword">const</span> io = <span class="hljs-keyword">new</span> Server().attach(<span class="hljs-number">8090</span>);\n\n  store.subscribe(\n    () =&gt; io.emit(<span class="hljs-string">'state'</span>, store.getState().toJS())\n  );\n\n  io.on(<span class="hljs-string">'connection'</span>, (socket) =&gt; {\n    socket.emit(<span class="hljs-string">'state'</span>, store.getState().toJS());\n    <span class="codeblock-highlight">socket.on(<span class="hljs-string">'action'</span>, store.dispatch.bind(store));</span>\n  });\n\n}\n</pre>\n\n<p>This is where we start to go beyond "regular Redux", since we are now essentially accepting remote actions into our store. However, the Redux architecture makes it remarkably easy to do: Since actions are just JavaScript objects, and JavaScript objects can easily be sent over the network, we immediately got a system with which any number of clients can participate in voting. That's no small feat!</p>\n\n<div class="aside">\n<p>\n  There are some obvious security considerations here. We're allowing any connected Socket.io client to dispatch any action into the Redux store.\n</p>\n<p>\n  In most real-world cases, there should be some kind of firewall here, probably not dissimilar to the one in <a href="http://vertx.io/docs/vertx-web/java/#_securing_the_bridge">the Vert.x Event Bus Bridge</a>. Apps that have an authentication mechanism should also plug it in here.\n</p>\n</div>\n\n<p>Our server now operates essentially like this:</p>\n\n<ol>\n<li>A client sends an action to the server.</li>\n<li>The server hands the action to the Redux Store.</li>\n<li>The Store calls the reducer and the reducer executes the logic related to the action.</li>\n<li>The Store updates its state based on the return value of the reducer.</li>\n<li>The Store executes the listener function subscribed by the server.</li>\n<li>The server emits a <code>'state'</code> event.</li>\n<li>All connected clients - including the one that initiated the original action - receive the new state.</li>\n</ol>\n\n<p>Before we're done with the server, let's have it load up a set of test entries for us to play with, so that we have something to look at once we have the whole system going. We can add an <code>entries.json</code> file that lists the contest entries. For example, the list of Danny Boyle's feature films to date - feel free to substitute your favorite subject matter though!</p>\n\n<div class="codeblock-banner">entries.json</div>\n\n<pre class="hljs">[\n  <span class="hljs-string">"Shallow Grave"</span>,\n  <span class="hljs-string">"Trainspotting"</span>,\n  <span class="hljs-string">"A Life Less Ordinary"</span>,\n  <span class="hljs-string">"The Beach"</span>,\n  <span class="hljs-string">"28 Days Later"</span>,\n  <span class="hljs-string">"Millions"</span>,\n  <span class="hljs-string">"Sunshine"</span>,\n  <span class="hljs-string">"Slumdog Millionaire"</span>,\n  <span class="hljs-string">"127 Hours"</span>,\n  <span class="hljs-string">"Trance"</span>,\n  <span class="hljs-string">"Steve Jobs"</span>\n]\n</pre>\n\n<p>We can just load this in into <code>index.js</code> and then kick off the vote by dispatching a <code>NEXT</code> action:</p>\n\n<div class="codeblock-banner">index.js</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> makeStore <span class="hljs-keyword">from</span> <span class="hljs-string">'./src/store'</span>;\n<span class="hljs-keyword">import</span> {startServer} <span class="hljs-keyword">from</span> <span class="hljs-string">'./src/server'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> store = makeStore();\nstartServer(store);\n\n<span class="codeblock-highlight">store.dispatch({\n  type: <span class="hljs-string">'SET_ENTRIES'</span>,\n  entries: <span class="hljs-built_in">require</span>(<span class="hljs-string">'./entries.json'</span>)\n});\nstore.dispatch({type: <span class="hljs-string">'NEXT'</span>});</span>\n</pre>\n\n<p>And with that, we're ready to switch our focus to the client application.</p>\n\n<h3 id="the-client-application">The Client Application</h3>\n\n<p>During the remainder of this tutorial we'll be writing a React application that connects to the server we now have and makes the voting system come alive to users.</p>\n\n<p>We're going to use Redux again on the client. This is arguably the most common use case for Redux: As the underlying engine of a React application. We've already seen how Redux itself works, and soon we'll learn exactly how it fits together with React and how using it influences the design of React apps.</p>\n\n<p>I recommend following the steps and writing the app from scratch, but if you prefer you can <a href="https://github.com/teropa/redux-voting-client">get the code from GitHub</a>.</p>\n\n<h4 id="client-project-setup">Client Project Setup</h4>\n\n<p>The very first thing we're going to do is start a fresh NPM project, just like we did with the server.</p>\n\n<pre class="hljs">mkdir voting-client\n<span class="hljs-built_in">cd</span> voting-client\nnpm init -y\n</pre>\n\n<p>We're going to need an HTML host page for the app. Let's put that in <code>dist/index.html</code>:</p>\n\n<div class="codeblock-banner">dist/index.html</div>\n\n<pre class="hljs"><span class="hljs-doctype">&lt;!DOCTYPE html&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-title">html</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-title">body</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"app"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span>\n</pre>\n\n<p>This document just contains a <code>&lt;div&gt;</code> with id <code>app</code>, into which we'll put our application. It expects there to be a JavaScript file called <code>bundle.js</code> in the same directory.</p>\n\n<p>Let's also create the first JavaScript file for this app. This will be the application's entry point file. For now we can just put a simple logging statement in it:</p>\n\n<div class="codeblock-banner">src/index.js</div>\n\n<pre class="hljs"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'I am alive!'</span>);\n</pre>\n\n<p>To ease our client development workflow, we're going to use <a href="http://webpack.github.io/">Webpack</a> along with its development server, so let's add both to the project:</p>\n\n<pre class="hljs">npm install --save-dev webpack webpack-dev-server\n</pre>\n\n<div class="aside">\n<p>\nIf you don't have them already, also install the same packages globally so that you'll be able to conveniently launch them from the command line: <code>npm install -g webpack webpack-dev-server</code>.\n</p>\n</div>\n\n<p>Next, let's add a Webpack configuration file at the root of the project, that matches the files and directories we've created:</p>\n\n<div class="codeblock-banner">webpack.config.js</div>\n\n<pre class="hljs"><span class="hljs-built_in">module</span>.exports = {\n  entry: [\n    <span class="hljs-string">'./src/index.js'</span>\n  ],\n  output: {\n    path: __dirname + <span class="hljs-string">'/dist'</span>,\n    publicPath: <span class="hljs-string">'/'</span>,\n    filename: <span class="hljs-string">'bundle.js'</span>\n  },\n  devServer: {\n    contentBase: <span class="hljs-string">'./dist'</span>\n  }\n};\n</pre>\n\n<p>This will find our <code>index.js</code> entrypoint, and build everything into the <code>dist/bundle.js</code> bundle. It'll also use the <code>dist</code> directory as the base of the development server.</p>\n\n<p>You should now be able to run Webpack to produce <code>bundle.js</code>:</p>\n\n<pre class="hljs">webpack\n</pre>\n\n<p>You should also be able to start the dev server, after which the test page (including the logging statement from <code>index.js</code>) should be accessible in localhost:8080.</p>\n\n<pre class="hljs">webpack-dev-server\n</pre>\n\n<p>Since we're going to use both ES6 and React's <a href="https://facebook.github.io/jsx/">JSX syntax</a> in the client code, we need some tooling for those. Babel knows how to process both, so let's plug it in. We need both Babel itself and its Webpack loader:</p>\n\n<pre class="hljs">npm install --save-dev babel-core babel-loader babel-preset-es2015 babel-preset-react\n</pre>\n\n<p>In <code>package.json</code> we need to enable Babel support for both ES6/ES2015 and React JSX, by activating the presets we have just installed:</p>\n\n<div class="codeblock-banner">package.json</div>\n\n<pre class="hljs"><span class="hljs-string">"babel"</span>: {\n  <span class="hljs-string">"presets"</span>: [<span class="hljs-string">"es2015"</span>, <span class="hljs-string">"react"</span>]\n}\n</pre>\n\n<p>In the Webpack config file we can now change things so that Webpack will find <code>.jsx</code> files along with <code>.js</code> files, and process both through Babel:</p>\n\n<div class="codeblock-banner">webpack.config.js</div>\n\n<pre class="hljs"><span class="hljs-built_in">module</span>.exports = {\n  entry: [\n    <span class="hljs-string">'./src/index.js'</span>\n  ],\n<span class="codeblock-highlight">  <span class="hljs-built_in">module</span>: {\n    loaders: [{\n      test: /\\.jsx?$/,\n      exclude: /node_modules/,\n      loader: <span class="hljs-string">'babel'</span>\n    }]\n  },\n  resolve: {\n    extensions: [<span class="hljs-string">''</span>, <span class="hljs-string">'.js'</span>, <span class="hljs-string">'.jsx'</span>]\n  },</span>\n  output: {\n    path: __dirname + <span class="hljs-string">'/dist'</span>,\n    publicPath: <span class="hljs-string">'/'</span>,\n    filename: <span class="hljs-string">'bundle.js'</span>\n  },\n  devServer: {\n    contentBase: <span class="hljs-string">'./dist'</span>\n  }\n};\n</pre>\n\n<div class="aside">\n<p>\n  In this tutorial we won't be spending any time on CSS. If you'd like the app to look nicer, you can of course add your own styles as you go along.\n</p>\n<p>\n  Alternatively, you can grab some styling from <a href="https://github.com/teropa/redux-voting-client/commit/css">this commit</a>. In addition to a CSS file, it adds Webpack support for including (and <a href="https://github.com/postcss/autoprefixer">autoprefixing</a>) it, as well as a slightly improved result visualization component.\n</p>\n</div>\n\n<h5 id="unit-testing-support">Unit Testing support</h5>\n\n<p>We'll be writing some unit tests for the client code too. We can use the same unit test libraries that we used on the server - Mocha and Chai - to test it:</p>\n\n<pre class="hljs">npm install --save-dev mocha chai\n</pre>\n\n<p>We're going to test our React components as well, and that's going to require a DOM. One alternative would be to run tests in an actual web browser with a library like <a href="http://karma-runner.github.io/0.13/index.html">Karma</a>. However, we don't actually need to do that because <a href="http://jaketrent.com/post/testing-react-with-jsdom/">we can get away with</a> using <a href="https://github.com/tmpvar/jsdom">jsdom</a>, a pure JavaScript DOM implementation that runs in Node:</p>\n\n<pre class="hljs">npm install --save-dev jsdom\n</pre>\n\n<div class="aside">\n<p>\n  The latest versions of jsdom require io.js or Node.js 4.0.0. If you are running an older Node version, you need to explicitly install an older version: <code>npm install --save-dev jsdom@3</code>\n</p>\n</div>\n\n<p>We also need a bit of setup code for jsdom before it's ready for React to use. We essentially need to create jsdom versions of the <code>document</code> and <code>window</code> objects that would normally be provided by the web browser. Then we need to put them on the <a href="https://nodejs.org/api/globals.html#globals_global">global object</a>, so that they will be discovered by React when it accesses <code>document</code> or <code>window</code>. We can set up a test helper file for this kind of setup code:</p>\n\n<div class="codeblock-banner">test/test_helper.js</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> jsdom <span class="hljs-keyword">from</span> <span class="hljs-string">'jsdom'</span>;\n\n<span class="hljs-keyword">const</span> doc = jsdom.jsdom(<span class="hljs-string">'&lt;!doctype html&gt;&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;'</span>);\n<span class="hljs-keyword">const</span> win = doc.defaultView;\n\nglobal.document = doc;\nglobal.window = win;\n</pre>\n\n<p>Additionally, we need to take all the properties that the jsdom <code>window</code> object contains, such as <code>navigator</code>, and hoist them on to the Node.js <code>global</code> object. This is done so that properties provided by <code>window</code> can be used without the <code>window.</code> prefix, which is what would happen in a browser environment. Some of the code inside React relies on this:</p>\n\n<div class="codeblock-banner">test/test_helper.js</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> jsdom <span class="hljs-keyword">from</span> <span class="hljs-string">'jsdom'</span>;\n\n<span class="hljs-keyword">const</span> doc = jsdom.jsdom(<span class="hljs-string">'&lt;!doctype html&gt;&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;'</span>);\n<span class="hljs-keyword">const</span> win = doc.defaultView;\n\nglobal.document = doc;\nglobal.window = win;\n\n<span class="codeblock-highlight"><span class="hljs-built_in">Object</span>.keys(<span class="hljs-built_in">window</span>).forEach((key) =&gt; {\n  <span class="hljs-keyword">if</span> (!(key <span class="hljs-keyword">in</span> global)) {\n    global[key]&nbsp;= <span class="hljs-built_in">window</span>[key];\n  }\n});</span>\n</pre>\n\n<p>We're also going to be using Immutable collections, so we need to repeat the same trick we applied on the server to add Chai expectation support for them. We should install both the immutable and the chai-immutable package:</p>\n\n<pre class="hljs">npm install --save immutable\nnpm install --save-dev chai-immutable\n</pre>\n\n<p>Then we should enable it in the test helper file:</p>\n\n<div class="codeblock-banner">test/test_helper.js</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> jsdom <span class="hljs-keyword">from</span> <span class="hljs-string">'jsdom'</span>;\n<span class="codeblock-highlight"><span class="hljs-keyword">import</span> chai <span class="hljs-keyword">from</span> <span class="hljs-string">'chai'</span>;\n<span class="hljs-keyword">import</span> chaiImmutable <span class="hljs-keyword">from</span> <span class="hljs-string">'chai-immutable'</span>;</span>\n\n<span class="hljs-keyword">const</span> doc = jsdom.jsdom(<span class="hljs-string">'&lt;!doctype html&gt;&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;'</span>);\n<span class="hljs-keyword">const</span> win = doc.defaultView;\n\nglobal.document = doc;\nglobal.window = win;\n\n<span class="hljs-built_in">Object</span>.keys(<span class="hljs-built_in">window</span>).forEach((key) =&gt; {\n  <span class="hljs-keyword">if</span> (!(key <span class="hljs-keyword">in</span> global)) {\n    global[key]&nbsp;= <span class="hljs-built_in">window</span>[key];\n  }\n});\n\n<span class="codeblock-highlight">chai.use(chaiImmutable);</span>\n</pre>\n\n<p>The final step before we can run tests is to come up with the command that will run them, and put it in our <code>package.json</code>. Here it is:</p>\n\n<div class="codeblock-banner">package.json</div>\n\n<pre class="hljs"><span class="hljs-string">"scripts"</span>: {\n  <span class="hljs-string">"test"</span>: <span class="hljs-string">"</span><span class="codeblock-highlight"><span class="hljs-string">mocha --compilers js:babel-core/register --require ./test/test_helper.js 'test/**/*.@(js|jsx)'</span></span><span class="hljs-string">"</span>\n},\n</pre>\n\n<p>This is almost the same command that we used in the server's <code>package.json</code>. There only difference is in the test file specification: On the server we just used <code>--recursive</code>, but  that option won't find <code>.jsx</code> files. We need to use a  <a href="https://github.com/isaacs/node-glob">glob</a> that will find all <code>.js</code> and <code>.jsx</code> test files.</p>\n\n<p>It will be useful to continuously run tests whenever code changes occur. We can add a <code>test:watch</code> command for this. It is identical to the one for the server:</p>\n\n<div class="codeblock-banner">package.json</div>\n\n<pre class="hljs"><span class="hljs-string">"scripts"</span>: {\n  <span class="hljs-string">"test"</span>: <span class="hljs-string">"mocha --compilers js:babel-core/register --require ./test/test_helper.js 'test/**/*.@(js|jsx)'"</span>,\n  <span class="codeblock-highlight"><span class="hljs-string">"test:watch"</span>: <span class="hljs-string">"npm run test -- --watch"</span></span>\n},\n</pre>\n\n<h4 id="react-and-react-hot-loader">React and react-hot-loader</h4>\n\n<p>With the Webpack and Babel infrastructure in place, let's talk about React!</p>\n\n<p>What's really cool about the way React applications get built with Redux and Immutable is that we can write everything as so-called Pure Components (also sometimes called "Dumb Components"). As a concept, this is similar to pure functions, in that there are a couple of rules to follow:</p>\n\n<ol>\n<li>A pure component receives all its data as props, like a function receives all its data as arguments. It should have no side effects, including reading data from anywhere else, initiating network requests, etc.</li>\n<li>A pure component generally has no internal state. What it renders is fully driven by its input props. Rendering the same pure component twice with the same props should result in the same UI. There's no hidden state inside the component that would cause the UI to differ between the two renders.</li>\n</ol>\n\n<p>This has a <a href="https://www.youtube.com/watch?v=1uRC3hmKQnM&amp;feature=youtu.be&amp;t=13m10s">similar simplifying effect as using pure functions does</a>: We can figure out what a component does by looking at what it receives as inputs and what it renders. There's nothing else we need to know about the component. We can also test it really easily - almost as easily as we were able to test our pure application logic.</p>\n\n<p>If components can't have state, where <em>will</em> the state be? In an immutable data structure inside a Redux store! We've already seen how that works. The big idea is to separate the state from the user interface code. The React components are just a stateless <em>projection</em> of the state at a given point in time.</p>\n\n<p>But, first things first, let's go ahead and add React to the project:</p>\n\n<pre class="hljs">npm install --save react react-dom\n</pre>\n\n<p>We should also set up <a href="https://github.com/gaearon/react-hot-loader">react-hot-loader</a>. It will make our development workflow much faster by reloading code for us without losing the current state of the app.</p>\n\n<pre class="hljs">npm install --save-dev react-hot-loader\n</pre>\n\n<div class="aside">\n<p>\nIt would be silly of us <em>not</em> to use react-hot-loader, since we'll have an architecture that makes using it really easy. In fact, the <a href="https://www.youtube.com/watch?v=xsSnOQynTHs">creation of both Redux and react-hot-loader are all part of the same story</a>!\n</p>\n</div>\n\n<p>We need to make several updates to <code>webpack.config.js</code> to enable the hot loader. Here's the updated version:</p>\n\n<div class="codeblock-banner">webpack.config.js</div>\n\n<pre class="hljs"><span class="codeblock-highlight"><span class="hljs-keyword">var</span> webpack = <span class="hljs-built_in">require</span>(<span class="hljs-string">'webpack'</span>);</span>\n\n<span class="hljs-built_in">module</span>.exports = {\n  entry: [\n    <span class="codeblock-highlight"><span class="hljs-string">'webpack-dev-server/client?http://localhost:8080'</span>,</span>\n    <span class="codeblock-highlight"><span class="hljs-string">'webpack/hot/only-dev-server'</span>,</span>\n    <span class="hljs-string">'./src/index.js'</span>\n  ],\n  <span class="hljs-built_in">module</span>: {\n    loaders: [{\n      test: /\\.jsx?$/,\n      exclude: /node_modules/,\n      loader: <span class="hljs-string">'</span><span class="codeblock-highlight"><span class="hljs-string">react-hot!</span></span><span class="hljs-string">babel'</span>\n    }]\n  },\n  resolve: {\n    extensions: [<span class="hljs-string">''</span>, <span class="hljs-string">'.js'</span>, <span class="hljs-string">'.jsx'</span>]\n  },\n  output: {\n    path: __dirname + <span class="hljs-string">'/dist'</span>,\n    publicPath: <span class="hljs-string">'/'</span>,\n    filename: <span class="hljs-string">'bundle.js'</span>\n  },\n  devServer: {\n    contentBase: <span class="hljs-string">'./dist'</span>,\n    <span class="codeblock-highlight">hot: <span class="hljs-literal">true</span></span>\n  },\n<span class="codeblock-highlight">  plugins: [\n    <span class="hljs-keyword">new</span> webpack.HotModuleReplacementPlugin()\n  ]</span>\n};\n</pre>\n\n<p>In the <code>entry</code> section we include two new things to our app's entry points: The client-side library of the Webpack dev server and the Webpack hot module loader. These provide the Webpack infrastructure for <a href="https://github.com/webpack/docs/wiki/hot-module-replacement-with-webpack">hot module replacement</a>. The hot module replacement support isn't loaded by default, so we also need to load its plugin in the <code>plugins</code> section and enable it in the <code>devServer</code> section.</p>\n\n<p>In the <code>loaders</code> section we configure the <code>react-hot</code> loader to be used with our .js and .jsx files, in addition to Babel.</p>\n\n<p>If you now start or restart the development server, you should see a message about Hot Module Replacement being enabled in the console. We're good to go ahead with writing our first component.</p>\n\n<h4 id="writing-the-ui-for-the-voting-screen">Writing The UI for The Voting Screen</h4>\n\n<p>The voting screen of the application will be quite simple: While voting is ongoing, it'll always display two buttons - one for each of the entries being voted on. When the vote is over, it'll display the winner.</p>\n\n<p><img src="http://teropa.info/images/voting_shots.png">\nWe've been mainly doing test-first development so far, but for the React components we'll switch our workflow around: We'll write the components first and the tests second. This is because Webpack and react-hot-loader provide an even tighter <a href="http://blog.iterate.no/2012/10/01/know-your-feedback-loop-why-and-how-to-optimize-it/">feedback loop</a> for development than unit tests do. Also, there's no better feedback when writing a UI than to actually see it in action!</p>\n\n<p>Let's just assume we're going to have a <code>Voting</code> component and render it in the application entry point. We can mount it into the <code>#app</code> div that we added to <code>index.html</code> earlier. We should also rename <code>index.js</code> to <code>index.jsx</code> since it'll now contain some JSX markup:</p>\n\n<div class="codeblock-banner">src/index.jsx</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;\n<span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom'</span>;\n<span class="hljs-keyword">import</span> Voting <span class="hljs-keyword">from</span> <span class="hljs-string">'./components/Voting'</span>;\n\n<span class="hljs-keyword">const</span> pair = [<span class="hljs-string">'Trainspotting'</span>, <span class="hljs-string">'28 Days Later'</span>];\n\nReactDOM.render(\n  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">Voting</span> <span class="hljs-attribute">pair</span>=<span class="hljs-value">{pair}</span> /&gt;</span>,\n  document.getElementById('app')\n);\n</span></pre>\n<pre class="ws-hack">  &nbsp;\n</pre>\n\n<p>The <code>Voting</code> component takes the current pair of entries as props. For now we can just hardcode that pair, and later we'll substitute it with real data. The component itself is pure and doesn't care where the data comes from.</p>\n\n<p>The entrypoint filename must also be changed in <code>webpack.config.js</code>:</p>\n\n<div class="codeblock-banner">webpack.config.js</div>\n\n<pre class="hljs">entry: [\n  <span class="hljs-string">'webpack-dev-server/client?http://localhost:8080'</span>,\n  <span class="hljs-string">'webpack/hot/only-dev-server'</span>,\n  <span class="hljs-string">'</span><span class="codeblock-highlight"><span class="hljs-string">./src/index.jsx</span></span><span class="hljs-string">'</span>\n],\n</pre>\n\n<p>If you start (or restart) webpack-dev-server now, you'll see it complain about the missing Voting component. Let's fix that by writing our first version of it:</p>\n\n<div class="codeblock-banner">src/components/Voting.jsx</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> React.createClass({\n  getPair: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.props.pair || [];\n  },\n  render: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">className</span>=<span class="hljs-value">"voting"</span>&gt;</span>\n      {this.getPair().map(entry =&gt;\n        <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">key</span>=<span class="hljs-value">{entry}</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span>{entry}<span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>\n      )</span>}\n    &lt;/div&gt;;\n  }\n});\n</pre>\n\n<p>This renders the pair of entries as buttons. You should be able to see them in your web browser. Try making some changes to the component code and see how they're <em>immediately</em> applied in the browser. No restarts, no page reloads. Talk about fast feedback!</p>\n\n<div class="aside">\n<p>\n  If you don't see what you expect, check the webpack-dev-server output as well as the console log in your browser's development tools for problems.\n</p>\n</div>\n\n<p>Now we can add our first unit test as well, for the functionality that we've got. It'll go in a file called <code>Voting_spec.jsx</code>:</p>\n\n<div class="codeblock-banner">test/components/Voting_spec.jsx</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> Voting <span class="hljs-keyword">from</span> <span class="hljs-string">'../../src/components/Voting'</span>;\n\ndescribe(<span class="hljs-string">'Voting'</span>, () =&gt; {\n\n});\n</pre>\n\n<p>To test that the component renders those buttons based on the <code>pair</code> prop, we should render it and see what the output was. To render a component in a unit test, we can use a helper function called <a href="https://facebook.github.io/react/docs/test-utils.html#renderintodocument">renderIntoDocument</a>, which will be in <code>react/addons</code>:</p>\n\n<div class="codeblock-banner">test/components/Voting_spec.jsx</div>\n\n<pre class="hljs"><span class="codeblock-highlight"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react/addons'</span>;</span>\n<span class="hljs-keyword">import</span> Voting <span class="hljs-keyword">from</span> <span class="hljs-string">'../../src/components/Voting'</span>;\n\n<span class="codeblock-highlight"><span class="hljs-keyword">const</span> {renderIntoDocument} = React.addons.TestUtils;</span>\n\ndescribe(<span class="hljs-string">'Voting'</span>, () =&gt; {\n\n  it(<span class="hljs-string">'renders a pair of buttons'</span>, () =&gt; {\n    <span class="hljs-keyword">const</span> component = renderIntoDocument(\n      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">Voting</span> <span class="hljs-attribute">pair</span>=<span class="hljs-value">{["Trainspotting",</span> "<span class="hljs-attribute">28</span> <span class="hljs-attribute">Days</span> <span class="hljs-attribute">Later</span>"]} /&gt;</span>\n    )</span>;\n  });\n\n});\n</pre>\n\n<p>Once the component is rendered, we can use another React helper function called <a href="https://facebook.github.io/react/docs/test-utils.html#scryrendereddomcomponentswithtag">scryRenderedDOMComponentsWithTag</a> to find the <code>button</code> elements we expect there to be. We expect two of them, and we expect their text contents to be the two entries, respectively:</p>\n\n<div class="codeblock-banner">test/components/Voting_spec.jsx</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react/addons'</span>;\n<span class="hljs-keyword">import</span> Voting <span class="hljs-keyword">from</span> <span class="hljs-string">'../../src/components/Voting'</span>;\n<span class="codeblock-highlight"><span class="hljs-keyword">import</span> {expect} <span class="hljs-keyword">from</span> <span class="hljs-string">'chai'</span>;</span>\n\n<span class="hljs-keyword">const</span> {renderIntoDocument<span class="codeblock-highlight">, scryRenderedDOMComponentsWithTag</span>}\n  = React.addons.TestUtils;\n\ndescribe(<span class="hljs-string">'Voting'</span>, () =&gt; {\n\n  it(<span class="hljs-string">'renders a pair of buttons'</span>, () =&gt; {\n    <span class="hljs-keyword">const</span> component = renderIntoDocument(\n      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">Voting</span> <span class="hljs-attribute">pair</span>=<span class="hljs-value">{["Trainspotting",</span> "<span class="hljs-attribute">28</span> <span class="hljs-attribute">Days</span> <span class="hljs-attribute">Later</span>"]} /&gt;</span>\n    )</span>;\n<span class="codeblock-highlight">    <span class="hljs-keyword">const</span> buttons = scryRenderedDOMComponentsWithTag(component, <span class="hljs-string">'button'</span>);\n\n    expect(buttons.length).to.equal(<span class="hljs-number">2</span>);\n    expect(buttons[<span class="hljs-number">0</span>].textContent).to.equal(<span class="hljs-string">'Trainspotting'</span>);\n    expect(buttons[<span class="hljs-number">1</span>].textContent).to.equal(<span class="hljs-string">'28 Days Later'</span>);</span>\n  });\n\n});\n</pre>\n\n<p>If you run the test now, you should see it pass:</p>\n\n<pre class="hljs">npm run <span class="hljs-built_in">test</span>\n</pre>\n\n<p>When one of those voting buttons is clicked, the component should invoke a callback function. Like the entry pair, the callback function should also be given to the component as a prop.</p>\n\n<p>Let's go ahead and add a unit test for this too. We can test this by simulating a click using the <a href="https://facebook.github.io/react/docs/test-utils.html#simulate">Simulate</a> object from React's test utilities:</p>\n\n<div class="codeblock-banner">test/components/Voting_spec.jsx</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react/addons'</span>;\n<span class="hljs-keyword">import</span> Voting <span class="hljs-keyword">from</span> <span class="hljs-string">'../../src/components/Voting'</span>;\n<span class="hljs-keyword">import</span> {expect} <span class="hljs-keyword">from</span> <span class="hljs-string">'chai'</span>;\n\n<span class="hljs-keyword">const</span> {renderIntoDocument, scryRenderedDOMComponentsWithTag<span class="codeblock-highlight">, Simulate</span>}\n  = React.addons.TestUtils;\n\ndescribe(<span class="hljs-string">'Voting'</span>, () =&gt; {\n\n  <span class="hljs-comment">// ...</span>\n\n  it(<span class="hljs-string">'invokes callback when a button is clicked'</span>, () =&gt; {\n    <span class="hljs-keyword">let</span> votedWith;\n    <span class="hljs-keyword">const</span> vote = (entry) =&gt; votedWith = entry;\n\n    <span class="hljs-keyword">const</span> component = renderIntoDocument(\n      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">Voting</span> <span class="hljs-attribute">pair</span>=<span class="hljs-value">{["Trainspotting",</span> "<span class="hljs-attribute">28</span> <span class="hljs-attribute">Days</span> <span class="hljs-attribute">Later</span>"]}\n              <span class="hljs-attribute">vote</span>=<span class="hljs-value">{vote}</span>/&gt;</span>\n    )</span>;\n    <span class="hljs-keyword">const</span> buttons = scryRenderedDOMComponentsWithTag(component, <span class="hljs-string">'button'</span>);\n    Simulate.click(buttons[<span class="hljs-number">0</span>]);\n\n    expect(votedWith).to.equal(<span class="hljs-string">'Trainspotting'</span>);\n  });\n\n});\n</pre>\n\n<p>Getting this test to pass is simple enough. We just need an <code>onClick</code> handler on the buttons that invokes <code>vote</code> with the correct entry:</p>\n\n<div class="codeblock-banner">src/components/Voting.jsx</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> React.createClass({\n  getPair: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.props.pair || [];\n  },\n  render: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">className</span>=<span class="hljs-value">"voting"</span>&gt;</span>\n      {this.getPair().map(entry =&gt;\n        <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">key</span>=<span class="hljs-value">{entry}</span>\n                </span></span><span class="codeblock-highlight"><span class="xml"><span class="hljs-tag"><span class="hljs-attribute">onClick</span>=<span class="hljs-value">{()</span> =&gt;</span> this.props.vote(entry)}</span></span><span class="xml">&gt;\n          <span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span>{entry}<span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>\n      )</span>}\n    &lt;/div&gt;;\n  }\n});\n</pre>\n\n<p>This is generally how we'll manage user input and actions with pure components: The components don't try to do much about those actions themselves. They merely invoke callback props.</p>\n\n<div class="aside">\n<p>\n  Here we switched back to test-first development by writing the test first and the functionality second. I find it's often easier to initially test user input code from tests than through the browser.\n</p>\n<p>\n  In general, we'll be switching between the test-first and test-last workflows during UI development, based on whichever feels more useful at each step.\n</p>\n</div>\n\n<p>Once the user has already voted for a pair, we probably shouldn't let them vote again. While we <em>could</em> handle this internally in the component state, we're really trying to keep our components pure, so we should try to externalize that logic. The component could just take a <code>hasVoted</code> prop, for which we'll just hardcode a value for now:</p>\n\n<div class="codeblock-banner">src/index.jsx</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;\n<span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom'</span>;\n<span class="hljs-keyword">import</span> Voting <span class="hljs-keyword">from</span> <span class="hljs-string">'./components/Voting'</span>;\n\n<span class="hljs-keyword">const</span> pair = [<span class="hljs-string">'Trainspotting'</span>, <span class="hljs-string">'28 Days Later'</span>];\n\nReactDOM.render(\n  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">Voting</span> <span class="hljs-attribute">pair</span>=<span class="hljs-value">{pair}</span> </span></span><span class="codeblock-highlight"><span class="xml"><span class="hljs-tag"><span class="hljs-attribute">hasVoted</span>=<span class="hljs-value">"Trainspotting"</span></span></span></span><span class="xml"><span class="hljs-tag"> /&gt;</span>,\n  document.getElementById('app')\n);\n</span></pre>\n<pre class="ws-hack">  &nbsp;\n</pre>\n\n<p>We can make this work quite easily:</p>\n\n<div class="codeblock-banner">src/components/Voting.jsx</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> React.createClass({\n  getPair: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.props.pair || [];\n  },\n<span class="codeblock-highlight">  isDisabled: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">return</span> !!<span class="hljs-keyword">this</span>.props.hasVoted;\n  },</span>\n  render: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">className</span>=<span class="hljs-value">"voting"</span>&gt;</span>\n      {this.getPair().map(entry =&gt;\n        <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">key</span>=<span class="hljs-value">{entry}</span>\n                </span></span><span class="codeblock-highlight"><span class="xml"><span class="hljs-tag"><span class="hljs-attribute">disabled</span>=<span class="hljs-value">{this.isDisabled()}</span></span></span></span><span class="xml"><span class="hljs-tag">\n                <span class="hljs-attribute">onClick</span>=<span class="hljs-value">{()</span> =&gt;</span> this.props.vote(entry)}&gt;\n          <span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span>{entry}<span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>\n      )</span>}\n    &lt;/div&gt;;\n  }\n});\n</pre>\n\n<p>Let's also add a little label to the button that the user has voted on, so that it is clear to them what has happened. The label should become visible for the button whose entry matches the <code>hasVoted</code> prop. We can make a new helper method <code>hasVotedFor</code> to decide whether to render the label or not:</p>\n\n<div class="codeblock-banner">src/components/Voting.jsx</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> React.createClass({\n  getPair: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.props.pair || [];\n  },\n  isDisabled: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">return</span> !!<span class="hljs-keyword">this</span>.props.hasVoted;\n  },\n<span class="codeblock-highlight">  hasVotedFor: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">entry</span>) </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.props.hasVoted === entry;\n  },</span>\n  render: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">className</span>=<span class="hljs-value">"voting"</span>&gt;</span>\n      {this.getPair().map(entry =&gt;\n        <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">key</span>=<span class="hljs-value">{entry}</span>\n                <span class="hljs-attribute">disabled</span>=<span class="hljs-value">{this.isDisabled()}</span>\n                <span class="hljs-attribute">onClick</span>=<span class="hljs-value">{()</span> =&gt;</span> this.props.vote(entry)}&gt;\n          <span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span>{entry}<span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>\n</span><span class="codeblock-highlight"><span class="xml">          {this.hasVotedFor(entry) ?\n            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">className</span>=<span class="hljs-value">"label"</span>&gt;</span>Voted<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span> :\n            null}</span></span><span class="xml">\n        <span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>\n      )</span>}\n    &lt;/div&gt;;\n  }\n});\n</pre>\n\n<p>The final requirement for the voting screen is that once there is a winner, it will show just that, instead of trying to render any voting buttons. There might another prop for the winner. Again, we can simply hardcode a value for it temporarily until we have real data to plug in:</p>\n\n<div class="codeblock-banner">src/index.jsx</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;\n<span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom'</span>;\n<span class="hljs-keyword">import</span> Voting <span class="hljs-keyword">from</span> <span class="hljs-string">'./components/Voting'</span>;\n\n<span class="hljs-keyword">const</span> pair = [<span class="hljs-string">'Trainspotting'</span>, <span class="hljs-string">'28 Days Later'</span>];\n\nReactDOM.render(\n  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">Voting</span> <span class="hljs-attribute">pair</span>=<span class="hljs-value">{pair}</span> <span class="hljs-attribute">winner</span>=<span class="hljs-value">"Trainspotting"</span> /&gt;</span>,\n  document.getElementById('app')\n);\n</span></pre>\n<pre class="ws-hack">  &nbsp;\n</pre>\n\n<p>We could handle this in the component by conditionally rendering a winner div or the buttons:</p>\n\n<div class="codeblock-banner">src/components/Voting.jsx</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> React.createClass({\n  getPair: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.props.pair || [];\n  },\n  isDisabled: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">return</span> !!<span class="hljs-keyword">this</span>.props.hasVoted;\n  },\n  hasVotedFor: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">entry</span>) </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.props.hasVoted === entry;\n  },\n  render: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">className</span>=<span class="hljs-value">"voting"</span>&gt;</span>\n      {</span><span class="codeblock-highlight"><span class="xml">this.props.winner ?\n        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">ref</span>=<span class="hljs-value">"winner"</span>&gt;</span>Winner is {this.props.winner}!<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span> :</span></span><span class="xml">\n        this.getPair().map(entry =&gt;\n          <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">key</span>=<span class="hljs-value">{entry}</span>\n                  <span class="hljs-attribute">disabled</span>=<span class="hljs-value">{this.isDisabled()}</span>\n                  <span class="hljs-attribute">onClick</span>=<span class="hljs-value">{()</span> =&gt;</span> this.props.vote(entry)}&gt;\n            <span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span>{entry}<span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>\n            {this.hasVotedFor(entry) ?\n              <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">className</span>=<span class="hljs-value">"label"</span>&gt;</span>Voted<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span> :\n              null}\n          <span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>\n        )</span>}\n    &lt;/div&gt;;\n  }\n});\n</pre>\n\n<p>This is the functionality that we need, but the rendering code is now slightly messy. It might be better if we extract some separate components from this, so that the Voting screen component renders either a Winner component or a Vote component. Starting with the Winner component, it can just render a div:</p>\n\n<div class="codeblock-banner">src/components/Winner.jsx</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> React.createClass({\n  render: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">className</span>=<span class="hljs-value">"winner"</span>&gt;</span>\n      Winner is {this.props.winner}!\n    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>;</span>\n  }\n});\n</pre>\n\n<p>The Vote component will be pretty much exactly like the Voting component was before - just concerned with the voting buttons:</p>\n\n<div class="codeblock-banner">src/components/Vote.jsx</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> React.createClass({\n  getPair: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.props.pair || [];\n  },\n  isDisabled: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">return</span> !!<span class="hljs-keyword">this</span>.props.hasVoted;\n  },\n  hasVotedFor: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">entry</span>) </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.props.hasVoted === entry;\n  },\n  render: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">className</span>=<span class="hljs-value">"voting"</span>&gt;</span>\n      {this.getPair().map(entry =&gt;\n        <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">key</span>=<span class="hljs-value">{entry}</span>\n                <span class="hljs-attribute">disabled</span>=<span class="hljs-value">{this.isDisabled()}</span>\n                <span class="hljs-attribute">onClick</span>=<span class="hljs-value">{()</span> =&gt;</span> this.props.vote(entry)}&gt;\n          <span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span>{entry}<span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>\n          {this.hasVotedFor(entry) ?\n            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">className</span>=<span class="hljs-value">"label"</span>&gt;</span>Voted<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span> :\n            null}\n        <span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>\n      )</span>}\n    &lt;/div&gt;;\n  }\n});\n</pre>\n\n<p>The Voting component itself now merely makes a decision about which of these two components to render:</p>\n\n<div class="codeblock-banner">src/components/Voting.jsx</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;\n<span class="hljs-keyword">import</span> Winner <span class="hljs-keyword">from</span> <span class="hljs-string">'./Winner'</span>;\n<span class="hljs-keyword">import</span> Vote <span class="hljs-keyword">from</span> <span class="hljs-string">'./Vote'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> React.createClass({\n  render: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span>&gt;</span>\n      {this.props.winner ?\n        <span class="hljs-tag">&lt;<span class="hljs-title">Winner</span> <span class="hljs-attribute">ref</span>=<span class="hljs-value">"winner"</span> <span class="hljs-attribute">winner</span>=<span class="hljs-value">{this.props.winner}</span> /&gt;</span> :\n        <span class="hljs-tag">&lt;<span class="hljs-title">Vote</span> {<span class="hljs-attribute">...this.props</span>} /&gt;</span>}\n    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>;</span>\n  }\n});\n</pre>\n\n<p>Notice that we added a <a href="https://facebook.github.io/react/docs/more-about-refs.html">ref</a> for the Winner component. It's something we'll use in unit tests to grab the corresponding DOM node.</p>\n\n<p>That's our pure Voting component! Notice how we haven't really implemented <em>any</em> logic yet: There are buttons but we haven't specified what they do, except invoke a callback. Our components are concerned with rendering the UI and only that. The application logic will come in later, when we connect the UI to a Redux store.</p>\n\n<p>Before we move on though, time to writes some more unit tests for the new features we've added. Firstly, the presence of the <code>hasVoted</code> props should cause the voting buttons to become disabled:</p>\n\n<div class="codeblock-banner">test/components/Voting_spec.jsx</div>\n\n<pre class="hljs">it(<span class="hljs-string">'disables buttons when user has voted'</span>, () =&gt; {\n  <span class="hljs-keyword">const</span> component = renderIntoDocument(\n    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">Voting</span> <span class="hljs-attribute">pair</span>=<span class="hljs-value">{["Trainspotting",</span> "<span class="hljs-attribute">28</span> <span class="hljs-attribute">Days</span> <span class="hljs-attribute">Later</span>"]}\n            <span class="hljs-attribute">hasVoted</span>=<span class="hljs-value">"Trainspotting"</span> /&gt;</span>\n  )</span>;\n  <span class="hljs-keyword">const</span> buttons = scryRenderedDOMComponentsWithTag(component, <span class="hljs-string">'button'</span>);\n\n  expect(buttons.length).to.equal(<span class="hljs-number">2</span>);\n  expect(buttons[<span class="hljs-number">0</span>].hasAttribute(<span class="hljs-string">'disabled'</span>)).to.equal(<span class="hljs-literal">true</span>);\n  expect(buttons[<span class="hljs-number">1</span>].hasAttribute(<span class="hljs-string">'disabled'</span>)).to.equal(<span class="hljs-literal">true</span>);\n});\n</pre>\n\n<p>A <code>'Voted'</code> label should be present on the button whose entry matches the value of <code>hasVoted</code>:</p>\n\n<div class="codeblock-banner">test/components/Voting_spec.jsx</div>\n\n<pre class="hljs">it(<span class="hljs-string">'adds label to the voted entry'</span>, () =&gt; {\n  <span class="hljs-keyword">const</span> component = renderIntoDocument(\n    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">Voting</span> <span class="hljs-attribute">pair</span>=<span class="hljs-value">{["Trainspotting",</span> "<span class="hljs-attribute">28</span> <span class="hljs-attribute">Days</span> <span class="hljs-attribute">Later</span>"]}\n            <span class="hljs-attribute">hasVoted</span>=<span class="hljs-value">"Trainspotting"</span> /&gt;</span>\n  )</span>;\n  <span class="hljs-keyword">const</span> buttons = scryRenderedDOMComponentsWithTag(component, <span class="hljs-string">'button'</span>);\n\n  expect(buttons[<span class="hljs-number">0</span>].textContent).to.contain(<span class="hljs-string">'Voted'</span>);\n});\n</pre>\n\n<p>When there's a winner, there should be no buttons, but instead an element with the winner ref:</p>\n\n<div class="codeblock-banner">test/components/Voting_spec.jsx</div>\n\n<pre class="hljs">it(<span class="hljs-string">'renders just the winner when there is one'</span>, () =&gt; {\n  <span class="hljs-keyword">const</span> component = renderIntoDocument(\n    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">Voting</span> <span class="hljs-attribute">winner</span>=<span class="hljs-value">"Trainspotting"</span> /&gt;</span>\n  )</span>;\n  <span class="hljs-keyword">const</span> buttons = scryRenderedDOMComponentsWithTag(component, <span class="hljs-string">'button'</span>);\n  expect(buttons.length).to.equal(<span class="hljs-number">0</span>);\n\n  <span class="hljs-keyword">const</span> winner = React.findDOMNode(component.refs.winner);\n  expect(winner).to.be.ok;\n  expect(winner.textContent).to.contain(<span class="hljs-string">'Trainspotting'</span>);\n});\n</pre>\n\n<div class="aside">\n<p>\n  We could also have written unit tests for each component separately, but I find it more appropriate in this case to treat the Voting screen as the "unit" to test. We test the component's external behavior, and the fact that it uses smaller components internally is an implementation detail.\n</p>\n</div>\n\n<h4 id="immutable-data-and-pure-rendering">Immutable Data And Pure Rendering</h4>\n\n<p>We have discussed the virtues of using immutable data, but there's one additional, very practical benefit that we get when using it together with React: If we only use immutable data in component props, and write the component as a pure component, we can have React use a more efficient strategy for detecting changes in the props.</p>\n\n<p>This is done by applying the <a href="https://facebook.github.io/react/docs/pure-render-mixin.html">PureRenderMixin</a> that is available as an <a href="https://www.npmjs.com/package/react-addons-pure-render-mixin">add-on package</a>. When this mixin is added to a component, it changes the way React checks for changes in the component's props (and state). Instead of a deep compare it does a shallow compare, which is much, much faster.</p>\n\n<p>The reason we can do this is that by definition, there can never be changes within immutable data structures. If the props of a component are all immutable values, and the props keep pointing to the same values between renders, there can be no reason to re-render the component, and it can be skipped completely!</p>\n\n<p>We can concretely see what this is about by writing some unit tests. Our component is supposed to be pure, so if we did give it a mutable array, and then caused a mutation inside the array, it should <em>not</em> be re-rendered:</p>\n\n<div class="codeblock-banner">test/components/Voting_spec.jsx</div>\n\n<pre class="hljs">it(<span class="hljs-string">'renders as a pure component'</span>, () =&gt; {\n  <span class="hljs-keyword">const</span> pair = [<span class="hljs-string">'Trainspotting'</span>, <span class="hljs-string">'28 Days Later'</span>];\n  <span class="hljs-keyword">const</span> component = renderIntoDocument(\n    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">Voting</span> <span class="hljs-attribute">pair</span>=<span class="hljs-value">{pair}</span> /&gt;</span>\n  )</span>;\n\n  <span class="hljs-keyword">let</span> firstButton = scryRenderedDOMComponentsWithTag(component, <span class="hljs-string">'button'</span>)[<span class="hljs-number">0</span>];\n  expect(firstButton.textContent).to.equal(<span class="hljs-string">'Trainspotting'</span>);\n\n  pair[<span class="hljs-number">0</span>] = <span class="hljs-string">'Sunshine'</span>;\n  component.setProps({pair: pair});\n  firstButton = scryRenderedDOMComponentsWithTag(component, <span class="hljs-string">'button'</span>)[<span class="hljs-number">0</span>];\n  expect(firstButton.textContent).to.equal(<span class="hljs-string">'Trainspotting'</span>);\n});\n</pre>\n\n<p>We should have to explicitly set a <em>new</em> immutable list in the props to have the change reflected in the UI:</p>\n\n<div class="codeblock-banner">test/components/Voting_spec.jsx</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react/addons'</span>;\n<span class="codeblock-highlight"><span class="hljs-keyword">import</span> {List} <span class="hljs-keyword">from</span> <span class="hljs-string">'immutable'</span>;</span>\n<span class="hljs-keyword">import</span> Voting <span class="hljs-keyword">from</span> <span class="hljs-string">'../../src/components/Voting'</span>;\n<span class="hljs-keyword">import</span> {expect} <span class="hljs-keyword">from</span> <span class="hljs-string">'chai'</span>;\n\n<span class="hljs-keyword">const</span> {renderIntoDocument, scryRenderedDOMComponentsWithTag, Simulate}\n  = React.addons.TestUtils;\n\ndescribe(<span class="hljs-string">'Voting'</span>, () =&gt; {\n\n  <span class="hljs-comment">// ...</span>\n\n  it(<span class="hljs-string">'does update DOM when prop changes'</span>, () =&gt; {\n    <span class="hljs-keyword">const</span> pair = List.of(<span class="hljs-string">'Trainspotting'</span>, <span class="hljs-string">'28 Days Later'</span>);\n    <span class="hljs-keyword">const</span> component = renderIntoDocument(\n      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">Voting</span> <span class="hljs-attribute">pair</span>=<span class="hljs-value">{pair}</span> /&gt;</span>\n    )</span>;\n\n    <span class="hljs-keyword">let</span> firstButton = scryRenderedDOMComponentsWithTag(component, <span class="hljs-string">'button'</span>)[<span class="hljs-number">0</span>];\n    expect(firstButton.textContent).to.equal(<span class="hljs-string">'Trainspotting'</span>);\n\n    <span class="hljs-keyword">const</span> newPair = pair.set(<span class="hljs-number">0</span>, <span class="hljs-string">'Sunshine'</span>);\n    component.setProps({pair: newPair});\n    firstButton = scryRenderedDOMComponentsWithTag(component, <span class="hljs-string">'button'</span>)[<span class="hljs-number">0</span>];\n    expect(firstButton.textContent).to.equal(<span class="hljs-string">'Sunshine'</span>);\n  });\n\n});\n</pre>\n\n<div class="aside">\n<p>\nI wouldn't usually bother writing tests like this one, and would just assume that PureRenderMixin is being used. In this case the tests just happen to help us understand what exactly is going on.\n</p>\n</div>\n\n<p>Running the tests at this point will show how the component is not currently behaving as we expect: It'll update the UI in <em>both</em> cases, which means it is doing deep checks within the props, which is what we wanted to avoid since we're going to be using immutable data.</p>\n\n<p>Everything falls into place when we enable the pure render mixin in our components. We need to install its package first:</p>\n\n<pre class="hljs">npm install --save react-addons-pure-render-mixin\n</pre>\n\n<p>If we now mix it into our components, tests start passing and we're done:</p>\n\n<div class="codeblock-banner">src/components/Voting.jsx</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;\n<span class="codeblock-highlight"><span class="hljs-keyword">import</span> PureRenderMixin <span class="hljs-keyword">from</span> <span class="hljs-string">'react-addons-pure-render-mixin'</span>;</span>\n<span class="hljs-keyword">import</span> Winner <span class="hljs-keyword">from</span> <span class="hljs-string">'./Winner'</span>;\n<span class="hljs-keyword">import</span> Vote <span class="hljs-keyword">from</span> <span class="hljs-string">'./Vote'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> React.createClass({\n  <span class="codeblock-highlight">mixins: [PureRenderMixin],</span>\n  <span class="hljs-comment">// ...</span>\n});\n</pre>\n\n<div class="codeblock-banner">src/components/Vote.jsx</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;\n<span class="codeblock-highlight"><span class="hljs-keyword">import</span> PureRenderMixin <span class="hljs-keyword">from</span> <span class="hljs-string">'react-addons-pure-render-mixin'</span>;</span>\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> React.createClass({\n  <span class="codeblock-highlight">mixins: [PureRenderMixin],</span>\n  <span class="hljs-comment">// ...</span>\n});\n</pre>\n\n<div class="codeblock-banner">src/components/Winner.jsx</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;\n<span class="codeblock-highlight"><span class="hljs-keyword">import</span> PureRenderMixin <span class="hljs-keyword">from</span> <span class="hljs-string">'react-addons-pure-render-mixin'</span>;</span>\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> React.createClass({\n  <span class="codeblock-highlight">mixins: [PureRenderMixin],</span>\n  <span class="hljs-comment">// ...</span>\n});\n</pre>\n\n<div class="aside">\n<p>\n  Strictly speaking, the tests would start to pass if we only enabled the pure render mixin for Voting and didn't bother with the two other components. That's because when React doesn't notice any changes in the Voting props, it skips re-rendering for the whole component subtree.\n</p>\n<p>\n  However, I find it more appropriate to consistently use the pure render mixin in all my components, both to make it explicit that the components are pure, and to make sure they will behave as I expect even after I rearrange them.\n</p>\n</div>\n\n<h4 id="writing-the-ui-for-the-results-screen-and-handling-routing">Writing The UI for The Results Screen And Handling Routing</h4>\n\n<p>With that Voting screen all done, let's move on to the other main screen of the app: The one where results will be shown.</p>\n\n<p>The data displayed here is the same pair of entries as in the voting screen, and the tally of votes for each. Additionally, there's a little button on the bottom with which the person managing the vote can move on to the next pair.</p>\n\n<p>What we have here are two separate screens, exactly one of which should be shown at any given time. To choose between the two, using URL paths might be a good idea: We could set the root path <code>#/</code> to show the voting screen, and a  <code>#/results</code> path to show the results screen.</p>\n\n<p>That kind of thing can easily be done with the <a href="http://rackt.github.io/react-router/">react-router</a> library, with which we can associate different components to different paths. Let's add it to the project:</p>\n\n<pre class="hljs">npm install --save react-router@<span class="hljs-number">1.0</span>.<span class="hljs-number">0</span>-rc3\n</pre>\n\n<p>We can now configure our route paths. The Router comes with a React component called <code>Route</code>, which can be used to declaratively define a routing table. For now, we'll have just one route:</p>\n\n<div class="codeblock-banner">src/index.jsx</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;\n<span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom'</span>;\n<span class="codeblock-highlight"><span class="hljs-keyword">import</span> {Route} <span class="hljs-keyword">from</span> <span class="hljs-string">'react-router'</span>;</span>\n<span class="codeblock-highlight"><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">'./components/App'</span>;</span>\n<span class="hljs-keyword">import</span> Voting <span class="hljs-keyword">from</span> <span class="hljs-string">'./components/Voting'</span>;\n\n<span class="hljs-keyword">const</span> pair = [<span class="hljs-string">'Trainspotting'</span>, <span class="hljs-string">'28 Days Later'</span>];\n\n<span class="codeblock-highlight"><span class="hljs-keyword">const</span> routes = <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">Route</span> <span class="hljs-attribute">component</span>=<span class="hljs-value">{App}</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-title">Route</span> <span class="hljs-attribute">path</span>=<span class="hljs-value">"/"</span> <span class="hljs-attribute">component</span>=<span class="hljs-value">{Voting}</span> /&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-title">Route</span>&gt;</span>;</span></span>\n\nReactDOM.render(\n  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">Voting</span> <span class="hljs-attribute">pair</span>=<span class="hljs-value">{pair}</span> /&gt;</span>,\n  document.getElementById('app')\n);\n</span></pre>\n<pre class="ws-hack">  &nbsp;\n</pre>\n\n<p>We have a single route that we have configured to point to the Voting component. The other thing we've done here is define a component for the <em>root</em> Route in the configuration, which will be shared for all the concrete routes within. It's pointing to an <code>App</code> component, which we'll soon create.</p>\n\n<p>The purpose of the root route component is to render all the markup that is common across all routes. Here's what our root component <code>App</code> should look like:</p>\n\n<div class="codeblock-banner">src/components/App.jsx</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;\n<span class="hljs-keyword">import</span> {List} <span class="hljs-keyword">from</span> <span class="hljs-string">'immutable'</span>;\n\n<span class="hljs-keyword">const</span> pair = List.of(<span class="hljs-string">'Trainspotting'</span>, <span class="hljs-string">'28 Days Later'</span>);\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> React.createClass({\n  render: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">return</span> React.cloneElement(<span class="hljs-keyword">this</span>.props.children, {pair: pair});\n  }\n});\n</pre>\n\n<pre class="ws-hack">  &nbsp;\n</pre>\n\n<p>This component does nothing except render its child components, expected to be given in as the <code>children</code> prop. This is something that the react-router package does for us. It plugs in the component(s) defined for whatever the current route happens to be. Since we currently just have the one route for <code>Voting</code>, at the moment this component always renders <code>Voting</code>.</p>\n\n<p>Notice that we've moved the placeholder <code>pair</code> data from <code>index.jsx</code> to <code>App.jsx</code>. We use React's <a href="https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement">cloneElement</a> API to create a clone of the original components with our custom <code>pair</code> prop attached. This is just a temporary measure, and we'll be able to remove the cloning call later.\n\n</p><div class="aside">\n<p>\nEarlier we discussed how it's generally a good idea to use the pure render mixin across all components. The App component is an exception to this rule. The reason is that it would cause route changes not to fire, because of an <a href="https://github.com/rackt/react-router/issues/470">implementation issue between the router and React itself</a>. This situation may well change in the near future.\n</p>\n\n<p></p></div><p></p>\n\n<p>We can now switch back to <code>index.js</code> where we can kickstart the Router itself, and have it initialize our application:</p>\n\n<div class="codeblock-banner">src/index.jsx</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;\n<span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom'</span>;\n<span class="hljs-keyword">import</span> <span class="codeblock-highlight">Router, </span>{Route} <span class="hljs-keyword">from</span> <span class="hljs-string">'react-router'</span>;\n<span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">'./components/App'</span>;\n<span class="hljs-keyword">import</span> Voting <span class="hljs-keyword">from</span> <span class="hljs-string">'./components/Voting'</span>;\n\n<span class="hljs-keyword">const</span> routes = <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">Route</span> <span class="hljs-attribute">component</span>=<span class="hljs-value">{App}</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-title">Route</span> <span class="hljs-attribute">path</span>=<span class="hljs-value">"/"</span> <span class="hljs-attribute">component</span>=<span class="hljs-value">{Voting}</span> /&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-title">Route</span>&gt;</span>;</span>\n\n<span class="codeblock-highlight">ReactDOM.render(\n  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">Router</span>&gt;</span>{routes}<span class="hljs-tag">&lt;/<span class="hljs-title">Router</span>&gt;</span>,\n  document.getElementById('app')\n);</span></span><span class="xml">\n</span></pre>\n\n<p>We now supply the <code>Router</code> component from the react-router package as the root component of our application. We plug our route table into it by passing it in as a child component.</p>\n\n<p>With this, we've restored the previous functionality of our app: It just renders the <code>Voting</code> component. But this time it is done with the React router baked in, which means we can now easily add more routes. Let's do that for our results screen, which will be served by a new component called <code>Results</code>:</p>\n\n<div class="codeblock-banner">src/index.jsx</div>\n<pre class="hljs"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;\n<span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom'</span>;\n<span class="hljs-keyword">import</span> Router, {Route} <span class="hljs-keyword">from</span> <span class="hljs-string">'react-router'</span>;\n<span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">'./components/App'</span>;\n<span class="hljs-keyword">import</span> Voting <span class="hljs-keyword">from</span> <span class="hljs-string">'./components/Voting'</span>;\n<span class="codeblock-highlight"><span class="hljs-keyword">import</span> Results <span class="hljs-keyword">from</span> <span class="hljs-string">'./components/Results'</span>;</span>\n\n<span class="hljs-keyword">const</span> routes = <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">Route</span> <span class="hljs-attribute">component</span>=<span class="hljs-value">{App}</span>&gt;</span>\n  </span><span class="codeblock-highlight"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">Route</span> <span class="hljs-attribute">path</span>=<span class="hljs-value">"/results"</span> <span class="hljs-attribute">component</span>=<span class="hljs-value">{Results}</span> /&gt;</span></span></span><span class="xml">\n  <span class="hljs-tag">&lt;<span class="hljs-title">Route</span> <span class="hljs-attribute">path</span>=<span class="hljs-value">"/"</span> <span class="hljs-attribute">component</span>=<span class="hljs-value">{Voting}</span> /&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-title">Route</span>&gt;</span>;</span>\n\nReactDOM.render(\n  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">Router</span>&gt;</span>{routes}<span class="hljs-tag">&lt;/<span class="hljs-title">Router</span>&gt;</span>,\n  document.getElementById('app')\n);\n\n</span></pre>\n<p>Here we use the <code>&lt;Route&gt;</code> component again to specify that for a path named <code>"/results"</code>, the <code>Results</code> component should be used. Everything else will still be handled by <code>Voting</code>.</p>\n\n<p>Let's make a simple implementation of <code>Results</code> so that we can see how the routing works:</p>\n\n<div class="codeblock-banner">src/components/Results.jsx</div>\n<pre class="hljs"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;\n<span class="hljs-keyword">import</span> PureRenderMixin <span class="hljs-keyword">from</span> <span class="hljs-string">'react-addons-pure-render-mixin'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> React.createClass({\n  mixins: [PureRenderMixin],\n  render: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span>&gt;</span>Hello from results!<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\n  }\n});\n</span></pre>\n<p>If you now point your browser to <a href="http://localhost:8080/#/results">http://localhost:8080/#/results</a>, you should see the little message from the Results component. The root path, on the other hand, should show the voting buttons. You can also use the back and forward buttons to switch between the routes, and the visible component is switched while the application remains alive. That's the router in action!</p>\n\n<div class="aside">\n<p>This is all we're going to do with the React Router in this application. The library is capable of a lot more though. Take a look at <a href="http://rackt.github.io/react-router/">its documentation</a> to find out about all the things you can do with it.</p>\n</div>\n\n<p>Now that we have a placeholder Results component, let's go right ahead and make it do something useful. It should display the same two entries currently being voted on that the Voting component does:</p>\n\n<div class="codeblock-banner">src/components/Results.jsx</div>\n<pre class="hljs"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;\n<span class="hljs-keyword">import</span> PureRenderMixin <span class="hljs-keyword">from</span> <span class="hljs-string">'react-addons-pure-render-mixin'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> React.createClass({\n  mixins: [PureRenderMixin],\n<span class="codeblock-highlight">  getPair: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.props.pair || [];\n  },</span>\n  render: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n<span class="codeblock-highlight">    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">className</span>=<span class="hljs-value">"results"</span>&gt;</span>\n      {this.getPair().map(entry =&gt;\n        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">key</span>=<span class="hljs-value">{entry}</span> <span class="hljs-attribute">className</span>=<span class="hljs-value">"entry"</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span>{entry}<span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\n      )</span>}\n    &lt;/div&gt;;</span>\n  }\n});\n</pre>\n\n<p>Since this is the results screen, it should also actually show the tally of votes. That's what people want to see when they're on this screen. Let's pass in a placeholder tally Map to the component from our root App component first:</p>\n\n<div class="codeblock-banner">src/components/App.jsx</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;\n<span class="hljs-keyword">import</span> {List<span class="codeblock-highlight">, Map</span>} <span class="hljs-keyword">from</span> <span class="hljs-string">'immutable'</span>;\n\n<span class="hljs-keyword">const</span> pair = List.of(<span class="hljs-string">'Trainspotting'</span>, <span class="hljs-string">'28 Days Later'</span>);\n<span class="codeblock-highlight"><span class="hljs-keyword">const</span> tally = <span class="hljs-built_in">Map</span>({<span class="hljs-string">'Trainspotting'</span>: <span class="hljs-number">5</span>, <span class="hljs-string">'28 Days Later'</span>: <span class="hljs-number">4</span>});</span>\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> React.createClass({\n  render: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">return</span> React.cloneElement(<span class="hljs-keyword">this</span>.props.children, {\n      pair: pair,\n      <span class="codeblock-highlight">tally: tally</span>\n    });\n  }\n});\n</pre>\n\n<p>Now we can tweak the Results component to show those numbers:</p>\n\n<div class="codeblock-banner">src/components/Results.jsx</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;\n<span class="hljs-keyword">import</span> PureRenderMixin <span class="hljs-keyword">from</span> <span class="hljs-string">'react-addons-pure-render-mixin'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> React.createClass({\n  mixins: [PureRenderMixin],\n  getPair: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.props.pair || [];\n  },\n<span class="codeblock-highlight">  getVotes: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">entry</span>) </span>{\n    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.props.tally &amp;&amp; <span class="hljs-keyword">this</span>.props.tally.has(entry)) {\n      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.props.tally.get(entry);\n    }\n    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;\n  },</span>\n  render: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">className</span>=<span class="hljs-value">"results"</span>&gt;</span>\n      {this.getPair().map(entry =&gt;\n        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">key</span>=<span class="hljs-value">{entry}</span> <span class="hljs-attribute">className</span>=<span class="hljs-value">"entry"</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span>{entry}<span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>\n</span><span class="codeblock-highlight"><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">className</span>=<span class="hljs-value">"voteCount"</span>&gt;</span>\n            {this.getVotes(entry)}\n          <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span></span></span><span class="xml">\n        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\n      )</span>}\n    &lt;/div&gt;;\n  }\n});\n</pre>\n\n<p>At this point, let's switch gears and add a unit test for the current behavior of the Results component to make sure we won't break it later.</p>\n\n<p>We expect the component to render a div for each entry, and display both the entry name and the number of votes within that div. For entries that have no votes, a vote count of zero should be shown:</p>\n\n<div class="codeblock-banner">test/components/Results_spec.jsx</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react/addons'</span>;\n<span class="hljs-keyword">import</span> {List, Map} <span class="hljs-keyword">from</span> <span class="hljs-string">'immutable'</span>;\n<span class="hljs-keyword">import</span> Results <span class="hljs-keyword">from</span> <span class="hljs-string">'../../src/components/Results'</span>;\n<span class="hljs-keyword">import</span> {expect} <span class="hljs-keyword">from</span> <span class="hljs-string">'chai'</span>;\n\n<span class="hljs-keyword">const</span> {renderIntoDocument, scryRenderedDOMComponentsWithClass}\n  = React.addons.TestUtils;\n\ndescribe(<span class="hljs-string">'Results'</span>, () =&gt; {\n\n  it(<span class="hljs-string">'renders entries with vote counts or zero'</span>, () =&gt; {\n    <span class="hljs-keyword">const</span> pair = List.of(<span class="hljs-string">'Trainspotting'</span>, <span class="hljs-string">'28 Days Later'</span>);\n    <span class="hljs-keyword">const</span> tally = <span class="hljs-built_in">Map</span>({<span class="hljs-string">'Trainspotting'</span>: <span class="hljs-number">5</span>});\n    <span class="hljs-keyword">const</span> component = renderIntoDocument(\n      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">Results</span> <span class="hljs-attribute">pair</span>=<span class="hljs-value">{pair}</span> <span class="hljs-attribute">tally</span>=<span class="hljs-value">{tally}</span> /&gt;</span>\n    )</span>;\n    <span class="hljs-keyword">const</span> entries = scryRenderedDOMComponentsWithClass(component, <span class="hljs-string">'entry'</span>);\n    <span class="hljs-keyword">const</span> [train, days] = entries.map(e =&gt; e.textContent);\n\n    expect(entries.length).to.equal(<span class="hljs-number">2</span>);\n    expect(train).to.contain(<span class="hljs-string">'Trainspotting'</span>);\n    expect(train).to.contain(<span class="hljs-string">'5'</span>);\n    expect(days).to.contain(<span class="hljs-string">'28 Days Later'</span>);\n    expect(days).to.contain(<span class="hljs-string">'0'</span>);\n  });\n\n});\n</pre>\n\n<p>Next, let's talk about the "Next" button, which is used to move the voting to the next entry.</p>\n\n<p>From the component's point of view, there should just be a callback function in the props. The component should invoke that callback when the "Next" button inside it is clicked. We can formulate a unit test for this, which is quite similar to the ones we made for the voting buttons:</p>\n\n<div class="codeblock-banner">test/components/Results_spec.jsx</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react/addons'</span>;\n<span class="hljs-keyword">import</span> {List, Map} <span class="hljs-keyword">from</span> <span class="hljs-string">'immutable'</span>;\n<span class="hljs-keyword">import</span> Results <span class="hljs-keyword">from</span> <span class="hljs-string">'../../src/components/Results'</span>;\n<span class="hljs-keyword">import</span> {expect} <span class="hljs-keyword">from</span> <span class="hljs-string">'chai'</span>;\n\n<span class="hljs-keyword">const</span> {renderIntoDocument, scryRenderedDOMComponentsWithClass<span class="codeblock-highlight">, Simulate</span>}\n  = React.addons.TestUtils;\n\ndescribe(<span class="hljs-string">'Results'</span>, () =&gt; {\n\n  <span class="hljs-comment">// ...</span>\n\n  it(<span class="hljs-string">'invokes the next callback when next button is clicked'</span>, () =&gt; {\n    <span class="hljs-keyword">let</span> nextInvoked = <span class="hljs-literal">false</span>;\n    <span class="hljs-keyword">const</span> next = () =&gt; nextInvoked = <span class="hljs-literal">true</span>;\n\n    <span class="hljs-keyword">const</span> pair = List.of(<span class="hljs-string">'Trainspotting'</span>, <span class="hljs-string">'28 Days Later'</span>);\n    <span class="hljs-keyword">const</span> component = renderIntoDocument(\n      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">Results</span> <span class="hljs-attribute">pair</span>=<span class="hljs-value">{pair}</span>\n               <span class="hljs-attribute">tally</span>=<span class="hljs-value">{Map()}</span>\n               <span class="hljs-attribute">next</span>=<span class="hljs-value">{next}</span>/&gt;</span>\n    )</span>;\n    Simulate.click(React.findDOMNode(component.refs.next));\n\n    expect(nextInvoked).to.equal(<span class="hljs-literal">true</span>);\n  });\n\n});\n</pre>\n\n<p>The implementation is also similar to the voting buttons. It is just slightly simpler, as there are no arguments to pass:</p>\n\n<div class="codeblock-banner">src/components/Results.jsx</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;\n<span class="hljs-keyword">import</span> PureRenderMixin <span class="hljs-keyword">from</span> <span class="hljs-string">'react-addons-pure-render-mixin'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> React.createClass({\n  mixins: [PureRenderMixin],\n  getPair: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.props.pair || [];\n  },\n  getVotes: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">entry</span>) </span>{\n    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.props.tally &amp;&amp; <span class="hljs-keyword">this</span>.props.tally.has(entry)) {\n      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.props.tally.get(entry);\n    }\n    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;\n  },\n  render: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">className</span>=<span class="hljs-value">"results"</span>&gt;</span>\n      </span><span class="codeblock-highlight"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">className</span>=<span class="hljs-value">"tally"</span>&gt;</span></span></span><span class="xml">\n        {this.getPair().map(entry =&gt;\n          <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">key</span>=<span class="hljs-value">{entry}</span> <span class="hljs-attribute">className</span>=<span class="hljs-value">"entry"</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span>{entry}<span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"voteCount"</span>&gt;</span>\n              {this.getVotes(entry)}\n            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\n        )</span>}\n      <span class="codeblock-highlight">&lt;/div&gt;</span>\n<span class="codeblock-highlight">      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">className</span>=<span class="hljs-value">"management"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">ref</span>=<span class="hljs-value">"next"</span>\n                <span class="hljs-attribute">className</span>=<span class="hljs-value">"next"</span>\n                <span class="hljs-attribute">onClick</span>=<span class="hljs-value">{this.props.next}</span>&gt;</span>\n          Next\n        <span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span></span></span><span class="xml">\n    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>;</span>\n  }\n});\n</pre>\n\n<p>Finally, just like the Voting screen, the Results screen should display the winner once we have one:</p>\n\n<div class="codeblock-banner">test/components/Results_spec.jsx</div>\n\n<pre class="hljs">it(<span class="hljs-string">'renders the winner when there is one'</span>, () =&gt; {\n  <span class="hljs-keyword">const</span> component = renderIntoDocument(\n    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">Results</span> <span class="hljs-attribute">winner</span>=<span class="hljs-value">"Trainspotting"</span>\n             <span class="hljs-attribute">pair</span>=<span class="hljs-value">{["Trainspotting",</span> "<span class="hljs-attribute">28</span> <span class="hljs-attribute">Days</span> <span class="hljs-attribute">Later</span>"]}\n             <span class="hljs-attribute">tally</span>=<span class="hljs-value">{Map()}</span> /&gt;</span>\n  )</span>;\n  <span class="hljs-keyword">const</span> winner = React.findDOMNode(component.refs.winner);\n  expect(winner).to.be.ok;\n  expect(winner.textContent).to.contain(<span class="hljs-string">'Trainspotting'</span>);\n});\n</pre>\n\n<p>We can implement this by simply reusing the Winner component we already developed for the Voting screen. If there's a winner, we render it instead of the regular Results screen:</p>\n\n<div class="codeblock-banner">src/components/Results.jsx</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;\n<span class="hljs-keyword">import</span> PureRenderMixin <span class="hljs-keyword">from</span> <span class="hljs-string">'react-addons-pure-render-mixin'</span>;\n<span class="codeblock-highlight"><span class="hljs-keyword">import</span> Winner <span class="hljs-keyword">from</span> <span class="hljs-string">'./Winner'</span>;</span>\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> React.createClass({\n  mixins: [PureRenderMixin],\n  getPair: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.props.pair || [];\n  },\n  getVotes: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">entry</span>) </span>{\n    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.props.tally &amp;&amp; <span class="hljs-keyword">this</span>.props.tally.has(entry)) {\n      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.props.tally.get(entry);\n    }\n    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;\n  },\n  render: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n<span class="codeblock-highlight">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.props.winner ?\n      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">Winner</span> <span class="hljs-attribute">ref</span>=<span class="hljs-value">"winner"</span> <span class="hljs-attribute">winner</span>=<span class="hljs-value">{this.props.winner}</span> /&gt;</span> :</span></span><span class="xml">\n      <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">className</span>=<span class="hljs-value">"results"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">className</span>=<span class="hljs-value">"tally"</span>&gt;</span>\n          {this.getPair().map(entry =&gt;\n            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">key</span>=<span class="hljs-value">{entry}</span> <span class="hljs-attribute">className</span>=<span class="hljs-value">"entry"</span>&gt;</span>\n              <span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span>{entry}<span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>\n              <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">className</span>=<span class="hljs-value">"voteCount"</span>&gt;</span>\n                {this.getVotes(entry)}\n              <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\n            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\n          )</span>}\n        &lt;/div&gt;\n        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">className</span>=<span class="hljs-value">"management"</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">ref</span>=<span class="hljs-value">"next"</span>\n                   <span class="hljs-attribute">className</span>=<span class="hljs-value">"next"</span>\n                   <span class="hljs-attribute">onClick</span>=<span class="hljs-value">{this.props.next}</span>&gt;</span>\n            Next\n          <span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>;</span>\n  }\n});\n</pre>\n\n<div class="aside">\n<p>\nThis component would also benefit from being broken down into smaller ones. Perhaps a Tally component for displaying the pair of entries. Go ahead and do the refactoring if you feel like it!\n</p>\n</div>\n\n<p>And that's pretty much what our simple application will need in terms of UI!\nThe components we've written don't yet do anything because they're not connected to any real data or actions. It is remarkable, however, just how far we're able to get without needing any of that. We have been able to just inject some simple placeholder data to these components and concentrate on the structure of the UI.</p>\n\n<p>Now that we do have the UI though, let's talk about how to make it come alive by connecting its inputs and outputs to a Redux store.</p>\n\n<h4 id="introducing-a-client-side-redux-store">Introducing A Client-Side Redux Store</h4>\n\n<p>Redux is really designed to be used as the state container for UI applications, exactly like the one we are in the process of building. We've only used Redux on the server so far though, and discovered it's actually pretty useful there too! Now we're ready to look at how Redux works with a React application, which is arguably where it's most commonly used.</p>\n\n<p>Just like on the server, we'll begin by thinking about the state of the application. That state is going to be quite similar to the one on the server, which is not by accident.</p>\n\n<p>We have a UI with two screens. On both of them we display the pair of entries that's being voted on. It would make sense to have a state which included a vote entry with such a pair:</p>\n\n<p><img src="http://teropa.info/images/vote_client_pair.png"></p><p></p><p></p>\n\n<p>In addition to this, the results screen displays the current tally of votes. That should also be in the vote state:</p>\n\n<p><img src="http://teropa.info/images/vote_client_tally.png"></p><p></p><p></p>\n\n<p>The Voting component renders differently when the user has already voted in the current pair. This is something that the state also needs to track:</p>\n\n<p><img src="http://teropa.info/images/vote_client_hasvoted.png"></p><p></p><p></p>\n\n<p>When there is a winner, we need that and only that in the state:</p>\n\n<p><img src="http://teropa.info/images/vote_server_tree_winner.png"></p><p></p><p></p>\n\n<p>Notice that everything in here is a subset of the server state, except for the <code>hasVoted</code> entry.</p>\n\n<p>This brings us to the implementation of the core logic and the actions and reducers that our Redux Store will use. What should they be?</p>\n\n<p>We can think about this in terms of what can happen while the application is running that could cause the state to change. One source of state changes are the user's actions. We currently have two possible user interactions built into the UI:</p>\n\n<ul>\n<li>The user clicks one of the vote buttons on the voting screen.</li>\n<li>The user click on the Next button on the results screen.</li>\n</ul>\n\n<p>Additionally, we know that our server is set up to send us its current state. We will soon be writing the code for receiving it. That is a third source of state change.</p>\n\n<p>We can begin with the server state update, since that is going to be the most straightforward one to do. Earlier we set the server up to emit a <code>state</code> event, whose payload is almost exactly the shape of the client-side state trees that we have drawn. This is no coincidence since that's how we designed it. From the point of view of our client's reducer, it would make sense to have an action that receives the state snapshot from the server and just merges it into the client state. The action would look something like this:</p>\n\n<pre class="hljs">{\n  type: <span class="hljs-string">'SET_STATE'</span>,\n  state: {\n    vote: {...}\n  }\n}\n</pre>\n\n<p>Let's add some unit tests to see how this might work out. We're expecting to have a reducer that, given an action like the one above, merges its payload into the current state:</p>\n\n<div class="codeblock-banner">test/reducer_spec.js</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> {List, Map, fromJS} <span class="hljs-keyword">from</span> <span class="hljs-string">'immutable'</span>;\n<span class="hljs-keyword">import</span> {expect} <span class="hljs-keyword">from</span> <span class="hljs-string">'chai'</span>;\n\n<span class="hljs-keyword">import</span> reducer <span class="hljs-keyword">from</span> <span class="hljs-string">'../src/reducer'</span>;\n\ndescribe(<span class="hljs-string">'reducer'</span>, () =&gt; {\n\n  it(<span class="hljs-string">'handles SET_STATE'</span>, () =&gt; {\n    <span class="hljs-keyword">const</span> initialState = <span class="hljs-built_in">Map</span>();\n    <span class="hljs-keyword">const</span> action = {\n      type: <span class="hljs-string">'SET_STATE'</span>,\n      state: <span class="hljs-built_in">Map</span>({\n        vote: <span class="hljs-built_in">Map</span>({\n          pair: List.of(<span class="hljs-string">'Trainspotting'</span>, <span class="hljs-string">'28 Days Later'</span>),\n          tally: <span class="hljs-built_in">Map</span>({Trainspotting: <span class="hljs-number">1</span>})\n        })\n      })\n    };\n    <span class="hljs-keyword">const</span> nextState = reducer(initialState, action);\n\n    expect(nextState).to.equal(fromJS({\n      vote: {\n        pair: [<span class="hljs-string">'Trainspotting'</span>, <span class="hljs-string">'28 Days Later'</span>],\n        tally: {Trainspotting: <span class="hljs-number">1</span>}\n      }\n    }));\n  });\n\n});\n</pre>\n\n<p>The reducers should be able to receive plain JavaScript data structure, as opposed to an Immutable data structure, since that's what actually get from the socket. It should still be turned into an immutable data structure by the time it is returned as the next value:</p>\n\n<div class="codeblock-banner">test/reducer_spec.js</div>\n\n<pre class="hljs">it(<span class="hljs-string">'handles SET_STATE with plain JS payload'</span>, () =&gt; {\n  <span class="hljs-keyword">const</span> initialState = <span class="hljs-built_in">Map</span>();\n  <span class="hljs-keyword">const</span> action = {\n    type: <span class="hljs-string">'SET_STATE'</span>,\n    state: {\n      vote: {\n        pair: [<span class="hljs-string">'Trainspotting'</span>, <span class="hljs-string">'28 Days Later'</span>],\n        tally: {Trainspotting: <span class="hljs-number">1</span>}\n      }\n    }\n  };\n  <span class="hljs-keyword">const</span> nextState = reducer(initialState, action);\n\n  expect(nextState).to.equal(fromJS({\n    vote: {\n      pair: [<span class="hljs-string">'Trainspotting'</span>, <span class="hljs-string">'28 Days Later'</span>],\n      tally: {Trainspotting: <span class="hljs-number">1</span>}\n    }\n  }));\n});\n</pre>\n\n<p>As part of the reducer contract, an <code>undefined</code> initial state should also be correctly initialized into an Immutable data structure by the reducer:</p>\n\n<div class="codeblock-banner">test/reducer_spec.js</div>\n\n<pre class="hljs">it(<span class="hljs-string">'handles SET_STATE without initial state'</span>, () =&gt; {\n  <span class="hljs-keyword">const</span> action = {\n    type: <span class="hljs-string">'SET_STATE'</span>,\n    state: {\n      vote: {\n        pair: [<span class="hljs-string">'Trainspotting'</span>, <span class="hljs-string">'28 Days Later'</span>],\n        tally: {Trainspotting: <span class="hljs-number">1</span>}\n      }\n    }\n  };\n  <span class="hljs-keyword">const</span> nextState = reducer(<span class="hljs-literal">undefined</span>, action);\n\n  expect(nextState).to.equal(fromJS({\n    vote: {\n      pair: [<span class="hljs-string">'Trainspotting'</span>, <span class="hljs-string">'28 Days Later'</span>],\n      tally: {Trainspotting: <span class="hljs-number">1</span>}\n    }\n  }));\n});\n</pre>\n\n<p>That's our spec. Let's see how to fulfill it. We should have a reducer function exported by the reducer module:</p>\n\n<div class="codeblock-banner">src/reducer.js</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> {Map}&nbsp;<span class="hljs-keyword">from</span> <span class="hljs-string">'immutable'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">state = Map(</span>), <span class="hljs-title">action</span>) </span>{\n\n  <span class="hljs-keyword">return</span> state;\n}\n</pre>\n\n<p>The reducer should handle the <code>SET_STATE</code> action. In its handler function we can actually just merge the given new state to the old state, using the <a href="https://facebook.github.io/immutable-js/docs/#/Map/merge">merge</a> function from Map. That makes our tests pass!</p>\n\n<div class="codeblock-banner">src/reducer.js</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> {Map}&nbsp;<span class="hljs-keyword">from</span> <span class="hljs-string">'immutable'</span>;\n\n<span class="codeblock-highlight"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setState</span>(<span class="hljs-params">state, newState</span>) </span>{\n  <span class="hljs-keyword">return</span> state.merge(newState);\n}</span>\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">state = Map(</span>), <span class="hljs-title">action</span>) </span>{\n<span class="codeblock-highlight">  <span class="hljs-keyword">switch</span> (action.type) {\n  <span class="hljs-keyword">case</span> <span class="hljs-string">'SET_STATE'</span>:\n    <span class="hljs-keyword">return</span> setState(state, action.state);\n  }</span>\n  <span class="hljs-keyword">return</span> state;\n}\n</pre>\n\n<div class="aside">\n<p>\n  Notice that here we are not bothering with a "core" module separated from the reducer module. That's because the logic in our reducer is so simple that it doesn't really warrant one. We're just doing a merge, whereas on the server we have our whole voting system's logic in there. It might later be more appropriate to add some separation of concerns in the client as well, if the need arises.\n</p>\n</div>\n\n<p>The two remaining causes for state change are the user actions: Voting and clicking "Next". Since these are both actions that involve server interaction, we'll return to them a bit later, after we've got the architecture for server communication in place.</p>\n\n<p>Now that we have a reducer though, we can spin up a Redux Store from it. Time to add Redux to the project:</p>\n\n<pre class="hljs">npm install --save redux\n</pre>\n\n<p>The entry point <code>index.jsx</code> is a good place to set up the Store. Let's also  kick it off with some state by dispatching the <code>SET_STATE</code> action on it (this is only temporary until we get real data in):</p>\n\n<div class="codeblock-banner">src/index.jsx</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;\n<span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom'</span>;\n<span class="hljs-keyword">import</span> Router, {Route} <span class="hljs-keyword">from</span> <span class="hljs-string">'react-router'</span>;\n<span class="codeblock-highlight"><span class="hljs-keyword">import</span> {createStore} <span class="hljs-keyword">from</span> <span class="hljs-string">'redux'</span>;\n<span class="hljs-keyword">import</span> reducer <span class="hljs-keyword">from</span> <span class="hljs-string">'./reducer'</span>;</span>\n<span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">'./components/App'</span>;\n<span class="hljs-keyword">import</span> Voting <span class="hljs-keyword">from</span> <span class="hljs-string">'./components/Voting'</span>;\n<span class="hljs-keyword">import</span> Results <span class="hljs-keyword">from</span> <span class="hljs-string">'./components/Results'</span>;\n\n<span class="codeblock-highlight"><span class="hljs-keyword">const</span> store = createStore(reducer);\nstore.dispatch({\n  type: <span class="hljs-string">'SET_STATE'</span>,\n  state: {\n    vote: {\n      pair: [<span class="hljs-string">'Sunshine'</span>, <span class="hljs-string">'28 Days Later'</span>],\n      tally: {Sunshine: <span class="hljs-number">2</span>}\n    }\n  }\n});</span>\n\n<span class="hljs-keyword">const</span> routes = <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">Route</span> <span class="hljs-attribute">component</span>=<span class="hljs-value">{App}</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-title">Route</span> <span class="hljs-attribute">path</span>=<span class="hljs-value">"/results"</span> <span class="hljs-attribute">component</span>=<span class="hljs-value">{Results}</span> /&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-title">Route</span> <span class="hljs-attribute">path</span>=<span class="hljs-value">"/"</span> <span class="hljs-attribute">component</span>=<span class="hljs-value">{Voting}</span> /&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-title">Route</span>&gt;</span>;</span>\n\nReactDOM.render(\n  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">Router</span>&gt;</span>{routes}<span class="hljs-tag">&lt;/<span class="hljs-title">Router</span>&gt;</span>,\n  document.getElementById('app')\n);\n</span><span></span><span class="xml">\n</span></pre>\n<pre class="ws-hack">  &nbsp;\n</pre>\n\n<p>There's our Store. Now, how do we get the data from the Store into the React components?</p>\n\n<h4 id="getting-data-in-from-redux-to-react">Getting Data In from Redux to React</h4>\n\n<p>We have a Redux Store that holds our immutable application state. We have stateless React components that take immutable data as inputs. The two would be a great fit: If we can figure out a way to always get the latest data from the Store to the components, that would be perfect. React would re-render when the state changes, and the pure render mixin would make sure that the parts of the UI that have no need to re-render won't be.</p>\n\n<p>Rather than writing such synchronization code ourselves, we can make use of the Redux React bindings that are available in the <a href="https://github.com/rackt/react-redux">react-redux</a> package:</p>\n\n<pre class="hljs">npm install --save react-redux\n</pre>\n\n<p>The big idea of react-redux is to take our pure components and wire them up into a Redux Store by doing two things:</p>\n\n<ol>\n<li>Mapping the Store state into component input props.</li>\n<li>Mapping actions into component output callback props.</li>\n</ol>\n\n<p>Before any of this is possible, we need to wrap our top-level application component inside a react-redux <a href="https://github.com/rackt/react-redux#provider-store">Provider</a> component. This connects our component tree to a Redux store, enabling us to make the mappings for individual components later.</p>\n\n<p>We'll put in the Provider around the Router component. That'll cause the Provider to be an ancestor to all of our application components:</p>\n\n<div class="codeblock-banner">src/index.jsx</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;\n<span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom'</span>;\n<span class="hljs-keyword">import</span> Router, {Route} <span class="hljs-keyword">from</span> <span class="hljs-string">'react-router'</span>;\n<span class="hljs-keyword">import</span> {createStore} <span class="hljs-keyword">from</span> <span class="hljs-string">'redux'</span>;\n<span class="codeblock-highlight"><span class="hljs-keyword">import</span> {Provider} <span class="hljs-keyword">from</span> <span class="hljs-string">'react-redux'</span>;</span>\n<span class="hljs-keyword">import</span> reducer <span class="hljs-keyword">from</span> <span class="hljs-string">'./reducer'</span>;\n<span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">'./components/App'</span>;\n<span class="hljs-keyword">import</span> {VotingContainer} <span class="hljs-keyword">from</span> <span class="hljs-string">'./components/Voting'</span>;\n<span class="hljs-keyword">import</span> Results <span class="hljs-keyword">from</span> <span class="hljs-string">'./components/Results'</span>;\n\n<span class="hljs-keyword">const</span> store = createStore(reducer);\nstore.dispatch({\n  type: <span class="hljs-string">'SET_STATE'</span>,\n  state: {\n    vote: {\n      pair: [<span class="hljs-string">'Sunshine'</span>, <span class="hljs-string">'28 Days Later'</span>],\n      tally: {Sunshine: <span class="hljs-number">2</span>}\n    }\n  }\n});\n\n<span class="hljs-keyword">const</span> routes = <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">Route</span> <span class="hljs-attribute">component</span>=<span class="hljs-value">{App}</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-title">Route</span> <span class="hljs-attribute">path</span>=<span class="hljs-value">"/results"</span> <span class="hljs-attribute">component</span>=<span class="hljs-value">{Results}</span> /&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-title">Route</span> <span class="hljs-attribute">path</span>=<span class="hljs-value">"/"</span> <span class="hljs-attribute">component</span>=<span class="hljs-value">{VotingContainer}</span> /&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-title">Route</span>&gt;</span>;</span>\n\nReactDOM.render(\n<span class="codeblock-highlight">  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">Provider</span> <span class="hljs-attribute">store</span>=<span class="hljs-value">{store}</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-title">Router</span>&gt;</span>{routes}<span class="hljs-tag">&lt;/<span class="hljs-title">Router</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-title">Provider</span>&gt;</span>,</span></span><span class="xml">\n  document.getElementById('app')\n);\n\n});\n</span></pre>\n<pre class="ws-hack">  &nbsp;\n</pre>\n\n<p>Next, we should think about which of our components need to be "wired up" so that all the data will come from the Store. We have five component, which we can divide in three categories:</p>\n\n<ul>\n<li>The root component <code>App</code> doesn't really need anything since it doesn't use any data.</li>\n<li><code>Vote</code> and <code>Winner</code> are only used by parent components that give them all the props they need. They don't need wiring up either.</li>\n<li>What's left are the components we use in routes: <code>Voting</code> and <code>Results</code>. They are currently getting data in as hardcoded placeholder props from <code>App</code>. These are the components that need to be wired up to the Store.</li>\n</ul>\n\n<p>Let's begin with the <code>Voting</code> component. With react-redux we get a function called <a href="https://github.com/rackt/react-redux#connectmapstatetoprops-mapdispatchtoprops-mergeprops-options">connect</a> that can do the wiring-up of a component. It takes a mapping function as an argument and returns another function that takes a React component class:</p>\n\n<pre class="hljs">connect(mapStateToProps)(SomeComponent);\n</pre>\n\n<p>The role of the mapping function is to map the state from the Redux Store into an object of props. Those props will then be merged into the props of the component that's being connected. In the case of Voting, we just need to map the <code>pair</code> and <code>winner</code> from the state:</p>\n\n<div class="codeblock-banner">src/components/Voting.jsx</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;\n<span class="hljs-keyword">import</span> PureRenderMixin <span class="hljs-keyword">from</span> <span class="hljs-string">'react-addons-pure-render-mixin'</span>\n<span class="codeblock-highlight"><span class="hljs-keyword">import</span> {connect} <span class="hljs-keyword">from</span> <span class="hljs-string">'react-redux'</span>;</span>\n<span class="hljs-keyword">import</span> Winner <span class="hljs-keyword">from</span> <span class="hljs-string">'./Winner'</span>;\n<span class="hljs-keyword">import</span> Vote <span class="hljs-keyword">from</span> <span class="hljs-string">'./Vote'</span>;\n\n<span class="codeblock-highlight"><span class="hljs-keyword">const</span> Voting = </span>React.createClass({\n  mixins: [PureRenderMixin],\n  render: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span>&gt;</span>\n      {this.props.winner ?\n        <span class="hljs-tag">&lt;<span class="hljs-title">Winner</span> <span class="hljs-attribute">ref</span>=<span class="hljs-value">"winner"</span> <span class="hljs-attribute">winner</span>=<span class="hljs-value">{this.props.winner}</span> /&gt;</span> :\n        <span class="hljs-tag">&lt;<span class="hljs-title">Vote</span> {<span class="hljs-attribute">...this.props</span>} /&gt;</span>}\n    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>;</span>\n  }\n});\n\n<span class="codeblock-highlight"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mapStateToProps</span>(<span class="hljs-params">state</span>) </span>{\n  <span class="hljs-keyword">return</span> {\n    pair: state.getIn([<span class="hljs-string">'vote'</span>, <span class="hljs-string">'pair'</span>]),\n    winner: state.get(<span class="hljs-string">'winner'</span>)\n  };\n}\n\nconnect(mapStateToProps)(Voting);\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Voting;</span>\n</pre>\n\n<p>This isn't quite right though. True to functional style, the <code>connect</code> function doesn't actually go and mutate the <code>Voting</code> component. <code>Voting</code> remains a pure, unconnected component. Instead, <code>connect</code> <em>returns a connected version</em> of <code>Voting</code>. That means our current code isn't really doing anything. We need to grab that return value, which we'll call <code>VotingContainer</code>:</p>\n\n<div class="codeblock-banner">src/components/Voting.jsx</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;\n<span class="hljs-keyword">import</span> PureRenderMixin <span class="hljs-keyword">from</span> <span class="hljs-string">'react-addons-pure-render-mixin'</span>;\n<span class="hljs-keyword">import</span> {connect} <span class="hljs-keyword">from</span> <span class="hljs-string">'react-redux'</span>;\n<span class="hljs-keyword">import</span> Winner <span class="hljs-keyword">from</span> <span class="hljs-string">'./Winner'</span>;\n<span class="hljs-keyword">import</span> Vote <span class="hljs-keyword">from</span> <span class="hljs-string">'./Vote'</span>;\n\n<span class="codeblock-highlight"><span class="hljs-keyword">export</span> </span><span class="hljs-keyword">const</span> Voting = React.createClass({\n  mixins: [PureRenderMixin],\n  render: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span>&gt;</span>\n      {this.props.winner ?\n        <span class="hljs-tag">&lt;<span class="hljs-title">Winner</span> <span class="hljs-attribute">ref</span>=<span class="hljs-value">"winner"</span> <span class="hljs-attribute">winner</span>=<span class="hljs-value">{this.props.winner}</span> /&gt;</span> :\n        <span class="hljs-tag">&lt;<span class="hljs-title">Vote</span> {<span class="hljs-attribute">...this.props</span>} /&gt;</span>}\n    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>;</span>\n  }\n});\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mapStateToProps</span>(<span class="hljs-params">state</span>) </span>{\n  <span class="hljs-keyword">return</span> {\n    pair: state.getIn([<span class="hljs-string">'vote'</span>, <span class="hljs-string">'pair'</span>]),\n    winner: state.get(<span class="hljs-string">'winner'</span>)\n  };\n}\n\n<span class="codeblock-highlight"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> VotingContainer = connect(mapStateToProps)(Voting);</span>\n</pre>\n\n<p>The module now exports two components: The pure component <code>Voting</code> and the connected component <code>VotingContainer</code>. The react-redux documentation calls the former a "dumb" component and the latter a "smart" component. I prefer "pure" and "connected". Call them what you will, understanding the difference is key:</p>\n\n<ul>\n<li>The pure/dumb component is fully driven by the props it is given. It is the component equivalent of a pure function.</li>\n<li>The connected/smart component, on the other hand, wraps the pure version with some logic that will keep it in sync with the changing state of the Redux Store. That logic is provided by react-redux.</li>\n</ul>\n\n<p>We should update our routing table, so that it uses <code>VotingContainer</code> instead of <code>Voting</code>. Once we've done that, the voting screen will come alive with the data we've put in the Redux store:</p>\n\n<div class="codeblock-banner">src/index.jsx</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;\n<span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom'</span>;\n<span class="hljs-keyword">import</span> Router, {Route} <span class="hljs-keyword">from</span> <span class="hljs-string">'react-router'</span>;\n<span class="hljs-keyword">import</span> {createStore} <span class="hljs-keyword">from</span> <span class="hljs-string">'redux'</span>;\n<span class="hljs-keyword">import</span> {Provider} <span class="hljs-keyword">from</span> <span class="hljs-string">'react-redux'</span>;\n<span class="hljs-keyword">import</span> reducer <span class="hljs-keyword">from</span> <span class="hljs-string">'./reducer'</span>;\n<span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">'./components/App'</span>;\n<span class="codeblock-highlight"><span class="hljs-keyword">import</span> {VotingContainer} <span class="hljs-keyword">from</span> <span class="hljs-string">'./components/Voting'</span>;</span>\n<span class="hljs-keyword">import</span> Results <span class="hljs-keyword">from</span> <span class="hljs-string">'./components/Results'</span>;\n\n<span class="hljs-keyword">const</span> store = createStore(reducer);\nstore.dispatch({\n  type: <span class="hljs-string">'SET_STATE'</span>,\n  state: {\n    vote: {\n      pair: [<span class="hljs-string">'Sunshine'</span>, <span class="hljs-string">'28 Days Later'</span>],\n      tally: {Sunshine: <span class="hljs-number">2</span>}\n    }\n  }\n});\n\n<span class="hljs-keyword">const</span> routes = <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">Route</span> <span class="hljs-attribute">component</span>=<span class="hljs-value">{App}</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-title">Route</span> <span class="hljs-attribute">path</span>=<span class="hljs-value">"/results"</span> <span class="hljs-attribute">component</span>=<span class="hljs-value">{Results}</span> /&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-title">Route</span> <span class="hljs-attribute">path</span>=<span class="hljs-value">"/"</span> <span class="hljs-attribute">component</span>=<span class="hljs-value">{</span></span></span><span class="codeblock-highlight"><span class="xml"><span class="hljs-tag"><span class="hljs-value">VotingContainer</span></span></span></span><span class="xml"><span class="hljs-tag"><span class="hljs-value">}</span> /&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-title">Route</span>&gt;</span>;</span>\n\nReactDOM.render(\n  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">Provider</span> <span class="hljs-attribute">store</span>=<span class="hljs-value">{store}</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-title">Router</span>&gt;</span>{routes}<span class="hljs-tag">&lt;/<span class="hljs-title">Router</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-title">Provider</span>&gt;</span>,\n  document.getElementById('app')\n);\n\n</span></pre>\n<pre class="ws-hack">  &nbsp;\n</pre>\n\n<p>In the unit tests for <code>Voting</code> we need to change the way the import is done, as we no longer have Voting as the <em>default</em> export:</p>\n\n<div class="codeblock-banner">test/components/Voting_spec.jsx</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react/addons'</span>;\n<span class="hljs-keyword">import</span> {List} <span class="hljs-keyword">from</span> <span class="hljs-string">'immutable'</span>;\n<span class="hljs-keyword">import</span> <span class="codeblock-highlight">{Voting}</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'../../src/components/Voting'</span>;\n<span class="hljs-keyword">import</span> {expect} <span class="hljs-keyword">from</span> <span class="hljs-string">'chai'</span>;\n</pre>\n\n<p>No other changes are needed for tests. They are written for the <em>pure</em> Voting component, and it isn't changed in any way. We've just added a wrapper for it that connects it to a Redux store.</p>\n\n<p>Now we should just apply the same trick for the Results screen. It also needs the <code>pair</code> and <code>winner</code> attributes of the state. Additionally it needs <code>tally</code>, in order to show the vote counts:</p>\n\n<div class="codeblock-banner">src/components/Results.jsx</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;\n<span class="hljs-keyword">import</span> PureRenderMixin <span class="hljs-keyword">from</span> <span class="hljs-string">'react-addons-pure-render-mixin'</span>;\n<span class="codeblock-highlight"><span class="hljs-keyword">import</span> {connect} <span class="hljs-keyword">from</span> <span class="hljs-string">'react-redux'</span>;</span>\n<span class="hljs-keyword">import</span> Winner <span class="hljs-keyword">from</span> <span class="hljs-string">'./Winner'</span>;\n\n<span class="codeblock-highlight"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> Results = </span>React.createClass({\n  mixins: [PureRenderMixin],\n  getPair: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.props.pair || [];\n  },\n  getVotes: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">entry</span>) </span>{\n    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.props.tally &amp;&amp; <span class="hljs-keyword">this</span>.props.tally.has(entry)) {\n      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.props.tally.get(entry);\n    }\n    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;\n  },\n  render: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.props.winner ?\n      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">Winner</span> <span class="hljs-attribute">ref</span>=<span class="hljs-value">"winner"</span> <span class="hljs-attribute">winner</span>=<span class="hljs-value">{this.props.winner}</span> /&gt;</span> :\n      <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">className</span>=<span class="hljs-value">"results"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">className</span>=<span class="hljs-value">"tally"</span>&gt;</span>\n          {this.getPair().map(entry =&gt;\n            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">key</span>=<span class="hljs-value">{entry}</span> <span class="hljs-attribute">className</span>=<span class="hljs-value">"entry"</span>&gt;</span>\n              <span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span>{entry}<span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>\n              <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">className</span>=<span class="hljs-value">"voteCount"</span>&gt;</span>\n                {this.getVotes(entry)}\n              <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\n            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\n          )</span>}\n        &lt;/div&gt;\n        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">className</span>=<span class="hljs-value">"management"</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">ref</span>=<span class="hljs-value">"next"</span>\n                   <span class="hljs-attribute">className</span>=<span class="hljs-value">"next"</span>\n                   <span class="hljs-attribute">onClick</span>=<span class="hljs-value">{this.props.next}</span>&gt;</span>\n            Next\n          <span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>;</span>\n  }\n});\n\n<span class="codeblock-highlight"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mapStateToProps</span>(<span class="hljs-params">state</span>) </span>{\n  <span class="hljs-keyword">return</span> {\n    pair: state.getIn([<span class="hljs-string">'vote'</span>, <span class="hljs-string">'pair'</span>]),\n    tally: state.getIn([<span class="hljs-string">'vote'</span>, <span class="hljs-string">'tally'</span>]),\n    winner: state.get(<span class="hljs-string">'winner'</span>)\n  }\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> ResultsContainer = connect(mapStateToProps)(Results);</span>\n</pre>\n\n<p>In <code>index.jsx</code> we should change the results route to then use <code>ResultsContainer</code> instead of <code>Results</code>:</p>\n\n<div class="codeblock-banner">src/index.jsx</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;\n<span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom'</span>;\n<span class="hljs-keyword">import</span> Router, {Route} <span class="hljs-keyword">from</span> <span class="hljs-string">'react-router'</span>;\n<span class="hljs-keyword">import</span> {createStore} <span class="hljs-keyword">from</span> <span class="hljs-string">'redux'</span>;\n<span class="hljs-keyword">import</span> {Provider} <span class="hljs-keyword">from</span> <span class="hljs-string">'react-redux'</span>;\n<span class="hljs-keyword">import</span> reducer <span class="hljs-keyword">from</span> <span class="hljs-string">'./reducer'</span>;\n<span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">'./components/App'</span>;\n<span class="hljs-keyword">import</span> {VotingContainer} <span class="hljs-keyword">from</span> <span class="hljs-string">'./components/Voting'</span>;\n<span class="codeblock-highlight"><span class="hljs-keyword">import</span> {ResultsContainer} <span class="hljs-keyword">from</span> <span class="hljs-string">'./components/Results'</span>;</span>\n\n<span class="hljs-keyword">const</span> store = createStore(reducer);\nstore.dispatch({\n  type: <span class="hljs-string">'SET_STATE'</span>,\n  state: {\n    vote: {\n      pair: [<span class="hljs-string">'Sunshine'</span>, <span class="hljs-string">'28 Days Later'</span>],\n      tally: {Sunshine: <span class="hljs-number">2</span>}\n    }\n  }\n});\n\n<span class="hljs-keyword">const</span> routes = <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">Route</span> <span class="hljs-attribute">component</span>=<span class="hljs-value">{App}</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-title">Route</span> <span class="hljs-attribute">path</span>=<span class="hljs-value">"/results"</span> <span class="hljs-attribute">component</span>=<span class="hljs-value">{</span></span></span><span class="codeblock-highlight"><span class="xml"><span class="hljs-tag"><span class="hljs-value">ResultsContainer</span></span></span></span><span class="xml"><span class="hljs-tag"><span class="hljs-value">}</span> /&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-title">Route</span> <span class="hljs-attribute">path</span>=<span class="hljs-value">"/"</span> <span class="hljs-attribute">component</span>=<span class="hljs-value">{VotingContainer}</span> /&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-title">Route</span>&gt;</span>;</span>\n\nReactDOM.render(\n  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">Provider</span> <span class="hljs-attribute">store</span>=<span class="hljs-value">{store}</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-title">Router</span>&gt;</span>{routes}<span class="hljs-tag">&lt;/<span class="hljs-title">Router</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-title">Provider</span>&gt;</span>,\n  document.getElementById('app')\n);\n\n</span></pre>\n<pre class="ws-hack">  &nbsp;\n</pre>\n\n<p>Finally, in the Results test we should update the import statement to use the named export for <code>Results</code>:</p>\n\n<div class="codeblock-banner">test/components/Results_spec.jsx</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react/addons'</span>;\n<span class="hljs-keyword">import</span> {List, Map} <span class="hljs-keyword">from</span> <span class="hljs-string">'immutable'</span>;\n<span class="hljs-keyword">import</span> <span class="codeblock-highlight">{Results}</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'../../src/components/Results'</span>;\n<span class="hljs-keyword">import</span> {expect} <span class="hljs-keyword">from</span> <span class="hljs-string">'chai'</span>;\n</pre>\n\n<p>And that's how you can connect pure React components to a Redux store, so that they get their data in from the store.</p>\n\n<p>For very small apps that just have a single root component and no routing, connecting the root component will be enough in most cases. The root can then just propagate the data to its children as props. For apps with routing, such as the one we're making, connecting each of the router's components is usually a good idea. But any component can be separately connected, so different strategies can be used for different app architectures. I think it's a good idea to use plain props whenever you can, because with props it is easy to see what data is going in and it is also less work since you don't need to manage the "wiring" code.</p>\n\n<p>Now that we've got the Redux data in our UI, we no longer need the hardcoded props in <code>App.jsx</code>, so it becomes even simpler than before:</p>\n\n<div class="codeblock-banner">src/components/App.jsx</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> React.createClass({\n  render: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.props.children;\n  }\n});\n</pre>\n\n<pre class="ws-hack">  &nbsp;\n</pre>\n\n<h4 id="setting-up-the-socket-io-client">Setting Up The Socket.io Client</h4>\n\n<p>Now that we have a Redux app going in the client, we can talk about how we can connect it to the other Redux app we have running on the server. The two currently reside in their own universes, with no connection between them whatsoever.</p>\n\n<p>The server is already prepared to take incoming socket connections and emit the voting state to them. The client, on the other hand, has a Redux store into which we could easily dispatch incoming data. All we need to do is to draw the connection.</p>\n\n<p>This begins by getting the infrastructure in place. We need a way to make a Socket.io connection from the browser to the server. For that purpose we can use the <a href="http://socket.io/docs/client-api/">socket.io-client library</a>, which is the client-side equivalent to the socket.io library that we used on the server:</p>\n\n<pre class="hljs">npm install --save socket.io-client\n</pre>\n\n<p>Importing this library gives us an <code>io</code> function that can be used to connect to a Socket.io server. Let's connect to one that we assume to be on the same host as our client, in port 8090 (matching the port we used on the server):</p>\n\n<div class="codeblock-banner">src/index.jsx</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;\n<span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom'</span>;\n<span class="hljs-keyword">import</span> Router, {Route} <span class="hljs-keyword">from</span> <span class="hljs-string">'react-router'</span>;\n<span class="hljs-keyword">import</span> {createStore} <span class="hljs-keyword">from</span> <span class="hljs-string">'redux'</span>;\n<span class="hljs-keyword">import</span> {Provider} <span class="hljs-keyword">from</span> <span class="hljs-string">'react-redux'</span>;\n<span class="codeblock-highlight"><span class="hljs-keyword">import</span> io <span class="hljs-keyword">from</span> <span class="hljs-string">'socket.io-client'</span>;</span>\n<span class="hljs-keyword">import</span> reducer <span class="hljs-keyword">from</span> <span class="hljs-string">'./reducer'</span>;\n<span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">'./components/App'</span>;\n<span class="hljs-keyword">import</span> {VotingContainer} <span class="hljs-keyword">from</span> <span class="hljs-string">'./components/Voting'</span>;\n<span class="hljs-keyword">import</span> {ResultsContainer} <span class="hljs-keyword">from</span> <span class="hljs-string">'./components/Results'</span>;\n\n<span class="hljs-keyword">const</span> store = createStore(reducer);\nstore.dispatch({\n  type: <span class="hljs-string">'SET_STATE'</span>,\n  state: {\n    vote: {\n      pair: [<span class="hljs-string">'Sunshine'</span>, <span class="hljs-string">'28 Days Later'</span>],\n      tally: {Sunshine: <span class="hljs-number">2</span>}\n    }\n  }\n});\n\n<span class="codeblock-highlight"><span class="hljs-keyword">const</span> socket = io(<span class="hljs-string">`<span class="hljs-subst">${location.protocol}</span>//<span class="hljs-subst">${location.hostname}</span>:8090`</span>);</span>\n\n<span class="hljs-keyword">const</span> routes = <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">Route</span> <span class="hljs-attribute">component</span>=<span class="hljs-value">{App}</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-title">Route</span> <span class="hljs-attribute">path</span>=<span class="hljs-value">"/results"</span> <span class="hljs-attribute">component</span>=<span class="hljs-value">{ResultsContainer}</span> /&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-title">Route</span> <span class="hljs-attribute">path</span>=<span class="hljs-value">"/"</span> <span class="hljs-attribute">component</span>=<span class="hljs-value">{VotingContainer}</span> /&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-title">Route</span>&gt;</span>;</span>\n\nReactDOM.render(\n  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">Provider</span> <span class="hljs-attribute">store</span>=<span class="hljs-value">{store}</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-title">Router</span>&gt;</span>{routes}<span class="hljs-tag">&lt;/<span class="hljs-title">Router</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-title">Provider</span>&gt;</span>,\n  document.getElementById('app')\n);\n\n</span></pre>\n<pre class="ws-hack">  &nbsp;\n</pre>\n\n<p>If you now make sure you have the server running, open the client app in a browser and inspect the network traffic, you should see it make a WebSocket connection and start transmitting Socket.io heartbeats on it.</p>\n\n<div class="aside">\n<p>\nDuring development there will actually be two Socket.io connections on the page. One is ours and the other is supporting Webpack's hot reloading.\n</p>\n</div>\n\n<h4 id="receiving-actions-from-the-server">Receiving Actions From The Server</h4>\n\n<p>Given that we now have a Socket.io connection, there's actually not much we need to do to get data in from it. The server is sending us <code>state</code> events - once when we connect and then every time something changes. We just need to listen to those events. When we get one, we can simply dispatch a <code>SET_STATE</code> action to our Store. We already have a reducer that will handle it:</p>\n\n<div class="codeblock-banner">src/index.jsx</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;\n<span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom'</span>;\n<span class="hljs-keyword">import</span> Router, {Route} <span class="hljs-keyword">from</span> <span class="hljs-string">'react-router'</span>;\n<span class="hljs-keyword">import</span> {createStore} <span class="hljs-keyword">from</span> <span class="hljs-string">'redux'</span>;\n<span class="hljs-keyword">import</span> {Provider} <span class="hljs-keyword">from</span> <span class="hljs-string">'react-redux'</span>;\n<span class="hljs-keyword">import</span> io <span class="hljs-keyword">from</span> <span class="hljs-string">'socket.io-client'</span>;\n<span class="hljs-keyword">import</span> reducer <span class="hljs-keyword">from</span> <span class="hljs-string">'./reducer'</span>;\n<span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">'./components/App'</span>;\n<span class="hljs-keyword">import</span> {VotingContainer} <span class="hljs-keyword">from</span> <span class="hljs-string">'./components/Voting'</span>;\n<span class="hljs-keyword">import</span> {ResultsContainer} <span class="hljs-keyword">from</span> <span class="hljs-string">'./components/Results'</span>;\n\n<span class="hljs-keyword">const</span> store = createStore(reducer);\n\n<span class="hljs-keyword">const</span> socket = io(<span class="hljs-string">`<span class="hljs-subst">${location.protocol}</span>//<span class="hljs-subst">${location.hostname}</span>:8090`</span>);\n<span class="codeblock-highlight">socket.on(<span class="hljs-string">'state'</span>, state =&gt;\n  store.dispatch({type: <span class="hljs-string">'SET_STATE'</span>, state})\n);</span>\n\n<span class="hljs-keyword">const</span> routes = <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">Route</span> <span class="hljs-attribute">component</span>=<span class="hljs-value">{App}</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-title">Route</span> <span class="hljs-attribute">path</span>=<span class="hljs-value">"/results"</span> <span class="hljs-attribute">component</span>=<span class="hljs-value">{ResultsContainer}</span> /&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-title">Route</span> <span class="hljs-attribute">path</span>=<span class="hljs-value">"/"</span> <span class="hljs-attribute">component</span>=<span class="hljs-value">{VotingContainer}</span> /&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-title">Route</span>&gt;</span>;</span>\n\nReactDOM.render(\n  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">Provider</span> <span class="hljs-attribute">store</span>=<span class="hljs-value">{store}</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-title">Router</span>&gt;</span>{routes}<span class="hljs-tag">&lt;/<span class="hljs-title">Router</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-title">Provider</span>&gt;</span>,\n  document.getElementById('app')\n);\n\n</span></pre>\n<pre class="ws-hack">  &nbsp;\n</pre>\n\n<p>Note that we've removed the hardcoded <code>SET_STATE</code> dispatch. We no longer need it because the server will give us the real state.</p>\n\n<p>Looking at the UI - either the voting or the results one - will now show the first pair of entries, as defined by the server. Our server and client are connected!</p>\n\n<h4 id="dispatching-actions-from-react-components">Dispatching Actions From React Components</h4>\n\n<p>We know how to get data <em>in</em> from the Redux Store to the UI. Let's discuss how we can get actions <em>out</em> from the UI.</p>\n\n<p>The best place for us to start thinking about this is the voting buttons. When we were building the UI, we assumed that the <code>Voting</code> component will receive a <code>vote</code> prop whose value is a callback function. The component invokes that function when the user clicks on one of the buttons. But we haven't actually supplied the callback yet - except in unit tests.</p>\n\n<p>What should actually happen when a user votes on something? Well, the vote should probably be sent to the server, and that's something we'll discuss a bit later, but there's also client-side logic involved: The <code>hasVoted</code> prop should be set on the component, so that the user can't vote for the same pair again.</p>\n\n<p>This will be the second client-side Redux action we have, after <code>SET_STATE</code>. We can call it <code>VOTE</code>. It should populate a <code>hasVoted</code> entry in the state Map:</p>\n\n<div class="codeblock-banner">test/reducer_spec.js</div>\n\n<pre class="hljs">it(<span class="hljs-string">'handles VOTE by setting hasVoted'</span>, () =&gt; {\n  <span class="hljs-keyword">const</span> state = fromJS({\n    vote: {\n      pair: [<span class="hljs-string">'Trainspotting'</span>, <span class="hljs-string">'28 Days Later'</span>],\n      tally: {Trainspotting: <span class="hljs-number">1</span>}\n    }\n  });\n  <span class="hljs-keyword">const</span> action = {type: <span class="hljs-string">'VOTE'</span>, entry: <span class="hljs-string">'Trainspotting'</span>};\n  <span class="hljs-keyword">const</span> nextState = reducer(state, action);\n\n  expect(nextState).to.equal(fromJS({\n    vote: {\n      pair: [<span class="hljs-string">'Trainspotting'</span>, <span class="hljs-string">'28 Days Later'</span>],\n      tally: {Trainspotting: <span class="hljs-number">1</span>}\n    },\n    hasVoted: <span class="hljs-string">'Trainspotting'</span>\n  }));\n});\n</pre>\n\n<p>It might also be a good idea to <em>not</em> set that entry if, for any reason, a VOTE action is coming in for an entry that's not under vote at the moment:</p>\n\n<div class="codeblock-banner">test/reducer_spec.js</div>\n\n<pre class="hljs">it(<span class="hljs-string">'does not set hasVoted for VOTE on invalid entry'</span>, () =&gt; {\n  <span class="hljs-keyword">const</span> state = fromJS({\n    vote: {\n      pair: [<span class="hljs-string">'Trainspotting'</span>, <span class="hljs-string">'28 Days Later'</span>],\n      tally: {Trainspotting: <span class="hljs-number">1</span>}\n    }\n  });\n  <span class="hljs-keyword">const</span> action = {type: <span class="hljs-string">'VOTE'</span>, entry: <span class="hljs-string">'Sunshine'</span>};\n  <span class="hljs-keyword">const</span> nextState = reducer(state, action);\n\n  expect(nextState).to.equal(fromJS({\n    vote: {\n      pair: [<span class="hljs-string">'Trainspotting'</span>, <span class="hljs-string">'28 Days Later'</span>],\n      tally: {Trainspotting: <span class="hljs-number">1</span>}\n    }\n  }));\n});\n</pre>\n\n<p>Here's the reducer extension that'll do the trick:</p>\n\n<div class="codeblock-banner">src/reducer.js</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> {Map}&nbsp;<span class="hljs-keyword">from</span> <span class="hljs-string">'immutable'</span>;\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setState</span>(<span class="hljs-params">state, newState</span>) </span>{\n  <span class="hljs-keyword">return</span> state.merge(newState);\n}\n\n<span class="codeblock-highlight"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">vote</span>(<span class="hljs-params">state, entry</span>) </span>{\n  <span class="hljs-keyword">const</span> currentPair = state.getIn([<span class="hljs-string">'vote'</span>, <span class="hljs-string">'pair'</span>]);\n  <span class="hljs-keyword">if</span> (currentPair &amp;&amp; currentPair.includes(entry)) {\n    <span class="hljs-keyword">return</span> state.set(<span class="hljs-string">'hasVoted'</span>, entry);\n  } <span class="hljs-keyword">else</span> {\n    <span class="hljs-keyword">return</span> state;\n  }\n}</span>\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">state = Map(</span>), <span class="hljs-title">action</span>) </span>{\n  <span class="hljs-keyword">switch</span> (action.type) {\n  <span class="hljs-keyword">case</span> <span class="hljs-string">'SET_STATE'</span>:\n    <span class="hljs-keyword">return</span> setState(state, action.state);\n<span class="codeblock-highlight">  <span class="hljs-keyword">case</span> <span class="hljs-string">'VOTE'</span>:\n    <span class="hljs-keyword">return</span> vote(state, action.entry);</span>\n  }\n  <span class="hljs-keyword">return</span> state;\n}\n</pre>\n\n<p>The <code>hasVoted</code> entry should not remain in the state forever. It should be re-set when the vote moves on to the next pair, so that the user can vote on that one. We should handle this in <code>SET_STATE</code>, where we can check if the pair in the new state contains the entry the user has voted on. If it doesn't, we should erase the <code>hasVoted</code> entry:</p>\n\n<div class="codeblock-banner">test/reducer_spec.js</div>\n\n<pre class="hljs">it(<span class="hljs-string">'removes hasVoted on SET_STATE if pair changes'</span>, () =&gt; {\n  <span class="hljs-keyword">const</span> initialState = fromJS({\n    vote: {\n      pair: [<span class="hljs-string">'Trainspotting'</span>, <span class="hljs-string">'28 Days Later'</span>],\n      tally: {Trainspotting: <span class="hljs-number">1</span>}\n    },\n    hasVoted: <span class="hljs-string">'Trainspotting'</span>\n  });\n  <span class="hljs-keyword">const</span> action = {\n    type: <span class="hljs-string">'SET_STATE'</span>,\n    state: {\n      vote: {\n        pair: [<span class="hljs-string">'Sunshine'</span>, <span class="hljs-string">'Slumdog Millionaire'</span>]\n      }\n    }\n  };\n  <span class="hljs-keyword">const</span> nextState = reducer(initialState, action);\n\n  expect(nextState).to.equal(fromJS({\n    vote: {\n      pair: [<span class="hljs-string">'Sunshine'</span>, <span class="hljs-string">'Slumdog Millionaire'</span>]\n    }\n  }));\n});\n</pre>\n\n<p>We can implement this by composing another function, called <code>resetVote</code> on the <code>SET_STATE</code> action handler:</p>\n\n<div class="codeblock-banner">src/reducer.js</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> {<span class="codeblock-highlight">List, </span>Map}&nbsp;<span class="hljs-keyword">from</span> <span class="hljs-string">'immutable'</span>;\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setState</span>(<span class="hljs-params">state, newState</span>) </span>{\n  <span class="hljs-keyword">return</span> state.merge(newState);\n}\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">vote</span>(<span class="hljs-params">state, entry</span>) </span>{\n  <span class="hljs-keyword">const</span> currentPair = state.getIn([<span class="hljs-string">'vote'</span>, <span class="hljs-string">'pair'</span>]);\n  <span class="hljs-keyword">if</span> (currentPair &amp;&amp; currentPair.includes(entry)) {\n    <span class="hljs-keyword">return</span> state.set(<span class="hljs-string">'hasVoted'</span>, entry);\n  } <span class="hljs-keyword">else</span> {\n    <span class="hljs-keyword">return</span> state;\n  }\n}\n\n<span class="codeblock-highlight"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">resetVote</span>(<span class="hljs-params">state</span>) </span>{\n  <span class="hljs-keyword">const</span> hasVoted = state.get(<span class="hljs-string">'hasVoted'</span>);\n  <span class="hljs-keyword">const</span> currentPair = state.getIn([<span class="hljs-string">'vote'</span>, <span class="hljs-string">'pair'</span>], List());\n  <span class="hljs-keyword">if</span> (hasVoted &amp;&amp; !currentPair.includes(hasVoted)) {\n    <span class="hljs-keyword">return</span> state.remove(<span class="hljs-string">'hasVoted'</span>);\n  } <span class="hljs-keyword">else</span> {\n    <span class="hljs-keyword">return</span> state;\n  }\n}</span>\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">state = Map(</span>), <span class="hljs-title">action</span>) </span>{\n  <span class="hljs-keyword">switch</span> (action.type) {\n  <span class="hljs-keyword">case</span> <span class="hljs-string">'SET_STATE'</span>:\n    <span class="codeblock-highlight"><span class="hljs-keyword">return</span> resetVote(setState(state, action.state));</span>\n  <span class="hljs-keyword">case</span> <span class="hljs-string">'VOTE'</span>:\n    <span class="hljs-keyword">return</span> vote(state, action.entry);\n  }\n  <span class="hljs-keyword">return</span> state;\n}\n</pre>\n\n<div class="aside">\n<p>\n  This logic for determining whether the hasVoted entry is for the current pair is slightly problematic. See the exercises for a way to improve it.\n</p>\n</div>\n\n<p>We aren't yet connecting the <code>hasVoted</code> entry to the props on <code>Voting</code>, so we should do that too:</p>\n\n<div class="codeblock-banner">src/components/Voting.jsx</div>\n\n<pre class="hljs"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mapStateToProps</span>(<span class="hljs-params">state</span>) </span>{\n  <span class="hljs-keyword">return</span> {\n    pair: state.getIn([<span class="hljs-string">'vote'</span>, <span class="hljs-string">'pair'</span>]),\n    <span class="codeblock-highlight">hasVoted: state.get(<span class="hljs-string">'hasVoted'</span>),</span>\n    winner: state.get(<span class="hljs-string">'winner'</span>)\n  };\n}\n</pre>\n\n<p>Now we still need a way to give a <code>vote</code> callback to <code>Voting</code>, which will cause this new action to be dispatched. We should keep <code>Voting</code> itself pure and unaware of actions or Redux. Instead, this is another job for the <code>connect</code> function from react-redux.</p>\n\n<p>In addition to wiring up <em>input props</em>, react-redux can be used to wire up <em>output actions</em>. Before we can do that though, we need to introduce another core Redux concept: <em>Action creators</em>.</p>\n\n<p>As we have seen, Redux actions are just simple objects that (by convention) have a <code>type</code> attribute and other, action-specific data. We have been creating these actions whenever needed by simply using object literals. It is preferable, however, to use little factory functions for making actions instead. Functions such as this one:</p>\n\n<pre class="hljs"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">vote</span>(<span class="hljs-params">entry</span>) </span>{\n  <span class="hljs-keyword">return</span> {type: <span class="hljs-string">'VOTE'</span>, entry};\n}\n</pre>\n\n<p>These functions are called action creators. There's really not much to them - they are pure functions that just return action objects - but what they do is encapsulate the internal structure of the action objects so that the rest of your codebase doesn't need to be concerned with that. Actions creators also conveniently document all the actions that can be dispatched in a given application. That information would be more difficult to gather if it was sprinkled all over the codebase in object literals.</p>\n\n<p>Let's create a new file that defines the action creators for our two existing client-side actions:</p>\n\n<div class="codeblock-banner">src/action_creators.js</div>\n\n<pre class="hljs"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setState</span>(<span class="hljs-params">state</span>) </span>{\n  <span class="hljs-keyword">return</span> {\n    type: <span class="hljs-string">'SET_STATE'</span>,\n    state\n  };\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">vote</span>(<span class="hljs-params">entry</span>) </span>{\n  <span class="hljs-keyword">return</span> {\n    type: <span class="hljs-string">'VOTE'</span>,\n    entry\n  };\n}\n</pre>\n\n<div class="aside">\n<p>\n  We could also very easily write unit tests for these functions, but I usually don't bother with that unless an action creator actually does something more than just returns an object. Feel free to add the unit tests, however, if you consider them useful!\n</p>\n</div>\n\n<p>In <code>index.jsx</code> we can now use the <code>setState</code> action creator in the Socket.io event handler:</p>\n\n<div class="codeblock-banner">src/index.jsx</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;\n<span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom'</span>;\n<span class="hljs-keyword">import</span> Router, {Route} <span class="hljs-keyword">from</span> <span class="hljs-string">'react-router'</span>;\n<span class="hljs-keyword">import</span> {createStore} <span class="hljs-keyword">from</span> <span class="hljs-string">'redux'</span>;\n<span class="hljs-keyword">import</span> {Provider} <span class="hljs-keyword">from</span> <span class="hljs-string">'react-redux'</span>;\n<span class="hljs-keyword">import</span> io <span class="hljs-keyword">from</span> <span class="hljs-string">'socket.io-client'</span>;\n<span class="hljs-keyword">import</span> reducer <span class="hljs-keyword">from</span> <span class="hljs-string">'./reducer'</span>;\n<span class="codeblock-highlight"><span class="hljs-keyword">import</span> {setState} <span class="hljs-keyword">from</span> <span class="hljs-string">'./action_creators'</span>;</span>\n<span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">'./components/App'</span>;\n<span class="hljs-keyword">import</span> {VotingContainer} <span class="hljs-keyword">from</span> <span class="hljs-string">'./components/Voting'</span>;\n<span class="hljs-keyword">import</span> {ResultsContainer} <span class="hljs-keyword">from</span> <span class="hljs-string">'./components/Results'</span>;\n\n<span class="hljs-keyword">const</span> store = createStore(reducer);\n\n<span class="hljs-keyword">const</span> socket = io(<span class="hljs-string">`<span class="hljs-subst">${location.protocol}</span>//<span class="hljs-subst">${location.hostname}</span>:8090`</span>);\nsocket.on(<span class="hljs-string">'state'</span>, state =&gt;\n  store.dispatch(<span class="codeblock-highlight">setState(state)</span>)\n);\n\n<span class="hljs-keyword">const</span> routes = <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">Route</span> <span class="hljs-attribute">component</span>=<span class="hljs-value">{App}</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-title">Route</span> <span class="hljs-attribute">path</span>=<span class="hljs-value">"/results"</span> <span class="hljs-attribute">component</span>=<span class="hljs-value">{ResultsContainer}</span> /&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-title">Route</span> <span class="hljs-attribute">path</span>=<span class="hljs-value">"/"</span> <span class="hljs-attribute">component</span>=<span class="hljs-value">{VotingContainer}</span> /&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-title">Route</span>&gt;</span>;</span>\n\nReactDOM.render(\n  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">Provider</span> <span class="hljs-attribute">store</span>=<span class="hljs-value">{store}</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-title">Router</span>&gt;</span>{routes}<span class="hljs-tag">&lt;/<span class="hljs-title">Router</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-title">Provider</span>&gt;</span>,\n  document.getElementById('app')\n);\n\n</span></pre>\n<pre class="ws-hack">  &nbsp;\n</pre>\n\n<p>A really neat thing about action creators is the way react-redux can connect them to React components: We have a <code>vote</code> callback prop on <code>Voting</code>, and a <code>vote</code> action creator. Both have the same name and the same function signature: A single argument, which is the entry being voted. What we can do is simply give our action creators to the react-redux <code>connect</code> function as the second argument, and the connection will be made:</p>\n\n<div class="codeblock-banner">src/components/Voting.jsx</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;\n<span class="hljs-keyword">import</span> PureRenderMixin <span class="hljs-keyword">from</span> <span class="hljs-string">'react-addons-pure-render-mixin'</span>;\n<span class="hljs-keyword">import</span> {connect} <span class="hljs-keyword">from</span> <span class="hljs-string">'react-redux'</span>;\n<span class="hljs-keyword">import</span> Winner <span class="hljs-keyword">from</span> <span class="hljs-string">'./Winner'</span>;\n<span class="hljs-keyword">import</span> Vote <span class="hljs-keyword">from</span> <span class="hljs-string">'./Vote'</span>;\n<span class="codeblock-highlight"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> actionCreators <span class="hljs-keyword">from</span> <span class="hljs-string">'../action_creators'</span>;</span>\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> Voting = React.createClass({\n  mixins: [PureRenderMixin],\n  render: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span>&gt;</span>\n      {this.props.winner ?\n        <span class="hljs-tag">&lt;<span class="hljs-title">Winner</span> <span class="hljs-attribute">ref</span>=<span class="hljs-value">"winner"</span> <span class="hljs-attribute">winner</span>=<span class="hljs-value">{this.props.winner}</span> /&gt;</span> :\n        <span class="hljs-tag">&lt;<span class="hljs-title">Vote</span> {<span class="hljs-attribute">...this.props</span>} /&gt;</span>}\n    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>;</span>\n  }\n});\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mapStateToProps</span>(<span class="hljs-params">state</span>) </span>{\n  <span class="hljs-keyword">return</span> {\n    pair: state.getIn([<span class="hljs-string">'vote'</span>, <span class="hljs-string">'pair'</span>]),\n    hasVoted: state.get(<span class="hljs-string">'hasVoted'</span>),\n    winner: state.get(<span class="hljs-string">'winner'</span>)\n  };\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> VotingContainer = connect(\n  mapStateToProps,\n  <span class="codeblock-highlight">actionCreators</span>\n)(Voting);\n</pre>\n\n<p>The effect of this is that a <code>vote</code> prop will be given to <code>Voting</code>. That prop is a function that creates an action using the <code>vote</code> action creator, and also dispatches that action to the Redux Store.  Thus, clicking a vote button now dispatches an action! You should be able to see the effects in the browser immediately: When you vote on something, the buttons will become disabled.</p>\n\n<h4 id="sending-actions-to-the-server-using-redux-middleware">Sending Actions To The Server Using Redux Middleware</h4>\n\n<p>The final aspect of our application that we need to address is getting the results of the user's actions to the server. This should happen when the user votes on something, as well as when the vote manager hits the Next button on the result screen.</p>\n\n<p>Let's begin by discussing Voting. Here's an inventory of what we already have in place:</p>\n\n<ul>\n<li>A <code>VOTE</code> action is created and dispatched to the client-side Redux Store when the user votes.</li>\n<li><code>VOTE</code> actions are handled by the client-side reducer by setting the <code>hasVoted</code> state.</li>\n<li>The server is ready to receive actions from clients via the <code>action</code> Socket.io event. It dispatches all received actions to the serverside Redux Store.</li>\n<li><code>VOTE</code> actions are handled by the serverside reducer by registering the vote and updating the tally.</li>\n</ul>\n\n<p>It would seem like we actually have almost everything we need! All that is missing is the actual sending of the client-side <code>VOTE</code> action to the server, so that it would be dispatched to <em>both</em> of the Redux stores. That's what we'll do next.</p>\n\n<p>How should we approach this? There's nothing built into Redux for this purpose, since supporting a distributed system like ours isn't really part of its core functionality. It is left to us to decide where and how we send client-side actions to the server.</p>\n\n<p>What Redux does provide is a generic way to tap into actions that are being dispatched to Redux stores: <a href="http://rackt.github.io/redux/docs/advanced/Middleware.html">Middleware</a>.</p>\n\n<p>A Redux middleware is a function that gets invoked when an action is dispatched, before the action hits the reducer and the store itself. Middleware can be used for all kinds of things, from logging and exception handling to modifying actions, caching results, or even changing how or when the action will reach the store. What <em>we</em> are going to use them for is sending client-side actions to the server.</p>\n\n<div class="aside">\n<p>\n  Note the difference between Redux middleware and Redux listeners: Middleware are called before an action hits the store, and they may affect what happens to the action. Listeners are called after an action has been dispatched, and they can't really do anything about it. Different tools for different purposes.\n</p>\n</div>\n\n<p>What we're going to do is create a "remote action middleware" that causes an action to be dispatched not only to the original store, but also to a remote store using a Socket.io connection.</p>\n\n<p>Let's set up the skeleton for this middleware. It is a function that takes a Redux store, and returns another function that takes a "next" callback. That function returns a <em>third</em> function that takes a Redux action. The innermost function is where the middleware implementation will actually go:</p>\n\n<div class="codeblock-banner">src/remote_action_middleware.js</div>\n\n<pre class="hljs"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store =&gt; next =&gt; action =&gt; {\n\n}\n</pre>\n\n<p>The code above may look a bit foreign but it's really just a more concise way of expressing this:</p>\n\n<pre class="hljs"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">store</span>) </span>{\n  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">next</span>) </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">action</span>) </span>{\n\n    }\n  }\n}\n</pre>\n\n<p>This style of nesting single-argument functions is called <a href="https://en.wikipedia.org/wiki/Currying">currying</a>. In this case it's used so that the Middleware is easily configurable: If we had all the arguments in just one function (<code>function(store, next, action) {&nbsp;}</code>) we'd also have to supply all the arguments every time the middleware is used. With the curried version we can call the outermost function once, and get a return value that "remembers" which store to use. The same goes for the <code>next</code> argument.</p>\n\n<p>The <code>next</code> argument is a callback that the middleware should call when it has done its work and the action should be sent to the store (or the next middleware):</p>\n\n<div class="codeblock-banner">src/remote_action_middleware.js</div>\n\n<pre class="hljs"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store =&gt; next =&gt; action =&gt; {\n  <span class="codeblock-highlight"><span class="hljs-keyword">return</span> next(action);</span>\n}\n</pre>\n\n<div class="aside">\n<p>\n  The middleware could also decide <em>not</em> to call <code>next</code>, if it decided that the action should be halted. In that case it would never go into the reducer or the store.\n</p>\n</div>\n\n<p>Let's just log something in this middleware so that we'll be able to see when it's called:</p>\n\n<div class="codeblock-banner">src/remote_action_middleware.js</div>\n\n<pre class="hljs"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store =&gt; next =&gt; action =&gt; {\n  <span class="codeblock-highlight"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'in middleware'</span>, action);</span>\n  <span class="hljs-keyword">return</span> next(action);\n}\n</pre>\n\n<p>If we now plug in this middleware to our Redux store, we should see all actions being logged. The middleware can be activated using an <code>applyMiddleware</code> function that Redux ships with. It takes the middleware we want to register, and returns a function that takes the <code>createStore</code> function. That second function will then create a store for us that has the middleware included in it:</p>\n\n<div class="codeblock-banner">src/components/index.jsx</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;\n<span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom'</span>;\n<span class="hljs-keyword">import</span> Router, {Route} <span class="hljs-keyword">from</span> <span class="hljs-string">'react-router'</span>;\n<span class="hljs-keyword">import</span> {createStore<span class="codeblock-highlight">, applyMiddleware</span>} <span class="hljs-keyword">from</span> <span class="hljs-string">'redux'</span>;\n<span class="hljs-keyword">import</span> {Provider} <span class="hljs-keyword">from</span> <span class="hljs-string">'react-redux'</span>;\n<span class="hljs-keyword">import</span> io <span class="hljs-keyword">from</span> <span class="hljs-string">'socket.io-client'</span>;\n<span class="hljs-keyword">import</span> reducer <span class="hljs-keyword">from</span> <span class="hljs-string">'./reducer'</span>;\n<span class="hljs-keyword">import</span> {setState} <span class="hljs-keyword">from</span> <span class="hljs-string">'./action_creators'</span>;\n<span class="codeblock-highlight"><span class="hljs-keyword">import</span> remoteActionMiddleware <span class="hljs-keyword">from</span> <span class="hljs-string">'./remote_action_middleware'</span>;</span>\n<span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">'./components/App'</span>;\n<span class="hljs-keyword">import</span> {VotingContainer} <span class="hljs-keyword">from</span> <span class="hljs-string">'./components/Voting'</span>;\n<span class="hljs-keyword">import</span> {ResultsContainer} <span class="hljs-keyword">from</span> <span class="hljs-string">'./components/Results'</span>;\n\n<span class="codeblock-highlight"><span class="hljs-keyword">const</span> createStoreWithMiddleware = applyMiddleware(\n  remoteActionMiddleware\n)(createStore);\n<span class="hljs-keyword">const</span> store = createStoreWithMiddleware(reducer);</span>\n\n<span class="hljs-keyword">const</span> socket = io(<span class="hljs-string">`<span class="hljs-subst">${location.protocol}</span>//<span class="hljs-subst">${location.hostname}</span>:8090`</span>);\nsocket.on(<span class="hljs-string">'state'</span>, state =&gt;\n  store.dispatch(setState(state))\n);\n\n<span class="hljs-keyword">const</span> routes = <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">Route</span> <span class="hljs-attribute">component</span>=<span class="hljs-value">{App}</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-title">Route</span> <span class="hljs-attribute">path</span>=<span class="hljs-value">"/results"</span> <span class="hljs-attribute">component</span>=<span class="hljs-value">{ResultsContainer}</span> /&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-title">Route</span> <span class="hljs-attribute">path</span>=<span class="hljs-value">"/"</span> <span class="hljs-attribute">component</span>=<span class="hljs-value">{VotingContainer}</span> /&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-title">Route</span>&gt;</span>;</span>\n\nReactDOM.render(\n  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">Provider</span> <span class="hljs-attribute">store</span>=<span class="hljs-value">{store}</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-title">Router</span>&gt;</span>{routes}<span class="hljs-tag">&lt;/<span class="hljs-title">Router</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-title">Provider</span>&gt;</span>,\n  document.getElementById('app')\n);\n\n</span></pre>\n<div class="aside">\n<p>\n  This is another instance of the curried style of configuring things that we just discussed. Redux APIs use it quite heavily.\n</p>\n</div>\n\n<pre class="ws-hack">  &nbsp;\n</pre>\n\n<p>If you now reload the app, you'll see the middleware logging the actions that occur: Once for the initial <code>SET_STATE</code>, and again for the <code>VOTE</code> action from voting.</p>\n\n<p>What this middleware should actually do is send a given action to a Socket.io connection, in addition to giving it to the next middleware. Before it can do that, it needs the connection to send it to. We already have a connection in <code>index.jsx</code> - we just need the middleware to have access to it too. That's easily accomplished by using currying once more in the middleware definition. The outermost function should take a Socket.io socket:</p>\n\n<div class="codeblock-banner">src/remote_action_middleware.js</div>\n\n<pre class="hljs"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="codeblock-highlight">socket =&gt; </span>store =&gt; next =&gt; action =&gt; {\n  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'in middleware'</span>, action);\n  <span class="hljs-keyword">return</span> next(action);\n}\n</pre>\n\n<p>Now we can pass in the socket from <code>index.jsx</code>:</p>\n\n<div class="codeblock-banner">src/index.jsx</div>\n\n<pre class="hljs"><span class="hljs-keyword">const</span> socket = io(<span class="hljs-string">`<span class="hljs-subst">${location.protocol}</span>//<span class="hljs-subst">${location.hostname}</span>:8090`</span>);\nsocket.on(<span class="hljs-string">'state'</span>, state =&gt;\n  store.dispatch(setState(state))\n);\n\n<span class="hljs-keyword">const</span> createStoreWithMiddleware = applyMiddleware(\n  remoteActionMiddleware<span class="codeblock-highlight">(socket)</span>\n)(createStore);\n<span class="hljs-keyword">const</span> store = createStoreWithMiddleware(reducer);\n</pre>\n\n<p>Note that we need to flip around the initialization of the socket and the store, so that the socket is created first. We need it during store initialization.</p>\n\n<p>All that remains to be done now is to actually emit an <code>action</code> event from the middleware:</p>\n\n<div class="codeblock-banner">src/remote_action_middleware.js</div>\n\n<pre class="hljs"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> socket =&gt; store =&gt; next =&gt; action =&gt; {\n  <span class="codeblock-highlight">socket.emit(<span class="hljs-string">'action'</span>, action);</span>\n  <span class="hljs-keyword">return</span> next(action);\n}\n</pre>\n\n<p>And that's it! If you now click on one of the voting buttons, you'll also see the tally numbers update, both within the same browser window and any other ones that you run the app in. The vote is being registered!</p>\n\n<p>There is one major problem we have with this though: When we get the state update from the server and dispatch the <code>SET_STATE</code> action, it <em>also</em> goes right back to the server. Although the server does nothing with that action, its listener is still triggered, causing a new <code>SET_STATE</code>. We have created an infinite loop! That's certainly not good.</p>\n\n<p>It is not appropriate for the remote action middleware to send each and every action to the server. Some actions, such as <code>SET_STATE</code>, should just be handled locally in the client. We can extend the middleware to only send certain actions to the server. Concretely, we should only send out actions that have a <code>{meta: {remote: true}}</code> property attached:</p>\n\n<div class="aside">\n<p>\n  This pattern is adapted from the rafScheduler example in the <a href="http://rackt.github.io/redux/docs/advanced/Middleware.html">middleware documentation</a>.\n</p>\n</div>\n\n<div class="codeblock-banner">src/remote_action_middleware.js</div>\n\n<pre class="hljs"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> socket =&gt; store =&gt; next =&gt; action =&gt; {\n<span class="codeblock-highlight">  <span class="hljs-keyword">if</span> (action.meta &amp;&amp; action.meta.remote) {\n    socket.emit(<span class="hljs-string">'action'</span>, action);\n  }</span>\n  <span class="hljs-keyword">return</span> next(action);\n}\n</pre>\n\n<p>The action creator for <code>VOTE</code> should now set this property, where as the one for <code>SET_STATE</code> should <em>not</em>:</p>\n\n<div class="codeblock-banner">src/action_creators.js</div>\n\n<pre class="hljs"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setState</span>(<span class="hljs-params">state</span>) </span>{\n  <span class="hljs-keyword">return</span> {\n    type: <span class="hljs-string">'SET_STATE'</span>,\n    state\n  };\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">vote</span>(<span class="hljs-params">entry</span>) </span>{\n  <span class="hljs-keyword">return</span> {\n    <span class="codeblock-highlight">meta: {remote: <span class="hljs-literal">true</span>},</span>\n    type: <span class="hljs-string">'VOTE'</span>,\n    entry\n  };\n}\n</pre>\n\n<p>Let's recap what's actually happening here:</p>\n\n<ol>\n<li>The user clicks a vote button. A <code>VOTE</code> action is dispatched.</li>\n<li>The remote action middleware sends the action over the Socket.io connection.</li>\n<li>The client-side Redux store handles the action, causing the local <code>hasVote</code> state to be set.</li>\n<li>When the message arrives on the server, the serverside Redux store handles the action, updating the vote in the tally.</li>\n<li>The listener on the serverside Redux store broadcasts a state snapshot to all connected clients.</li>\n<li>A <code>SET_STATE</code> action is dispatched to the Redux store of every connected client.</li>\n<li>The Redux store of every connected client handles the <code>SET_STATE</code> action with the updated state from the server.</li>\n</ol>\n\n<p>To complete our application, we just need to make the Next button work as well. Just like with voting, the server has the appropriate logic already. We just need to connect things up.</p>\n\n<p>The action creator for <code>NEXT</code> needs to create a remote action of the correct type:</p>\n\n<div class="codeblock-banner">src/action_creator.js</div>\n\n<pre class="hljs"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setState</span>(<span class="hljs-params">state</span>) </span>{\n  <span class="hljs-keyword">return</span> {\n    type: <span class="hljs-string">'SET_STATE'</span>,\n    state\n  };\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">vote</span>(<span class="hljs-params">entry</span>) </span>{\n  <span class="hljs-keyword">return</span> {\n    meta: {remote: <span class="hljs-literal">true</span>},\n    type: <span class="hljs-string">'VOTE'</span>,\n    entry\n  };\n}\n\n<span class="codeblock-highlight"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">next</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">return</span> {\n    meta: {remote: <span class="hljs-literal">true</span>},\n    type: <span class="hljs-string">'NEXT'</span>\n  };\n}</span>\n</pre>\n\n<p>The ResultsContainer component should connect the action creators in as props:</p>\n\n<div class="codeblock-banner">src/components/Results.jsx</div>\n\n<pre class="hljs"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;\n<span class="hljs-keyword">import</span> PureRenderMixin <span class="hljs-keyword">from</span> <span class="hljs-string">'react-addons-pure-render-mixin'</span>;\n<span class="hljs-keyword">import</span> {connect} <span class="hljs-keyword">from</span> <span class="hljs-string">'react-redux'</span>;\n<span class="hljs-keyword">import</span> Winner <span class="hljs-keyword">from</span> <span class="hljs-string">'./Winner'</span>;\n<span class="codeblock-highlight"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> actionCreators <span class="hljs-keyword">from</span> <span class="hljs-string">'../action_creators'</span>;</span>\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> Results = React.createClass({\n  mixins: [PureRenderMixin],\n  getPair: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.props.pair || [];\n  },\n  getVotes: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">entry</span>) </span>{\n    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.props.tally &amp;&amp; <span class="hljs-keyword">this</span>.props.tally.has(entry)) {\n      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.props.tally.get(entry);\n    }\n    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;\n  },\n  render: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.props.winner ?\n      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">Winner</span> <span class="hljs-attribute">ref</span>=<span class="hljs-value">"winner"</span> <span class="hljs-attribute">winner</span>=<span class="hljs-value">{this.props.winner}</span> /&gt;</span> :\n      <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">className</span>=<span class="hljs-value">"results"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">className</span>=<span class="hljs-value">"tally"</span>&gt;</span>\n          {this.getPair().map(entry =&gt;\n            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">key</span>=<span class="hljs-value">{entry}</span> <span class="hljs-attribute">className</span>=<span class="hljs-value">"entry"</span>&gt;</span>\n              <span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span>{entry}<span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>\n              <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">className</span>=<span class="hljs-value">"voteCount"</span>&gt;</span>\n                {this.getVotes(entry)}\n              <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\n            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\n          )</span>}\n        &lt;/div&gt;\n        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">className</span>=<span class="hljs-value">"management"</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">ref</span>=<span class="hljs-value">"next"</span>\n                   <span class="hljs-attribute">className</span>=<span class="hljs-value">"next"</span>\n                   <span class="hljs-attribute">onClick</span>=<span class="hljs-value">{this.props.next}</span>&gt;</span>\n            Next\n          <span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>;</span>\n  }\n});\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mapStateToProps</span>(<span class="hljs-params">state</span>) </span>{\n  <span class="hljs-keyword">return</span> {\n    pair: state.getIn([<span class="hljs-string">'vote'</span>, <span class="hljs-string">'pair'</span>]),\n    tally: state.getIn([<span class="hljs-string">'vote'</span>, <span class="hljs-string">'tally'</span>]),\n    winner: state.get(<span class="hljs-string">'winner'</span>)\n  }\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> ResultsContainer = connect(\n  mapStateToProps,\n  <span class="codeblock-highlight">actionCreators</span>\n)(Results);\n</pre>\n\n<p>And... that's it! We now have a complete, functioning application. Try opening the results screen on your computer and the voting screen on a mobile device. You'll see the actions applied on one device immediately taking effect on another - which always feel magical: Vote on one screen, see the results view update on another screen. Click "Next" on the results screen and see the vote proceed on your voting device. To make it even more fun, arrange a vote with some friends the next time you get together!</p>\n\n<h3 id="exercises">Exercises</h3>\n\n<p>If you want to develop this application a bit further, while at the same time getting more comfortable with a Redux architecture, here are a few exercises. I have attached a link to one possible solution for each one.</p>\n\n<h4 id="1-invalid-vote-prevention">1. Invalid Vote Prevention</h4>\n\n<p>The server should not allow entries to be voted if they are not included in the current pair. Add a failing unit test to illustrate the problem and then fix the logic.</p>\n\n<p>See <a href="https://github.com/teropa/redux-voting-server/commit/exercise-1">my solution</a>.</p>\n\n<h4 id="2-improved-vote-state-reset">2. Improved Vote State Reset</h4>\n\n<p>The client currently resets the <code>hasVoted</code> state when the new voted pair does not include the entry that was voted. This has one major problem: If two consecutive pairs include the same entry, which will always happen during the last rounds of the vote, the state is not reset. The user can't vote on the last round because their buttons are disabled!</p>\n\n<p>Modify the system so that it creates a <em>unique identifier</em> for each round of votes instead, and the voted state is tracked based on this round id.</p>\n\n<p><em>Hint:</em> Track a running counter of rounds on the server. When a user votes, save the current round number in the client state. When the state updates, reset the voted state if the round number has changed.</p>\n\n<p>See my solution <a href="https://github.com/teropa/redux-voting-server/commit/exercise-2">on the server</a> and <a href="https://github.com/teropa/redux-voting-client/commit/exercise-2">the client</a>.</p>\n\n<h4 id="3-duplicate-vote-prevention">3. Duplicate Vote Prevention</h4>\n\n<p>A user can still vote several times during the same round, if they just refresh the page, because their voted state is lost. Fix this.</p>\n\n<p><em>Hint:</em> Generate unique identifiers for each user and keep track of who has voted what on the server, so that if a user votes again, their previous vote for the round is nullified. If you do this, you can also skip the disabling of the voting buttons, since it is possible for the user to change their mind during the round.</p>\n\n<p>See my solution <a href="https://github.com/teropa/redux-voting-server/commit/exercise-3">on the server</a> and <a href="https://github.com/teropa/redux-voting-client/commit/exercise-3">the client</a>.</p>\n\n<h4 id="4-restarting-the-vote">4. Restarting The Vote</h4>\n\n<p>Implement a button to the results screen that allows the user to start the voting from the beginning.</p>\n\n<p><em>Hint:</em> You need to keep track of the original entries in the state, and reset back to them.</p>\n\n<p>See my solution <a href="https://github.com/teropa/redux-voting-server/commit/exercise-4">on the server</a> and <a href="https://github.com/teropa/redux-voting-client/commit/exercise-4">the client</a>.</p>\n\n<h4 id="5-indicating-socket-connection-state">5. Indicating Socket Connection State</h4>\n\n<p>When connectivity is poor, Socket.io may not be immediately and always connected. Add a visual indicator that tells the user when they're not connected.</p>\n\n<p><em>Hint:</em> Listen to connection events from Socket.io and dispatch actions that put the connection state in the Redux store.</p>\n\n<p>See <a href="https://github.com/teropa/redux-voting-client/commit/exercise-5">my solution</a>.</p>\n\n<h4 id="bonus-challenge-going-peer-to-peer">Bonus Challenge: Going Peer to Peer</h4>\n\n<p>I haven't actually tried this, but it's an interesting path to explore if you're feeling adventurous:</p>\n\n<p>Modify the logic of the system so that instead of having separate implementations of reducers on the client and server, the full voting logic  reducer runs on each client. Dispatch all actions to everyone, so that everyone sees the same thing.</p>\n\n<p>How do you make sure everyone receives all actions and receives them in the correct order?</p>\n\n<p>In this architecture, is there necessarily a need for a server at all? Could you go fully P2P using WebRTC? (With <a href="http://socket.io/blog/socket-io-p2p/">Socket.io P2P perhaps</a>)</p>\n\n  </div>	0	0	0	f	learn more >>>	0
6	1	1	2016-01-27 15:40:02.7866	{4,5}	{}	node.js and circular dependencies	<p>Circular Dependencies in modules can be tricky, and hard to debug in <a href="http://nodejs.org">node.js</a>.  If module <code>A</code> <code>requires('B')</code> before it has finished setting up it's exports, and then module <code>B</code> <code>requires('A')</code>, it will get back an empty object instead what <code>A</code> may have intended to export.  It makes logical sense that if the export of <code>A</code> wasn't setup, requiring it in <code>B</code> results in an empty export object.  All the same, it can be a pain to debug, and not inherently obvious to developers used to having those circular dependencies handled automatically.  Fortunately, there are rather simple approaches to resolving the issue.\n\n</p>	Оригинал статьи находится <a href="http://selfcontained.us/2012/05/08/node-js-circular-dependencies/">здесь</a><hr>\n\n<div class="content"><p>Circular Dependencies in modules can be tricky, and hard to debug in <a href="http://nodejs.org">node.js</a>.  If module <code>A</code> <code>requires('B')</code> before it has finished setting up it's exports, and then module <code>B</code> <code>requires('A')</code>, it will get back an empty object instead what <code>A</code> may have intended to export.  It makes logical sense that if the export of <code>A</code> wasn't setup, requiring it in <code>B</code> results in an empty export object.  All the same, it can be a pain to debug, and not inherently obvious to developers used to having those circular dependencies handled automatically.  Fortunately, there are rather simple approaches to resolving the issue.\n\n</p>\n<h2>example.broken() === true</h2>\n<p>Let's define a broken scenario to clearly illustrate the issue.  Module <code>A</code> delegates to an instance of Module <code>B</code> to <code>do some important stuff()</code>.\n\n</p>\n<h3>Module A</h3>\n<pre><code class="lang-javascript"><span class="keyword">var</span> B = <span class="keyword">require</span>(<span class="string">'./B'</span>),\n    id,\n    bInstance;\n\n<span class="keyword">var</span> A = module.exports = {\n    init : <span class="keyword">function</span>(val) {\n        id = val;\n        bInstance = <span class="keyword">new</span> B();\n        <span class="keyword">return</span> <span class="keyword">this</span>;\n    },\n\n    doStuff : <span class="keyword">function</span>() {\n        bInstance.stuff();\n        <span class="keyword">return</span> <span class="keyword">this</span>;\n    },\n\n    getId : <span class="keyword">function</span>() {\n        <span class="keyword">return</span> id;\n    }\n};</code></pre>\n<h3>Module B</h3>\n<pre><code class="lang-javascript"><span class="keyword">var</span> A = <span class="keyword">require</span>(<span class="string">'./A'</span>);\n\n<span class="keyword">var</span> B = module.exports = <span class="keyword">function</span>(){\n    <span class="keyword">return</span> {\n        stuff : <span class="keyword">function</span>() {\n            console.log(<span class="string">'I got the id: '</span>, A.getId());\n        }\n    };\n};</code></pre>\n<h3>Tie them together</h3>\n<pre><code class="lang-javascript"><span class="keyword">require</span>(<span class="string">'./A.js'</span>)\n    .init(<span class="number">1234</span>)\n    .doStuff();</code></pre>\n<p>With this you'll end up with an error:\n</p>\n<pre><code class="lang-javascript">TypeError: Object <span class="comment">#&lt;Object&gt; has no method 'getId'</span>\n    at Object.stuff (/Users/bharris/workspace/circular-dep/B.js:<span class="number">7</span>:<span class="number">36</span>)\n    at Object.doStuff (/Users/bharris/workspace/circular-dep/A.js:<span class="number">18</span>:<span class="number">13</span>)\n    at Object.&lt;anonymous&gt; (/Users/bharris/workspace/circular-dep/test.js:<span class="number">4</span>:<span class="number">3</span>)</code></pre>\n<p>The issue is that when <code>A</code> is required at the top of <code>B</code>, it ends up being an empty object, which doesn't have a <code>getId</code> method.\n\n</p>\n<h2>example.solutions().length === 2</h2>\n<p>I'll explain two simple solutions to this issue:\n\n</p>\n<ul>\n<li><a href="#delay">delay invocation of dependency until runtime</a></li>\n<li><a href="#inject">replace circular dependency with dependency injection</a></li>\n</ul>\n<p><a name="delay"></a>\n</p>\n<h2>delay invocation of dependency until runtime</h2>\n<p>If we move the require statements to where they are needed at runtime, it will delay the execution of them, allowing for the exports to have been created properly.  In this example, we can get away with simply moving the <code>require('./B')</code> statement.\n\n</p>\n<h3>Module A</h3>\n<pre><code class="lang-javascript"><span class="keyword">var</span> id,\n    bInstance;\n\n<span class="keyword">var</span> A = module.exports = {\n    init : <span class="keyword">function</span>(val) {\n        id = val;\n        bInstance = <span class="keyword">new</span> <span class="keyword">require</span>(<span class="string">'./B'</span>)();\n        <span class="keyword">return</span> <span class="keyword">this</span>;\n    },\n\n    doStuff : <span class="keyword">function</span>() {\n        bInstance.stuff();\n        <span class="keyword">return</span> <span class="keyword">this</span>;\n    },\n\n    getId : <span class="keyword">function</span>() {\n        <span class="keyword">return</span> id;\n    }\n};</code></pre>\n<p>This feels like a bit of bandaid to this particular problem, but perhaps is the right solution in some cases.\n\n</p>\n<p><a name="inject"></a>\n</p>\n<h2>replace circular dependency with dependency injection</h2>\n<p>The only dependecy that <code>B</code> currently has on <code>A</code> is an id property it needs access to.  We could just pass the id into the constructor of <code>B</code>, but let's assume <code>A</code> is more significant to the operations <code>B</code> must perform, and a proper reference is required.  If we inject that dependency we'll allow for a loose coupling between the two modules, and have a slightly more elegant solution.  Zing!\n\n</p>\n<h3>Module A</h3>\n<pre><code class="lang-javascript"><span class="keyword">var</span> B = <span class="keyword">require</span>(<span class="string">'./B'</span>),\n    id,\n    bInstance;\n\n<span class="keyword">var</span> A = module.exports = {\n    init : <span class="keyword">function</span>(val) {\n        id = val;\n        bInstance = <span class="keyword">new</span> B(<span class="keyword">this</span>);\n        <span class="keyword">return</span> <span class="keyword">this</span>;\n    },\n\n    getId : <span class="keyword">function</span>() {\n        <span class="keyword">return</span> id;\n    },\n\n    doStuff : <span class="keyword">function</span>() {\n        bInstance.stuff();\n        <span class="keyword">return</span> <span class="keyword">this</span>;\n    }\n};</code></pre>\n<h3>Module B</h3>\n<pre><code class="lang-javascript"><span class="keyword">var</span> B = module.exports = <span class="keyword">function</span>(val){\n    <span class="keyword">var</span> dependency = val;\n    <span class="keyword">return</span> {\n        stuff : <span class="keyword">function</span>() {\n            console.log(<span class="string">'I got the id: '</span>, dependency.getId());\n        }\n    };\n\n};</code></pre>\n<h3>#winning</h3>\n<pre><code class="lang-javascript">DependencyInjection\n    .merge(LooseCoupling)\n    .attach($);</code></pre>\n<p>I put my <code>$</code> on <a href="http://en.wikipedia.org/wiki/Dependency_injection">dependency injection</a> and <a href="http://en.wikipedia.org/wiki/Loose_coupling">loose coupling</a>.\n\n</p>\n\n</div>	0	0	0	f	learn more >>>	0
3	1	1	2016-01-26 14:10:18.358245	{4,5}	{}	JS жаргон: 10 терминов, которые вы должны знать 	\nFrom currying to closures there are quite a number of JavaScript jargons (special words used within the field) knowing which will not only help you increase your vocabulary but understand JavaScript better. Jargons are normally found in documentations and technical articles. But some of them like closures are pretty standard things to know about. Knowing what the word itself mean can help you know the concept it is named for better.	Оригинал находится здесь: <a href="http://www.hongkiat.com/blog/javascript-jargon/">http://www.hongkiat.com/blog/javascript-jargon/</a><br><br>\nЯ рассчитываю прикрутить возможность коллективного перевода, а пока собираю статьи, достойные внимания. Ниже - одна из них. <hr>\n<div class="entry-content-inner intxt">\n\t\t<p>From <em>currying</em> to <em>closures</em> there are quite a number of JavaScript jargons (special words used within the field) knowing which will not only help you increase your vocabulary but understand JavaScript better. <strong>Jargons are normally found in documentations and technical articles</strong>. But some of them like <em>closures</em> are pretty standard things to know about. Knowing what the word itself mean can help you know the concept it is named for better.</p>\n<br>\n\n<img src="http://media02.hongkiat.com/javascript-jargon/javascript-jargons.jpg" width="100%" height="auto">\n<br><br>\n<p>This post is the compilation of 10 such terms with <strong>their meaning </strong>and<strong> the context in which they are used</strong> in JavaScript. If you’re a beginner then this list has got you covered with the basics like <em>hoisting</em>. At the same time less-known or less-understood terms are also included in there. </p>\n<ol>\n<li><a href="#1_Arity">Arity</a></li>\n<li><a href="#2_Anonymous">Anonymous</a></li>\n<li><a href="#3_Closure">Closure</a></li>\n<li><a href="#4_Currying">Currying</a></li>\n<li><a href="#5_Hoisting">Hoisting</a></li>\n<li><a href="#6_Mutation">Mutation</a></li>\n<li><a href="#7_Pragma">Pragma</a></li>\n<li><a href="#8_Sentinel">Sentinel</a></li>\n<li><a href="#9_Vanilla">Vanilla</a></li>\n<li><a href="#10_Variadic">Variadic</a></li>\n</ol>\n<h4><a name="1_Arity"></a>1. Arity</h4>\n<p><em>Arity</em> (from Latin) is the term used to refer to the number of arguments or operands in a function or operation respectively. You’re most likely to come across this word in the realm of JavaScript when it is used to mention the <strong>number of arguments expected by a JavaScript function</strong>.</p>\n<p>There  is even a property named <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arity">arity</a>, of the <code>Function</code> object that returns the number of expected arguments in a function. It is now obsolete though and replaced by <code>length</code>.</p>\n<p>The following function has an arity of 3.</p>\n<div><div id="highlighter_265682" class="syntaxhighlighter  javascript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="javascript keyword">function</code> <code class="javascript plain">getName(first, middle, last){</code></div><div class="line number2 index1 alt1"><code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="javascript keyword">return</code> <code class="javascript plain">first+</code><code class="javascript string">' '</code><code class="javascript plain">+ middle +</code><code class="javascript string">' '</code><code class="javascript plain">+last;</code></div><div class="line number3 index2 alt2"><code class="javascript plain">}</code></div></div></td></tr></tbody></table></div></div>\n<h4><a name="2_Anonymous"></a>2. Anonymous</h4>\n<p><em>Anonymous</em> is an adjective. When something or someone is referred to as anonymous it means that thing’s or person’s name is unidentified. Likewise in JavaScript an anonymous function is the one that is not identified by a name.</p>\n<div><div id="highlighter_170296" class="syntaxhighlighter  javascript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="javascript plain">(</code><code class="javascript keyword">function</code> <code class="javascript plain">(){</code></div><div class="line number2 index1 alt1"><code class="javascript spaces">&nbsp;&nbsp;</code><code class="javascript comments">//body</code></div><div class="line number3 index2 alt2"><code class="javascript plain">})();</code></div></div></td></tr></tbody></table></div></div>\n<p>Above is an <a href="http://www.hongkiat.com/blog/javascript-functions/">IIFE</a> (Immediately Invoked Function Expression). The function in it is anonymous since it doesn’t have a name. Now, take a look at the one below.</p>\n<div><div id="highlighter_367283" class="syntaxhighlighter  javascript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="javascript keyword">var</code> <code class="javascript plain">foo = </code><code class="javascript keyword">function</code><code class="javascript plain">() {</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="javascript plain">};</code></div></div></td></tr></tbody></table></div></div>\n<p>That is also said to be an anonymous function since there is no name after the key word <code>function</code>.</p>\n<p>A little bit of doubt  rises in the correctness of the use of the word "anonymous". With IIFE, the function gets called right away, no name involved whereas, to call the latter function the syntax <code>foo()</code> is used.</p>\n<p>It’s like we christened a nameless function with the name ‘foo’ and called it using that. Does that count as anonymous? I don’t know, I’ll leave that to the English experts. But, my confusion aside, they both are indeed referred to as anonymous function.</p>\n<h4><a name="3_Closure"></a>3. Closure</h4>\n<p>Here’s one of the definitions from oxford dictionary for <em>closure</em>: "<em>A thing that closes or seals something, such as a cap or tie</em>."</p>\n<p>In JavaScript, closure is an inner function, that is accessible outside of its outer function’s scope, with its connection to the outer function’s variables still intact.</p>\n<p>To explain things (maybe not accurately but simply enough), consider <em>closure</em> as a waiter in a restaurant. A lot of things happen inside a restaurant kitchen, where we are not allowed to enter or see. But how are we supposed to get our food then?</p>\n<p>That is where waiters come in. We call them, order the food, and then they’ll go to the kitchen, inform the chefs of the orders, and bring it to us when the order is ready. This way we’ve not broken any "rules" and can still manage to grab a meal.</p>\n<p>The waiter is someone who is able to take our order into the kitchen and return with the food. JavaScript <em>closures</em> are similar to that, they are able to <strong>take our parameters </strong>and<strong> bring back us variables</strong> (references to those variables, to be precise) from inside a function that we aren’t allowed in.</p>\n<div><div id="highlighter_88171" class="syntaxhighlighter  javascript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="javascript keyword">function</code> <code class="javascript plain">order() {</code></div><div class="line number2 index1 alt1"><code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="javascript keyword">var</code> <code class="javascript plain">food;&nbsp;&nbsp; </code></div><div class="line number3 index2 alt2"><code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="javascript keyword">function</code> <code class="javascript plain">waiter(order) {</code></div><div class="line number4 index3 alt1"><code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="javascript plain">chef(order);</code></div><div class="line number5 index4 alt2"><code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="javascript keyword">return</code> <code class="javascript plain">food;</code></div><div class="line number6 index5 alt1"><code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="javascript plain">}</code></div><div class="line number7 index6 alt2"><code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="javascript keyword">function</code> <code class="javascript plain">chef(order) {</code></div><div class="line number8 index7 alt1"><code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="javascript keyword">if</code> <code class="javascript plain">(order === </code><code class="javascript string">'pasta'</code><code class="javascript plain">) {</code></div><div class="line number9 index8 alt2"><code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="javascript plain">food = [</code><code class="javascript string">'pasta'</code><code class="javascript plain">, </code><code class="javascript string">'gravy'</code><code class="javascript plain">, </code><code class="javascript string">'seasoning'</code><code class="javascript plain">];</code></div><div class="line number10 index9 alt1"><code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="javascript plain">cook();</code></div><div class="line number11 index10 alt2"><code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="javascript plain">}</code></div><div class="line number12 index11 alt1"><code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="javascript plain">}</code></div><div class="line number13 index12 alt2"><code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="javascript keyword">function</code> <code class="javascript plain">cook() { food.push(</code><code class="javascript string">'cooked'</code><code class="javascript plain">); }</code></div><div class="line number14 index13 alt1"><code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="javascript keyword">return</code> <code class="javascript plain">waiter;</code></div><div class="line number15 index14 alt2"><code class="javascript plain">}</code></div><div class="line number16 index15 alt1"><code class="javascript keyword">var</code> <code class="javascript plain">myOrder = order();</code></div><div class="line number17 index16 alt2"><code class="javascript plain">console.log(myOrder(</code><code class="javascript string">'pasta'</code><code class="javascript plain">));</code></div><div class="line number18 index17 alt1"><code class="javascript comments">// Array [ "pasta", "gravy", "seasoning", "cooked" ]</code></div></div></td></tr></tbody></table></div></div>\n<p>As you can see from the above code, everything apart from <code>waiter</code> and its return value from inside the order function isn’t exposed to the outside world.</p>\n<h4><a name="4_Currying"></a>4. Currying</h4>\n<p>The effect, named after <a href="https://en.wikipedia.org/wiki/Haskell_Curry">Haskell Curry</a>, refers to <strong>using multiple functions with single arguments</strong>, in place of a single function with multiple arguments. Let’s see the <code>add</code> functions below for example.</p>\n<div><div id="highlighter_721109" class="syntaxhighlighter  javascript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="javascript keyword">function</code> <code class="javascript plain">addx(x){</code></div><div class="line number2 index1 alt1"><code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="javascript keyword">function</code> <code class="javascript plain">addy(y){</code></div><div class="line number3 index2 alt2"><code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="javascript keyword">return</code> <code class="javascript plain">x+y;</code></div><div class="line number4 index3 alt1"><code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="javascript plain">}</code></div><div class="line number5 index4 alt2"><code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="javascript keyword">return</code> <code class="javascript plain">addy</code></div><div class="line number6 index5 alt1"><code class="javascript plain">}</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="javascript keyword">function</code> <code class="javascript plain">add(x,y){</code></div><div class="line number9 index8 alt2"><code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="javascript keyword">return</code><code class="javascript plain">(x+y);</code></div><div class="line number10 index9 alt1"><code class="javascript plain">}</code></div><div class="line number11 index10 alt2">&nbsp;</div><div class="line number12 index11 alt1"><code class="javascript plain">console.log(addx(3)(4)); \\\\7</code></div><div class="line number13 index12 alt2"><code class="javascript plain">console.log(add(3,4)); \\\\7</code></div></div></td></tr></tbody></table></div></div>\n<p>Both of the functions return the same result. The function <code>addx</code> accepts a parameter <code>x</code> while returning <code>addy</code> which in turn accepts the <code>y</code> value, performs the addition with <code>x</code> and returns the sum.</p>\n<p>The function <code>add</code> simply takes both <code>x</code> and <code>y</code> at the same time, performs the addition and returns the sum. So far the first function might not seem very useful, until…</p>\n<div><div id="highlighter_454609" class="syntaxhighlighter  javascript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="javascript keyword">var</code> <code class="javascript plain">add4 = addx(4);</code></div><div class="line number2 index1 alt1"><code class="javascript plain">console.log(add4(8)); </code><code class="javascript comments">//12</code></div><div class="line number3 index2 alt2"><code class="javascript plain">console.log(add4(6)); </code><code class="javascript comments">//10</code></div><div class="line number4 index3 alt1"><code class="javascript plain">console.log(add4(-74)); </code><code class="javascript comments">//-70</code></div></div></td></tr></tbody></table></div></div>\n<p>Now, the former function suddenly gets interesting. In currying, you can always fix a step in a sequence of operations like the addition of 4 from the above code, which is helpful when one of the variables used in the operation is always the same.</p>\n<h4><a name="5_Hoisting"></a>5. Hoisting</h4>\n<p>Hoist means to raise something. <em>Hoisting</em> in JavaScript also means the same and what gets raised is the declaration (variable &amp; function declarations).</p>\n<p>Declarations are where variables and functions are created with keywords <code>var</code>(not for global) and <code>function</code>.</p>\n<p>It doesn’t matter where you type the code to declare a function or variable, during evaluation all the declarations are moved up inside the scope where they reside (except for in strict mode). Hence, it is possible to write a working code with the code for function call placed before function declaration.</p>\n<div><div id="highlighter_728387" class="syntaxhighlighter  javascript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="javascript keyword">var</code> <code class="javascript plain">name = </code><code class="javascript string">'Velma'</code><code class="javascript plain">;</code></div><div class="line number2 index1 alt1"><code class="javascript plain">console.log(sayCatchPhrase(name)); </code><code class="javascript comments">//"Jinkies!"</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="javascript keyword">function</code> <code class="javascript plain">sayCatchPhrase(name) {</code></div><div class="line number5 index4 alt2"><code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="javascript plain">phrases = {</code></div><div class="line number6 index5 alt1"><code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="javascript string">'Fred Flintstone'</code><code class="javascript plain">: </code><code class="javascript string">'Yabba dabba doo!'</code><code class="javascript plain">,</code></div><div class="line number7 index6 alt2"><code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="javascript string">'Velma'</code><code class="javascript plain">: </code><code class="javascript string">'Jinkies!'</code><code class="javascript plain">,</code></div><div class="line number8 index7 alt1"><code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="javascript string">'Razor'</code><code class="javascript plain">: </code><code class="javascript string">'Bingo!'</code><code class="javascript plain">,</code></div><div class="line number9 index8 alt2"><code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="javascript string">'He-Man'</code><code class="javascript plain">: </code><code class="javascript string">'I Have the Power'</code></div><div class="line number10 index9 alt1"><code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="javascript plain">};</code></div><div class="line number11 index10 alt2"><code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="javascript keyword">return</code> <code class="javascript plain">phrases[name];</code></div><div class="line number12 index11 alt1"><code class="javascript plain">}</code></div></div></td></tr></tbody></table></div></div>\n<h4><a name="6_Mutation"></a>6. Mutation</h4>\n<p>Mutation means change or modification. If you ever come across the word mutation in JavaScript it is probably referring to the changes that DOM elements went through.</p>\n<p>There is even an API called MutationObserver to keep an eye out for the DOM mutations like <strong>addition of child elements</strong> or <strong>changes to the element’s attributes</strong>. (You can read more about <a href="http://www.hongkiat.com/blog/mutationobserver-api/http://www.hongkiat.com/blog/mutationobserver-api/">MutationObserver</a> in my post.)</p>\n<h4><a name="7_Pragma_151"></a>7. Pragma</h4>\n<p><em>Pragma</em> is short for pragmatic information. In plain English, pragmatic is an adjective that means sensible and practical. In programming, <em>pragma</em> refers to the code that consist of useful information on <strong>how a compiler or interpreter or assembler should process the program</strong>.</p>\n<p>It does not contribute anything to the programming language itself and its syntax may vary. They only affect the compiler behavior. JavaScript also has <a href="http://www-archive.mozilla.org/js/language/js20-2002-04/core/pragmas.html">few pragmas</a>, one of them is <code>strict</code>.</p>\n<div><div id="highlighter_785737" class="syntaxhighlighter  javascript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="javascript string">"use strict"</code><code class="javascript plain">;</code></div></div></td></tr></tbody></table></div></div>\n<p>By the above pragma, the JavaScript code will be executed in strict mode. In strict mode, bad syntax is not allowed, <em>hoisting</em> is not done, silent errors are shown, etc. It helps in <strong>writing a more secure and optimized JavaScript code</strong>.</p>\n<h4><a name="8_Sentinel"></a>8. Sentinel</h4>\n<p><em>Sentinels</em> are soldiers who stand guard (Remember the ones from X-Men?). In programming, <em>sentinels</em> are values that are used to indicate the end of a loop or process. They can also be called "flags".</p>\n<p>You can use any reasonable value as a <em>sentinel</em>. Here’s an example of <em>sentinels</em> used in JavaScript; the <code>indexOf</code> method which returns -1 (the sentinel value) when the search value is not found in the targeted string. Below is a function that returns the position of an array value and if value is not found, returns -1.</p>\n<div><div id="highlighter_21982" class="syntaxhighlighter  javascript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="javascript keyword">function</code> <code class="javascript plain">getPos(ary, val) {</code></div><div class="line number2 index1 alt1"><code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="javascript keyword">var</code> <code class="javascript plain">i=0, len=ary.length;&nbsp;&nbsp;&nbsp; </code></div><div class="line number3 index2 alt2"><code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="javascript keyword">for</code><code class="javascript plain">(;i&lt;len;i++){</code></div><div class="line number4 index3 alt1"><code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="javascript keyword">if</code><code class="javascript plain">(ary[i]===val) </code><code class="javascript keyword">return</code> <code class="javascript plain">i+1;</code></div><div class="line number5 index4 alt2"><code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="javascript plain">}&nbsp;&nbsp;&nbsp; </code></div><div class="line number6 index5 alt1"><code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="javascript keyword">return</code> <code class="javascript plain">-1;</code></div><div class="line number7 index6 alt2"><code class="javascript plain">}</code></div><div class="line number8 index7 alt1"><code class="javascript plain">console.log(getPos([</code><code class="javascript string">'r'</code><code class="javascript plain">,</code><code class="javascript string">'y'</code><code class="javascript plain">,</code><code class="javascript string">'w'</code><code class="javascript plain">],</code><code class="javascript string">'y'</code><code class="javascript plain">)); </code><code class="javascript comments">//2</code></div><div class="line number9 index8 alt2"><code class="javascript plain">console.log(getPos([</code><code class="javascript string">'r'</code><code class="javascript plain">,</code><code class="javascript string">'y'</code><code class="javascript plain">,</code><code class="javascript string">'w'</code><code class="javascript plain">],</code><code class="javascript string">'g'</code><code class="javascript plain">)); </code><code class="javascript comments">//-1</code></div></div></td></tr></tbody></table></div></div>\n<h4><a name="9_Vanilla"></a>9. Vanilla</h4>\n<p>I think everyone’s first ice cream flavor must’ve been vanilla. I also think that not only in ice cream, but in pretty much every sweet dish vanilla kind of became <em>the</em> standard flavor. I’ve seen quite a few cake recipes where they add at least one drop of it into the mix – just to increase the flavor.</p>\n<p>And that’s what <em>vanilla</em> is, a <strong>traditional standard flavor</strong>. <em>Vanilla</em> JavaScript is referred to the standard JavaScript – no framework. Vanilla in fact is not only used to describe the standard version of JavaScript but also other languages like CSS.</p>\n<h4><a name="10_Variadic"></a>10. Variadic</h4>\n<p><em>Variadic</em> is an adjective created by joining "variable" and "adicity". "Adicity" is from ancient Greek, with a meaning that is the same as the Latin word "arity" (Item 1 in this list). Thus, the term <em>variadic</em> is used to <strong>express something that has variable number of arguments</strong>.</p>\n<p>In JavaScript, a <em>variadic</em> function takes in any number of arguments. It can be created using <code>arguments</code> property, <code>apply</code> method and since ES6, the spread operator. Below is an example using a spread operator.</p>\n<div><div id="highlighter_383174" class="syntaxhighlighter  javascript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="javascript keyword">function</code> <code class="javascript plain">test(...a){</code></div><div class="line number2 index1 alt1"><code class="javascript spaces">&nbsp;&nbsp;</code><code class="javascript plain">console.log(a);</code></div><div class="line number3 index2 alt2"><code class="javascript plain">}</code></div><div class="line number4 index3 alt1"><code class="javascript plain">test(</code><code class="javascript string">'a'</code><code class="javascript plain">,</code><code class="javascript string">'b'</code><code class="javascript plain">,</code><code class="javascript string">'c'</code><code class="javascript plain">,8,[56,-89]);</code></div><div class="line number5 index4 alt2"><code class="javascript comments">//output is Array [ "a", "b", "c", 8, Array[2] ]</code></div></div></td></tr></tbody></table></div></div>\n\t\t</div>	0	0	0	f	more>>>	0
4	1	1	2016-01-26 17:27:52.90537	{4,5}	{}	Working with JavaScript AST	Ever wondered how do those JavaScript transpilers actually work? Let’s take the most popular one: Babel. The transpiler is a big deal, especially now with recently introduced support for transformation plugins. This means everyone can create their own transformations for crazy and powerful things. There’s actually a bunch of official plugins on GitHub and even more in the wild. In order to be able to create your own plugin, you need to learn about JavaScript AST. That’s what we are going to do in this article.	<header class="post-header">\n            <section class="post-meta">\n                <time class="post-date" datetime="2015-08-14">14 August 2015</time> \n            </section>\n        </header>\n<section class="post-content">\n            <p>Ever wondered how do those JavaScript transpilers actually work? Let’s take the most popular one: Babel. The transpiler is a big deal, especially now with recently introduced support for transformation <a href="https://babeljs.io/docs/advanced/plugins/">plugins</a>. This means everyone can create their own transformations for crazy and powerful things. There’s actually a bunch of <a href="https://github.com/babel-plugins">official plugins</a> on GitHub and even <a href="https://www.npmjs.com/search?q=babel-plugin">more in the wild</a>. In order to be able to create your own plugin, you need to learn about JavaScript AST. That’s what we are going to do in this article.</p>\n\n<h2 id="abstractsyntaxtree">Abstract Syntax Tree</h2>\n\n<blockquote>\n  <p>In computer science, an abstract syntax tree (AST), or just syntax tree, is a tree representation of the abstract syntactic structure of source code written in a programming language. Each node of the tree denotes a construct occurring in the source code. <a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">Wikipedia</a></p>\n</blockquote>\n\n<p>In other words, AST is a structured description of the source code. In JavaScript world, there’s a specification which describes how JS AST should look like. It’s called <a href="https://github.com/estree/estree">ESTree</a>. This is a fundamental knowledge you need if you want to be able to read a syntax tree. <a href="http://felix-kling.de/esprima_ast_explorer/"><em>JS AST Explorer</em></a> will help a lot. It’s an interactive tool for visualizing and transforming code, mainly for learning purposes. Try to put in some code and explore the generated syntax tree. For example, a single number character <code>1</code> in AST format would look like this:</p>\n\n<pre><code class="json hljs">{\n  "<span class="hljs-attribute">range</span>": <span class="hljs-value">[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>]</span>,\n  "<span class="hljs-attribute">type</span>": <span class="hljs-value"><span class="hljs-string">"ExpressionStatement"</span></span>,\n  "<span class="hljs-attribute">expression</span>": <span class="hljs-value">{\n    "<span class="hljs-attribute">range</span>": <span class="hljs-value">[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>]</span>,\n    "<span class="hljs-attribute">type</span>": <span class="hljs-value"><span class="hljs-string">"Literal"</span></span>,\n    "<span class="hljs-attribute">value</span>": <span class="hljs-value"><span class="hljs-number">1</span></span>,\n    "<span class="hljs-attribute">raw</span>": <span class="hljs-value"><span class="hljs-string">"1"</span>\n  </span>}\n</span>}\n</code></pre>\n\n<p>Every object here represents an AST node and it has a number of parameters which describe a node. The most interesting one is <code>type</code> field. These are types described in the ESTree spec, so you can always check it out to see what parameters are required to construct a node of a particular type. In this case we have <code>ExpressionStatement</code> node, which represents a statement that is an expression, the expression itself being a single <code>Literal</code> node with value of <code>1</code>.</p>\n\n<h2 id="knownapplications">Known applications</h2>\n\n<p>You may wonder whether AST is being used for transcompilation only. Not just for that. In fact, some tools you are using in your editor are based on AST. JavaScript linters like <em>ESLint</em> are taking advantages of syntax tree representation of the source code in order to analyze it and report errors as you write. Syntax highlighting is sometimes done with AST as well. It can be used for various kinds of optimizations, which we will take a look into right now. Last but not least, application is cross-compilation from one language to another. Thanks to AST there’s ClojureScript and it can be cross-compiled into JavaScript <a href="http://clojurescript.net/">in the browser</a> on the go.</p>\n\n<p>Ok, now that we understand AST and we can read it, how can we actually transform the code into something awesome?</p>\n\n<h2 id="transpilingjavascript">Transpiling JavaScript</h2>\n\n<p>The transformation flow can be represented in three steps: parsing code into AST, transforming nodes and generate AST back into JavaScript. All of these steps are supplied with their corresponding tools, which are pretty straightforward to use. We will use <a href="https://github.com/marijnh/acorn"><em>Acorn</em></a> parser, <a href="https://github.com/estools/esrecurse"><em>Esrecurse</em></a> to recursively traverse the AST tree, <a href="https://github.com/benjamn/ast-types"><em>AST Types</em></a> to generate AST nodes and <a href="https://github.com/estools/escodegen"><em>Escodegen</em></a> to generate output.</p>\n\n<p>Let’s say we have a project with lots of computations and we want to decrease the number of math operations so the browser can do things a little faster. One way to achieve this is to precompile constant values. I’ll take a very simple case: variable assignment with a binary operation: <code>var x = 23 * 576;</code>. We want the operation to be evaluated as a single value and change the variable declaration to <code>const</code>, since it’s going to be a constant value.</p>\n\n<p>Let’s require all the tools.</p>\n\n<pre><code class="javascript hljs"><span class="hljs-keyword">var</span> acorn = <span class="hljs-built_in">require</span>(<span class="hljs-string">'acorn'</span>);  \n<span class="hljs-keyword">var</span> esrecurse = <span class="hljs-built_in">require</span>(<span class="hljs-string">'esrecurse'</span>);  \n<span class="hljs-keyword">var</span> t = <span class="hljs-built_in">require</span>(<span class="hljs-string">'ast-types'</span>).builders;  \n<span class="hljs-keyword">var</span> escodegen = <span class="hljs-built_in">require</span>(<span class="hljs-string">'escodegen'</span>);  \n</code></pre>\n\n<p>And parse JavaScript into AST.</p>\n\n<pre><code class="javascript hljs"><span class="hljs-keyword">var</span> ast = acorn.parse(<span class="hljs-string">'var x = 23 * 576;'</span>);  \n</code></pre>\n\n<p>Now the exciting part: finding and transforming the node we are interested in. <em>Esrecurse</em> is going to traverse the whole tree and visit nodes of the type we are interested in — <code>VariableDeclaration</code>. Since a single declaration can have multiple declarators (<code>var x = 1, y = 2;</code>), we need to iterate over them. Then we can extract both operands and an operator out of the expression, put them together and evaluate them. The result is passed down into the <code>Literal</code> type builder, which is assigned back to the variable declarator. The final step is to change the declaration from <code>var</code> to <code>const</code>.</p>\n\n<pre><code class="javascript hljs">esrecurse.visit(ast, {  \n  VariableDeclaration(node) {\n    node.declarations.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">d</span>) </span>{\n      <span class="hljs-keyword">var</span> left = d.init.left.value; <span class="hljs-comment">// 23</span>\n      <span class="hljs-keyword">var</span> right = d.init.right.value; <span class="hljs-comment">// 576</span>\n      <span class="hljs-keyword">var</span> operator = d.init.operator; <span class="hljs-comment">// *</span>\n\n      <span class="hljs-comment">// BinaryExpression -&gt; Literal</span>\n      d.init = t.literal(<span class="hljs-built_in">eval</span>(left + operator + right)); <span class="hljs-comment">// 23 * 576</span>\n    });\n    node.kind = <span class="hljs-string">'const'</span>; <span class="hljs-comment">// var -&gt; const</span>\n  }\n});\n</code></pre>\n\n<p>Turning AST back into JavaScript.</p>\n\n<pre><code class="javascript hljs"><span class="hljs-keyword">var</span> code = escodegen.generate(ast);  \n</code></pre>\n\n<p>That’s it, the output of <code>var x = 23 * 576;</code> will be <code>const x = 13248;</code>. This transformation will work for very specific cases because there are a lot of things it doesn’t take into account, but it’s still a good example of how and why using AST to transform JavaScript. Grab this <a href="https://gist.github.com/roman01la/fbe09b16e9cdb361e487">gist</a> with the above code and play around with it.</p>\n\n<p>Want to ship your own Babel plugin? Start with a sample <a href="https://github.com/RReverser/babel-plugin-hello-world">babel-plugin-hello-world</a> and don’t forget to write tests! Also, check out these cool Babel plugins: <a href="https://github.com/codemix/babel-plugin-closure-elimination">babel-plugin-closure-elimination</a>, which removes unnecessary closures and <a href="https://github.com/codemix/babel-plugin-macros">babel-plugin-macros</a> to create macros.</p>\n        </section>	0	0	0	f	more>>>	0
7	1	1	2016-01-27 15:44:20.752413	{4,5}	{}	The Node.js Way - How `require()` Actually Works	Almost any Node.js developer can tell you what the require() function does, but how many of us actually know how it works? We use it every day to load libraries and modules, but its behavior otherwise is a mystery.	Оригинал статьи находится <a href="http://fredkschott.com/post/2014/06/require-and-the-module-system/">здесь</a><hr>\n\n<div class="blog-post">\n      <header>\n        <h2>The Node.js Way - How `require()` Actually Works</h2>\n        \n      </header>\n        <p class="date">\n          June 9, 2014\n          <span style="color: #777;">(Updated December 18, 2014)</span>\n        </p>\n      \n\n<blockquote>\n<p><strong>Update July. 28, 2014:</strong> I just gave a talk at <a href="http://www.meetup.com/BayNode/">BayNode</a> on this exact subject, which includes a walkthrough of all the code discussed in this post. If talks &amp; slides are more your style, <a href="http://fredkschott.com/post/2014/07/module-js/">check it out</a>.\n<!-- --></p>\n</blockquote>\n\n<p>Almost any Node.js developer can tell you what the <code>require()</code> function does, but how many of us actually know how it works?  We use it every day to load libraries and modules, but its behavior otherwise is a mystery.</p>\n\n<p>Curious, I dug into Node core to find out what was happening under the hood. But instead of finding a single function, I ended up at the heart of Node’s module system: <code>module.js</code>. The file contains a surprisingly powerful yet relatively unknown core module that controls the loading, compiling, and caching of every file used. <code>require()</code>, it turned out, was just the tip of the iceberg.</p>\n\n<h3 id="module-js:1c7b09539349d942ecfae4f79bc4defd">module.js</h3>\n\n<pre class="code-block language-javascript"><code class=" language-javascript"><span class="token keyword">function</span> <span class="token function">Module</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> parent<span class="token punctuation">;</span>\n  <span class="token comment" spellcheck="true">// ...</span>\n</code></pre>\n\n<p>The Module type found in <code>module.js</code> has two main roles inside of Node.js. First, it provides a foundation for all Node.js modules to build off of. Each file is given a new instance of this base module on load, which persists even after the file has run. This is why we are able attach properties to <code>module.exports</code> and return them later as needed.</p>\n\n<p>The module’s second big job is to handle Node’s module loading mechanism. The stand-alone <code>require</code> function that we use is actually an abstraction over <code>module.require</code>, which is itself just a simple wrapper around <code>Module._load</code>. This load method handles the actual loading of each file, and is where we’ll begin our journey.</p>\n\n<h3 id="module-load:1c7b09539349d942ecfae4f79bc4defd">Module._load</h3>\n\n<pre class="code-block language-javascript"><code class=" language-javascript">Module<span class="token punctuation">.</span>_load <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> isMain<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment" spellcheck="true">// 1. Check Module._cache for the cached module.</span>\n  <span class="token comment" spellcheck="true">// 2. Create a new Module instance if cache is empty.</span>\n  <span class="token comment" spellcheck="true">// 3. Save it to the cache.</span>\n  <span class="token comment" spellcheck="true">// 4. Call module.load() with your the given filename.</span>\n  <span class="token comment" spellcheck="true">//    This will call module.compile() after reading the file contents.</span>\n  <span class="token comment" spellcheck="true">// 5. If there was an error loading/parsing the file,</span>\n  <span class="token comment" spellcheck="true">//    delete the bad module from the cache</span>\n  <span class="token comment" spellcheck="true">// 6. return module.exports</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n\n<p><code>Module._load</code> is responsible for loading new modules and managing the module cache. Caching each module on load reduces the number of redundant file reads and can speed up your application significantly. In addition, sharing module instances allows for singleton-like modules that can keep state across a project.</p>\n\n<p>If a module doesn’t exist in the cache, <code>Module._load</code> will create a new base module for that file. It will then tell the module to read in the new file’s contents before sending them to <code>module._compile</code>.[1]</p>\n\n<p>If you notice step #6 above, you’ll see that <code>module.exports</code> is returned to the user. This is why you use <code>exports</code> and <code>module.exports</code> when defining your public interface, since that’s exactly what <code>Module._load</code> and then <code>require</code> will return. I was surprised that there wasn’t more magic going on here, but if anything that’s for the better.</p>\n\n<h3 id="module-compile:1c7b09539349d942ecfae4f79bc4defd">module._compile</h3>\n\n<pre class="code-block language-javascript"><code class=" language-javascript">Module<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>_compile <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> filename<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment" spellcheck="true">// 1. Create the standalone require function that calls module.require.</span>\n  <span class="token comment" spellcheck="true">// 2. Attach other helper methods to require.</span>\n  <span class="token comment" spellcheck="true">// 3. Wraps the JS code in a function that provides our require,</span>\n  <span class="token comment" spellcheck="true">//    module, etc. variables locally to the module scope.</span>\n  <span class="token comment" spellcheck="true">// 4. Run that function</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n\n<p>This is where the real magic happens. First, a special standalone <code>require</code> function is created for that module. <em>THIS</em> is the require function that we are all familiar with. While the function itself is just a wrapper around <code>Module.require</code>, it also contains some lesser-known helper properties and methods for us to use:</p>\n\n<ul>\n<li><code>require()</code>: Loads an external module</li>\n<li><code>require.resolve()</code>: Resolves a module name to its absolute path</li>\n<li><code>require.main</code>: The main module</li>\n<li><code>require.cache</code>: All cached modules</li>\n<li><code>require.extensions</code>: Available compilation methods for each valid file type, based on its extension</li>\n</ul>\n\n<p>Once <code>require</code> is ready, the entire loaded source code is wrapped in a new function, which takes in  <code>require</code>, <code>module</code>, <code>exports</code>, and all other exposed variables as arguments. This creates a new functional scope just for that module so that there is no pollution of the rest of the Node.js environment.</p>\n\n<pre class="code-block language-javascript"><code class=" language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>exports<span class="token punctuation">,</span> require<span class="token punctuation">,</span> module<span class="token punctuation">,</span> __filename<span class="token punctuation">,</span> __dirname<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment" spellcheck="true">// YOUR CODE INJECTED HERE!</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n\n<p>Finally, the function wrapping the module is run. The entire <code>Module._compile</code> method is executed synchronously, so the original call to <code>Module._load</code> just waits for this code to run before finishing up and returning <code>module.exports</code> back to the user.</p>\n\n<h3 id="conclusion:1c7b09539349d942ecfae4f79bc4defd">Conclusion</h3>\n\n<p>And so we’ve reached the end of the require code path, and in doing so have come full circle by creating the very <code>require</code> function that we had begun investigating in the first place.</p>\n\n<p>If you’ve made it all this way, then you’re ready for the final secret: <code>require('module')</code>. That’s right, the module system itself can be loaded VIA the module system. INCEPTION. This may sound strange, but it lets userland modules interact with the loading system without digging into Node.js core. Popular modules like <a href="/posts/testing-essentials/">mockery and rewire</a> are built off of this.<sup>[2]</sup></p>\n\n<p>If you want to learn more, check out the <a href="https://github.com/joyent/node/blob/master/lib/module.js">module.js source code</a> for yourself. There is plenty more there to keep you busy and blow your mind. Bonus points for the first person who can tell me what ‘NODE_MODULE_CONTEXTS’ is and why it was added.</p>\n\n<hr>\n\n<p>[1] The <code>module._compile</code> method is only used for running JavaScript files. JSON files are simply parsed and returned via <code>JSON.parse()</code></p>\n\n<p>[2] However, both of these modules are built on private Module methods, like <code>Module._resolveLookupPaths</code> and <code>Module._findPath</code>. You could argue that this isn’t much better…</p>\n\n\n    </div>	0	0	0	f	learn more >>>	0
2	1	2	2015-12-31 05:07:52.274923	{2,1}	{6,4,5,2}	еще одна статья	просто тестируем вывод списка статей.	да, еще одна тестовая статья	1367	23	31.7000008	f	барух аба!	8
1	1	1	2016-01-28 14:48:37.354463	{1}	{2,5,8}	Что здесь происходит?	Ковыряю потихоньку свой хабр, с исходником и принцессами.<br> \nДобиваю постинг: комментарии и статьи, и выложу исходники на github.<br>\nТезисно, что ожидается на выходе:	<hr>\nКовыряю потихоньку свой хабр, с исходником и принцессами.  (регистрация уже работает - так что вливайтесь)<br>Добиваю постинг: комментарии и статьи, и выложу исходники на github. (собственно уже <a href="https://github.com/gonzazoid/openhabr">выложил</a>)\n<br>\nТезисно, что ожидается на выходе:\n<ul>\n<li>Проект не коммерческий, но реклама будет. На ленте один блок (справа вертикальный)- деньги идут в проект.  В статьях - два блока - с одного деньги идут в проект(небольшой горизонтальный), со второго(справа вертикальный) - автору статьи. Автор должен в настройках указать свой pub-id в google-adsense, он будет использоваться при выводе рекламного блока. Соответственно доход и прочую статистику автор публикации может смотреть в своем аккаунте в гугле. Озолотиться вряд ли получится, но какая то копейка капнет.</li>\n<li>движок сайта - открытый, если что то не нравится или чего то не хватает - форкаем, правим, пуллреквестим и, если требуется, делаем голосование за мердж реквеста</li>\n<li>интеграция с github и прочими реcурсами. Идея в том что бы статью можно было форкнуть, подправить и отправить на согласование правок с автором. А также совместная работа над статьей нескольких авторов. Тут надо думать.</li>\n<li>корпоративные блоги - будут. Бесплатно для компаний, но на общих правах со всеми участниками, только естественно прибыль с рекламы идет в проект.</li>\n<li>система голосования. Вот набросок из черновика: <br>\n<blockquote>формула начисления рейтинга\n\n1. плюсуя сообщение - пользователь плюсует автора сообщения, всех кто проголосовал за и минусует всех, кто проголосовал против (аналогично минусуя)\nкак считать? Складываем все плюсы и минусы. Плюсы распределятся в + плюсовавшим и в - минусовавшим. Минусы распределятся в + минусовавшим и в - плюсовавшим.\nОк. теперь, чем дальше от итогового значения был рейтинг при голосовании - тем больший вес общего улова забирает проголосовавший. То есть - если рейтинг был -5, чел плюсанул, рейтинг в итоге стал +20 и его еще раз кто то плюсанул - первый плюсанувший получит большую ответку чем последний\nпредлагаю сделать так. Вычисляем разницу между рейтингом в момент голосования и итоговым рейтингом. Это коэффициент отдачи. Все коэффициенты суммируются, итоговый вес голосования делится на сумму коэффициентов, получаем % голосования. Для каждого голоса это значение умножается на коэффициент голоса - это абсолютное значение обратки.\n<br><br>\nКарма - вычисляется медиана значения (точнее берем сумму и делим на время жизни пользователя) РЕЙТИНГА + кармы и какой то процент от нее добавляется к карме ежедневно. То есть карма все время растет либо падает, постоянно замедляясь, если ничего не делать (ряд сходится) Однако любой плюс ускоряет рост (замедляет падение), любой минус - ускоряет падение (замедляет рост)\n<br>Карма влияет на вес голоса, но не абсолютно. При голосовании берется не сумма голосов, а сумма карм проголосовавших. Таким образом авторитетный участник может порезвится со слабыми кармой но будет на равных с участниками чья карма (сумма карм) сопоставима с его.\n\nЗа один пост можно голосовать только один раз.\n</blockquote>\nЗаткнуть пользователя не вариант. Отрицательный рейтинг - пользователь перешел на темную сторону силы и получает бонусы в минусовании, полагаю это заставит сообщество не загонять в жесткий минус а держать на околонулевых значениях рейтинга. Влияет на возможность постинга статей, но не комментариев. По комментам - не нравится чел - заноси в личный блек лист. А вот попадание в блек листы может иметь последствия - чем больше людей занесло в игнор - тем реже чел может комментировать.\n</ul><hr>\nЭто все в общих чертах, по мере реализации будут и детали.<br>\n  Если кто хочет присоединиться - пишите пока на alloaolla@gmail.com.	203	12	73.5	f	давайте разберемся!	5
8	1	1	2016-01-28 14:48:37.354462	{4}	{}	Заметки по портированию расширений с Chrome на Firefox	Получил заказ на портирование расширения, накидываю заметки для последующей статьи	<ul>\n<li><a href="https://www.youtube.com/watch?v=-i9nNmCCFpA">вводный курс по портированию</a> (выступление Бориса Мосунова на 8-м митапе сообщества фронт-енд разработчиков 4front)</li>\n<li><a href="http://www.slideshare.net/chaykaborya/chrome-extension-firefox-extension">слайды к выступлению</a>\n</ul>\n<hr>\n<a href="http://stackoverflow.com/questions/12893981/logging-to-console-from-firefox-extension">источник</a><br>\n<h3>Logging to console from Firefox extension?</h3>\n<div class="post-text" itemprop="text">\n<p>You need to do 2 things:</p>\n\n<ol>\n<li><p><a href="https://blog.mozilla.org/addons/2013/03/27/changes-to-console-log-behaviour-in-sdk-1-14/">enable logging for addons</a></p>\n\n<p>• in about:config, add a new option "extensions.sdk.console.logLevel" and give it the value "all"</p>\n\n<p>• restart Firefox</p></li>\n<li><p>in Firefox open the <a href="https://developer.mozilla.org/en-US/docs/Tools/Browser_Console">Browser Console</a>:</p>\n\n<p>• Tools -&gt; Web developer -&gt; Browser console</p>\n\n<p>• NOTE: this is different from the usual Web Console used to debug web pages</p></li>\n</ol>\n\n<p>You should see addons logs there now.</p>\n    </div>\n<hr>\nВ Firefox нет понятия поп-ап страницы, есть Panel, которых можно создать сколько угодно, но - досадное недоразумение - это не аналог поп-апа в chrom-е, корый выполняется в том же контексте и с теми же правами, что и background, нет... Эти скрипты выполняются в iframe и в песочнице, что доставляет. \nПервое, с чем столкнулся - нет console.log. Исправил так:<br>\nв background.js:\n<pre><code class="javascript">\n//создаем popup-окно\nvar popup = require("sdk/panel").Panel({\n  contentURL: data.url("popup.html")\n  //contentURL: "http://ya.ru/"\n ,contentScriptFile: data.url("popup.js")\n ,width: 320, height: 320\n});\n\n//после этого принимаем заказы на console.log\npopup.port.on("console.log", function(message){\n    message = JSON.parse(message);\n    console.log.apply(null, message);\n});\n</code></pre>\nв popup.js:<br>\n<pre><code class="javascript">\nvar console = {};\nconsole.log = function() {\n    var args = (arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments));\n    self.port.emit("console.log", JSON.stringify(args));\n};\nconsole.log("popup started");\n</code></pre>\nНаблюдаем вывод не в консоли страницы а в консоли броузера - Разработка -> Консоль броузера (на маках <kbd>&#8679; + &#8984; + J</kbd>)<br>\nНе забываем аналогично реализовать console.warn, console.debug и console.error\n<br>\n<hr>\nинтересная приблуда попалась - <a href="https://github.com/jetpack-labs/chrome-tailor">Chrome Tailor</a><br>\n<i>Creates Firefox extensions from Google Chrome extensions.</i> Вот тут не согласен - зачем конвертить? там может быть бесчисленное число тонкостей. Нужен полифилл, позволяющий не думать о разнице в API,  а структуру можно и руками рихтануть, если требуется.<br>\nДавно не обновляется, с апреля 2015, да и список поддерживаемых API куцапый, но то что есть - надо распотрошить, может унесу в свой полифилл.<br>\nКстати там же - вполне неплохая попытка: <a href="https://github.com/jetpack-labs/chrome-tailor-jetpack">chrome-tailor-jetpack</a> (<i>Skeleton Firefox extension that can run a Chrome extension.</i>)\n <hr>\n\nНеплохая (хоть и старенькая) статья по самостоятельному хостингу расширений и обновлений: <a href="https://www.borngeek.com/firefox/automatic-firefox-extension-updates/">Automatic Firefox Extension Updates</a> и <a href="https://developer.mozilla.org/en-US/docs/Extension_Versioning,_Update_and_Compatibility">официальная документация</a>	0	0	0	f	хош келигиз >>>	0
10	1	1	2016-02-26 16:25:58.309578	{4,6}	{}	Описание структуры расширения Firefox	Я пытаюсь написать расширение Firefox, которое перехватывает определенные HTTP запросы и возвращает статичный контент без осуществления запроса (аналогично AdBlock)<br>\nЯ посмотрел уроки и у меня есть уже определенная структура приложения. Так же я разобрался с тем что мне надо использовать <a href="https://developer.mozilla.org/en/XPCOM_Interface_Reference/nsITraceableChannel">nsITraceableChannel API</a> и добавить observer, в принципе у меня есть образец кода.<br>\nПроблема в том что я не пойму - куда мне положить этот код? И когда мое расширение реально загружается и исполняется? 	Перевод <a href="http://stackoverflow.com/questions/11029560/understanding-firefox-extension-structure">http://stackoverflow.com/questions/11029560/understanding-firefox-extension-structure</a><br/><br/>\n\n<p>\nЯ пытаюсь написать расширение Firefox, которое перехватывает определенные HTTP запросы и возвращает статичный контент без осуществления запроса (аналогично AdBlock)<br>\nЯ посмотрел уроки и у меня есть уже определенная структура приложения. Так же я разобрался с тем что мне надо использовать <a href="https://developer.mozilla.org/en/XPCOM_Interface_Reference/nsITraceableChannel">nsITraceableChannel API</a> и добавить observer, в принципе у меня есть образец кода.<br>\nПроблема в том что я не пойму - куда мне положить этот код? И когда мое расширение реально загружается и исполняется? Исполняется ли оно постоянно и асинхронно где то в фоне или же загружается отдельно для каждой страницы?<br>\nДокументация по этой не теме не то что бы очень понятная. Этому расширению не нужен GUI, так что я думю мне не надо оформлять  XUL файлы (или надо?) Я попытался написать XPCOM компонент (не уверен что я это правильно реализовал) и зарегистрировать его в  <code>chrome.manifest</code>, но похоже это не работает.<br>\nМожет кто ни будь точно объяснить схему работы Firefox расширения и куда мне надо положить свой Javascript код что бы мониторить запросы? Может есть какие идеи что не так в моем расширении? И какя вообще разница между addons, extensions и plugins?\n</p>\n<hr>\n<p>\nРазницу между расширениями, аддонами и плагинами вы можете посмотреть в этом топике: <a href="http://stackoverflow.com/questions/7575658/firefox-add-on-vs-extensions-vs-plugins/7580811#7580811">http://stackoverflow.com/questions/7575658/firefox-add-on-vs-extensions-vs-plugins/7580811#7580811</a>. Но в общем и целом у Вас верное представление по теме.<br/>\nПроблема заключается в том что существует три разных типа расширений,  существенно различающихся между собой:\n<ul>\n<li>\nКлассическое расширение (требует перезапуска) - оно обычно <a href="https://developer.mozilla.org/en/XUL_Overlays">перекрывает окно браузера</a> и исполняет код из этого перекрытия. Поскольку перекрытие (overlay) идет по одному на окно получаем столько же инстансов кода, сколько у нас открыто окон. Тем не менее, классическое расширение может также зарегистрироваться как XPCOM компонент (<a href="https://developer.mozilla.org/en/XPCOM/XPCOM_changes_in_Gecko_2.0#JavaScript_components"> через <code>chrome.manifest</code> начиная с Gecko 2.0</a>) Этот компонент будет загружен при первом вызове и останется в памяти на всю сессию броузера. Вы возможно, захотите загрузить его при запуске броузера, тогда вы должны зарегистрировать его в <code>profile-after-change</code> категории и реализовать nsIObserver\n</li>\n<li>\nНе требующие перезапуска расширения, так же называемые <a href="https://developer.mozilla.org/en/Extensions/Bootstrapped_extensions">bootstrapped extensions</a>: они не могут регистрировать перекрытия (overlays), что делает работу с UI броузера немного более сложной. Вместо этого у них есть <code>bootstrap.js</code> скрипт, который загружается когда расширение активируется, этот контекст остается в памяти пока броузер не закроется или расширение не будет отключено. У вас также могут быть XPCOM компоненты в таких расширениях, но вам придется регистрировать их вручную (через <a href="https://developer.mozilla.org/en/XPCOM_Interface_Reference/nsIComponentRegistrar#registerFactory%28%29"> nsIComponentRegistrar.registerFactory()</a> и <a href="https://developer.mozilla.org/en/XPCOM_Interface_Reference/nsICategoryManager#addCategoryEntry%28%29"> nsICategoryManager.addCategoryEntry()</a>) Вам так же придется позаботиться о выгрузке (unregistering) компонента в случае если расширение будет отключено. Все это вам не нужно если вы хотите просто добавить observer, <a href="https://developer.mozilla.org/en/XPCOM_Interface_Reference/nsIObserverService#addObserver%28%29">nsIObserverService</a> принимает любой объект, реализующий nsIObserver, не обязательно зарегистрированный как XPCOM компонент. Главная боль заключается в следующем: большинство MDN примеров заточены под классические расширения и не обясняют, что надо делать в restartless расширениях.\n</li>\n<li>\nРасширения, основанные на <a href="https://addons.mozilla.org/en-US/developers/builder">Add-on SDK</a>: они основаны на фреймворке, который производит restartless расширения. Addon SDK имеет <a href="https://addons.mozilla.org/en-US/developers/docs/sdk/1.7/">собственное API</a>, которой сильно отличается от того, что вы обычно делаете в Firefox расширении, зато оно простое и как правило само заботится о выгрузке расширения, так что вам не надо этого делать вручную. Такие расширения состоят из набора модулей и вместе с main.js загружаются автоматически, при необходимости можно подгружать дополнительные модули. Однажды загруженный, модуль остается в памяти до тех пор пока расширение активно. Они запускаются в песочнице, но можно <a href="https://addons.mozilla.org/en-US/developers/docs/sdk/1.7/dev-guide/tutorials/chrome.html">выйти из песочницы</a> и получить прямой доступ к XPCOM. Но вы вместо этого скорее всего будете использовать <a href="https://addons.mozilla.org/en-US/developers/docs/sdk/1.7/packages/api-utils/observer-service.html"><code>observer-service</code> module</a>\n</li>\n</ul>\n</p>	0	0	0	f	читать дальше	0
11	1	1	2016-03-11 09:01:12.612186	{4}	{}	Автоматическое обновление расширений Firefox	Перевод, оригинал: <a href="https://www.borngeek.com/firefox/automatic-firefox-extension-updates/">Automatic Firefox Extension Updates</a>\n\nстатья старенькая, но вся информация актуальна и по сей день.\n\nРазработчики расширений Firefox конечно знают что при распространении расширений через  <a href="https://addons.mozilla.org/">официальный store</a> вы бесплатно получаете возможность автоматически обновлять свои расширения. Но что делать, если мы хотим сами хостить свое расширение на своем сайте? Как нам самим реализовать поддержку автоматических обновлений?	Перевод, оригинал: <a href="https://www.borngeek.com/firefox/automatic-firefox-extension-updates/">Automatic Firefox Extension Updates</a>\n\nстатья старенькая, но вся информация актуальна и по сей день.\n\nРазработчики расширений Firefox конечно знают что при распространении расширений через  <a href="https://addons.mozilla.org/">официальный store</a> вы бесплатно получаете возможность автоматически обновлять свои расширения. Но что делать, если мы хотим сами хостить свое расширение на своем сайте? Как нам самим реализовать поддержку автоматических обновлений?\n\n<h3>Подписывание расширений</h3>\nНачиная с третьей версии Firefox все обновления расширений должны предоставляться по надежным каналам. Раз уж мы решили самостоятельно хостить свое расширение, у нас есть два варианта что бы выполнить это требование:\n\n<ul>\n<li>Предоставлять обновления по защищенному (https) соединению</li>\n<li>Подписывать расширение электронной подписью</li>\n</ul>\nПервый вариант мы рассматривать не будем - в большинстве случаев это требует дополнительных затрат (надо купить SSL сертификат и иметь статичный IP /<i>сам не понял, к чему это, но из песни слов не выкинешь [прим. перев.]</i>/ ) Цифровая подпись напротив - бесплатна, легка в использовании и быстро реализуема. Ну давайте уже научимся ею пользоваться!\n\n<h3>Создаем пару приватный/публичный ключ</h3>\nПервый шаг в подписывании нашего расширения заключается в создании пары приватного/публичного ключа. Mozilla предоставляет утилиту <a href="https://developer.mozilla.org/en-US/docs/McCoy">McCoy</a> для этих целей. Не самая простая утилита в мире, так что ниже расписано как её готовить:\n\n<ul>\n<li>идем на сайт <a href="https://developer.mozilla.org/en-US/docs/McCoy">McCoy</a> и качаем подходящий пакет (есть версии для  Windows, Linux и Mac OS X)</li>\n<li>распаковываем пакет в удобную нам директорию</li>\n<li>запускаем приложение. При первом запуске оно предложит создать master password для защиты ключей. Создание такого пароля крайне настойчиво рекомендуется! При каждом последующем запуске McCoy он будет спрашивать этот пароль. </li>\n<li>Приложение запущено, выбираем в меню  Keys » Create New Key. Введите вменяемое имя своему ключу и нажмите Ok. Имейте в виду, даже если вы хотите хостить несколько расширений на своем сайте - вам достаточно будет одного ключа. </li>\n</ul>\nНу что же, ключи созданы, теперь необходимо обновить манифест расширения.\n\n<h3>обновляем  install.rdf </h3>\nПредполагается что вы знакомы с install.rdf, так что не будем тратить время на описание его структуры (если нет - вам <a href="https://www.borngeek.com/firefox/toolbar-tutorial/chapter-2/">сюда</a>). Для примера я использую install.rdf из <a href="https://www.borngeek.com/firefox/toolbar-tutorial/">Toolbar Tutorial</a>. Вот его исходный вариант:\n\n<source lang="XML">\n<?xml version="1.0"?>\n\n<RDF xmlns="http://www.w3.org/1999/02/22-rdf-syntax-ns#"\n     xmlns:em="http://www.mozilla.org/2004/em-rdf#">\n\n    <Description about="urn:mozilla:install-manifest">\n\n        <em:id>tuttoolbar@borngeek.com</em:id>\n        <em:name>Tutorial Toolbar</em:name>\n        <em:type>2</em:type>\n        <em:version>1.0</em:version>\n\n        <em:targetApplication>\n            <Description>\n                <em:id>{ec8030f7-c20a-464f-9b0e-13a3a9e97384}</em:id>\n                <em:minVersion>4.0</em:minVersion>\n                <em:maxVersion>30.*</em:maxVersion>\n            </Description>\n        </em:targetApplication>\n\n        <em:creator>Jonah Bishop</em:creator>\n        <em:description>An example toolbar extension.</em:description>\n        <em:homepageURL>https://www.borngeek.com/firefox/</em:homepageURL>\n\n    </Description>\n</RDF>\n</source>\nНам надо добавить два элемента в этот манифест: <code>em:updateURL</code> и <code>em:updateKey</code>. Элемент <code>em:updateURL</code> указывает на URL по которому лежит манифест <b>обновления</b> (update.rdf). Выглядит вот так:\n\n<source lang="XML">\n<em:updateURL>http://www.example.com/update.rdf</em:updateURL>\n</source>\nИмейте в виду - вы не сможете разместить расширение в официальном store если ваш манифест содержит этот элемент. \n\nСледующий у нас <code>em:updateKey</code>. Он просто содержит в себе публичный ключ. Что бы получить его, откройте McCoy, сделайте правый клик на ключе, который вы создали ранее и выберите <b>Copy Public Key</b> в контекстном меню. После поместите ключ между открывающим и закрывающим тегами:\n\n<source lang="XML">\n<em:updateKey>\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDW8qxAeURIMLnHjb\nKrjR/uqnRsiomahNArMh3KqRLDDmRGCoO21fyHyh5kdgiEL+2Q+sNP\nz+j5maIG4qePXp7BVp90QMqiGLvl+z4baDOqcNvErN0l8scd8EegXc\nG7Ofa5Gc5oEU/gItIVR4k9AICyW2pJhe51UPa3UKXDS0v3TwIDAQAB\n</em:updateKey>\n</source>\nАбракадабра. К счастью Firefox достаточно умен и позволяет использовать пробелы в <code>em:updateKey</code> элементе, что позволяет сделать install.rdf более читаемым (как показано выше, это уже отформатированный вариант). По умолчанию из McCoy копируется одна длинная строка.\n\nПосле добавления этих двух элементов install.rdf начинает выглядет так:\n\n<source lang="XML">\n<?xml version="1.0"?>\n\n<RDF xmlns="http://www.w3.org/1999/02/22-rdf-syntax-ns#"\n     xmlns:em="http://www.mozilla.org/2004/em-rdf#">\n\n    <Description about="urn:mozilla:install-manifest">\n\n        <em:id>tuttoolbar@borngeek.com</em:id>\n        <em:name>Tutorial Toolbar</em:name>\n        <em:type>2</em:type>\n        <em:version>1.0</em:version>\n\n        <em:targetApplication>\n            <Description>\n                <em:id>{ec8030f7-c20a-464f-9b0e-13a3a9e97384}</em:id>\n                <em:minVersion>4.0</em:minVersion>\n                <em:maxVersion>30.*</em:maxVersion>\n            </Description>\n        </em:targetApplication>\n\n        <em:creator>Jonah Bishop</em:creator>\n        <em:description>An example toolbar extension.</em:description>\n        <em:homepageURL>https://www.borngeek.com/firefox/</em:homepageURL>\n\n        <em:updateURL>http://www.example.com/update.rdf</em:updateURL>\n\n        <em:updateKey>\n        MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDW8qxAeURIMLnHjb\n        KrjR/uqnRsiomahNArMh3KqRLDDmRGCoO21fyHyh5kdgiEL+2Q+sNP\n        z+j5maIG4qePXp7BVp90QMqiGLvl+z4baDOqcNvErN0l8scd8EegXc\n        G7Ofa5Gc5oEU/gItIVR4k9AICyW2pJhe51UPa3UKXDS0v3TwIDAQAB\n        </em:updateKey>\n\n    </Description>\n</RDF>\n</source>\nМы завершили обновление манифеста нашего расширения! Обратите внимание - этот шаг необходимо сделать всего один раз. То есть при каждом следующем обновлении эти действия повторять не придется (если только вы не измените URL update.rdf или не поменяете ключ). Все, на этом этапе уже можно паковать расширение для дальнейшей дистрибуции (раздавать пользователям). \n\n<h3>Создаем update.rdf</h3>\nРаз уж мы завершили с самим расширением, самое время создать манифест обновления. Этот файл (update.rdf) будет жить у нас на сервере и, собственно, именно он определяет, что увидит пользователь при проверке наличий обновлений. Давайте начнем с того что взглянем сразу на конечный вариант файла, который мы собираемся создать:\n\n<source lang="XML">\n<?xml version="1.0"?>\n<r:RDF xmlns:r="http://www.w3.org/1999/02/22-rdf-syntax-ns#"\n        xmlns="http://www.mozilla.org/2004/em-rdf#">\n\n<r:Description about="urn:mozilla:extension:tuttoolbar@borngeek.com">\n    <updates>\n    <r:Seq>\n    <r:li>\n    <r:Description>\n        <version>1.0.2</version>\n        <targetApplication>\n            <r:Description>\n            <id>{ec8030f7-c20a-464f-9b0e-13a3a9e97384}</id>\n            <minVersion>4.0</minVersion>\n            <maxVersion>30.*</maxVersion>\n            <updateLink>http://www.example.com/downloads/tuttoolbar_1_0_2.xpi</updateLink>\n            <updateHash>\n            sha256:c22ad513c1243959a6d8e6b3cfad18a2a9141306f0165da6b05b008b2042e502\n            </updateHash>\n            </r:Description>\n        </targetApplication>\n    </r:Description>\n    </r:li>\n    </r:Seq>\n    </updates>\n</r:Description>\n\n</r:RDF>\n</source>\nДавайте пробежимся построчно и обсудим, что тут происходит. Во первых мы имеем стандартный XML заголовок с последующим r:RDF элементом, который и говорит нам о том что перед нами RDF (Resource Description Framework) файл. Нас в основном интересует элемент r:Description. Вы должны иметь по одному элементу на каждое расширение которое описываете в update.rdf /<i> да, да, в одном update.rdf можно описывать обновления множества расширений, <a href="https://developer.mozilla.org/en/docs/Extension_Versioning,_Update_and_Compatibility#Update_RDF_Format">Extension Versioning, Update and Compatibility</a> [прим. перевод.]</i> /\nДалее, первое что мы должны прописать - это аттрибут <code>about</code>. Часть <code>urn:mozilla:extension</code> обязательна, далее следует GUID вашего расширения. В нашем случае GUID такой: tuttoolbar@borngeek.com. Имейте в виду - если у вас не email-style GUID ( а что то вроде d4373b50-43b3-11de-8a39-0800200c9a66), то его надо заключить в фигурные скобки: <code>{d4373b50-43b3-11de-8a39-0800200c9a66}</code>.\n\nПосле нескольких дочерних элементов (<code>updates</code>, <code>r:Seq</code>, <code>r:li</code>, и еще одного <code>r:Description</code>) остановимся на элементе <code>version</code>. Это версия вашего расширения, в нашем случае <code>1.0.2</code>.\n\nДалее у нас идет информация о приложении, для которого предназначено наше расширение (Firefox). У нас есть <code>targetApplication</code> элемент, заключенный в <code>r:Description</code> и содержащий крайне важный <code>id</code> элемент. Значение этого элемента - GUID Firefox-а. / <i>сразу видно, басурмане писали. коротко - у каждого target есть свой GUID - у Firefox-а, у Thunderbird- а, у Firefox for Android, у всех разные. Идем вот <a href="https://addons.mozilla.org/en-US/firefox/pages/appversions/">сюда</a>, выбираем приложение, под которым работает наше расширение и копируем его GUID.  <a href="https://developer.mozilla.org/en/docs/Updating_an_extension_to_support_multiple_Mozilla_applications">Тут</a> можно взглянуть на пример update.rdf для нескольких targets [прим. перевод.]</i>/\nДалее следуют знакомые нам <code>minVersion</code> и <code>maxVersion</code> элементы, которые соответственно определяют минимальную и максимальную версии Firefox-а <i>(или иного target-а)</i> на работу в которых рассчитано расширение. Очень важно что бы эти значения совпадали с указанными в install.rdf.\n\nСледующим у нас идет <code>updateLink</code> элемент. В нем указывается URL самого расширения (т.е. xpi файла). Убедитесь в том что URL указывает на соответствующий файл, особенно если вы поддерживаете и даете скачать более старые версии расширения.\n\nНу и в конце нас ждет <code>updateHash</code> элемент. Этот элемент содержит sha1, sha256, sha384, или sha512 хэш нашего расширения (то есть xpi файла). Я предпочитаю sha256 поскольку были проблемы с обратной совместимостью для sha384 и sha512 (см. <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=383390">bug 383390</a> /<i>пофиксено все уже давно</i>/ Если вы на Линуксе - у вас уже есть все необходимое для генерации sha. Пользователи Windows могут скачать соответствующую утилиту (я использую sha256sum) например тут: <a href="http://www.cygwin.com/">Cygwin</a>. Для того что бы получить хэш наберите что то вроде этого в терминале:\n\n<source lang="bash">\nsha256sum tuttoolbar_1_0_2.xpi\n</source>\nвывод будет выглядеть примерно так:\n\n<source lang="bash">\nc22ad513c1243959a6d8e6b3cfad18a2a9141306f0165da6b05b008b2042e502 *tuttoolbar.xpi\n</source>\nШестнадцатеричная строка (все что до пробела) - это то что вам надо положить в <code>updateHash</code> с указанием типа шифрования. Выглядеть это должно примерно так:\n\n<source lang="XML">\n<updateHash>\nsha256:c22ad513c1243959a6d8e6b3cfad18a2a9141306f0165da6b05b008b2042e502\n</updateHash>\n</source>\nСобственно все! <b>Сохраните его как девелоперскую версию!</b> Я лично использую название update.rdf.dev. Почему надо держать отдельную версию для девелопмента?  Потому что когда вы подпишите этот манифест (<i>а мы ведь рассматриваем вариант с подписью [прим. перев.]</i>) его содержимое станет немного малочитаемым и малопригодным для дальнейшего редактирования. Так что лучше держать отдельно девелоперскую версию, а когда надо - подписывать её копию.\n\n<h3>Подписываем манифест</h3>\nДля того что бы подписать манифест последовательно выполните следующие несложные действия:\n\n<ul>\n<li>скопируйте девелоперскую версию манифеста и назовите её update.rdf. Именно этот файл мы и будем подписывать</li>\n<li>запустите McCoy если он еще не запущен</li>\n<li>выделите в нем ключ, которым вы собираетесь подписать и выберите в меню Update » Sign Update Manifest</li>\n<li>в открывшемся меню выберите update.rdf который мы только что создали и жмите Open</li>\n</ul>\n<b>Будет выглядеть так как будто ничего не происходит но это не так!</b> Есть у меня такая претензия к McCoy - он ничего не говорит по завершении работы. Но если вы откроете манифест то можете заметить что он немного изменился. Собственно на этом работа над расширением завершается - пришло время загружать файлы на сервер.\n\n<h3>Хостим update.rdf</h3>\nПеред тем как залить файлы мы должны убедиться в том что наш сервер готов хостить rdf и xpi файлы. На Apache мы можем сделать это через правила .htaccess (не знаю как это работает в IIS или TomCat, имейте в виду - это инструкция только для Apache). Я обычно кладу эти правила в .htaccess корня сайта - на тот случай если мне захочется поперемещать xpi и rdf. Правила простые:\n\n<source lang="Apache">\nAddType application/x-xpinstall .xpi\nAddType text/xml .rdf\n</source>\n<i>сейчас то уже модно nginx, под него делаем так:\n\n<source lang="Nginx">\ntypes {\n application/x-xpinstall      xpi;\n text/xml      xml, rdf;\n}\n</source>\nи кладем это либо в общий <code>/etc/nginx/mime.types</code> либо в конфиг нашего сервера. [прим. перевод.]</i>\n\nЭто необходимо для правильной отдачи файлов сервером. <b>Это очень важный момент!</b> В противном случае ваше расширение не будет установлено, также не будут работать обновления. Так же имейте в виду - если вы используете какую либо CMS ( типа WordPress) то лучше на всякий случай эти правила разместить в корне сайта.\n\nПосле того как все прописано можно залить наш xpi и update.rdf по соответствующим адресам. update.rdf должен лежать там, куда указывает install.rdf расширения (тег <code>em:updateURL</code> файла install.rdf расширения). Само расширение (.xpi) должно лежать там, куда указывает update.rdf (тег <code>updateLink</code>). Постарайтесь не запутаться.\n\nНа этом все! Хоть процедура слегка запутанна на первый раз - все достаточно просто.\n\nЧистого кода!	0	0	0	t	давайте разберемся	0
9	1	1	2016-02-10 14:50:53.829885	{4}	{}	Мир javascript: либы, пакеты, фреймворки	Просто список технологий - короткое описание и ссылки на ресурсы	<h3>диалекты</h3>\n<a href="http://coffeescript.org/">CoffeeScript</a>, <a href="http://www.typescriptlang.org/">TypeScript</a>, <a href="http://flowtype.org/">Flow (статичная типизация с аннотациями like TypeScript)</a>, <a href="https://www.dartlang.org/">Dart</a>, <a href="http://www.purescript.org/">purescript</a>, <a href="http://haxe.org/">Haxe - компилируется в множество языков, в том числе и в javascript</a>\n<ul>\n<li><a href="https://hacks.mozilla.org/category/es6-in-depth/">ES6 In Depth</a></li>\n<li><a href="https://github.com/lukehoban/es6features">ES6 features</a></li>\n<li><a href="https://habrahabr.ru/post/277021/">Разбираем декораторы ES2016</a></li>\n<li><a href="https://habrahabr.ru/post/277033/">Генераторы в ES6 и асинхронный код по-новому</a></li>\n</ul>\n<h3>транспилеры</h3>\n<a href="https://babeljs.io/">Babel</a>\n<ul>\n<li><a href="https://blog.redradix.com/working-with-javascript-ast/">Working with JavaScript AST</a></li>\n</ul>\n<h3>системы сборки:</h3>\n<a href="http://gulpjs.com/">Gulp</a>, <a href="http://gruntjs.com/">Grunt</a>, <a href="https://webpack.github.io/">Webpack</a>, <a href="http://brunch.io/">Brunch</a>, <a href="http://gearjs.org/">Gear.js (последний коммит - январь 2015)</a>, <a href="https://underscorediscovery.github.io/flow/">Flow - система сборки для Haxe</a>\n<ul>\n<li> скринкасты по <a href="https://learn.javascript.ru/screencast/webpack">Webpack</a> и <a href="https://learn.javascript.ru/screencast/gulp">Gulp</a></li>\n</ul>\n<h3>continuous integration</h3>\n<a href="https://jenkins-ci.org/">Jenkins</a>, <a href="http://buildbot.net/">BuildBot</a>, <a href="https://travis-ci.org/">Travis Ci</a>, <a href="https://github.com/gitlabhq/gitlab-ci">GitLab-CIS</a>, <a href="http://stridercd.com/">Strider</a>, <a href="http://www.go.cd/">Go</a>, <a href="http://integrity.github.io/">Integrity</a>\n<p><ul>\n<li>с Travis, помимо <a href="https://docs.travis-ci.com/">своей документации</a>, можно начать <a href="https://github.com/dwyl/learn-travis">отсюда</a>.</li>\n<li>вводная статья по <a href="http://canonium.com/articles/javascript-testing-code-introduction">тестированию  javascript кода</a> (XO, AVA, Travis, Sandbox)</li>\n</ul></p>\n<h3>тестирование</h3>\n<a href="https://mochajs.org/">Mocha</a>, <a href="http://shouldjs.github.io/">Should</a> (<a href="https://www.npmjs.com/package/should">npm</a>, <a href="https://github.com/shouldjs/should.js">github</a>), <a href="https://github.com/sindresorhus/ava">AVA</a>, <a href="https://github.com/power-assert-js/power-assert">power-assert</a>\n<p>Chai и Mocha неплохо разобраны <a href="https://learn.javascript.ru/testing">здесь</a> (для начала)</p>\n<h3>deploy</h3>\n<a href="https://github.com/shipitjs/shipit">shipit</a>\n<h3>error handling</h3>\n<ul>\n<li><a href="https://habrahabr.ru/post/222761/">Обработка ошибок в Node.js</a> [главная полезная мысль - можно использовать EventEmitter для генерации/обработки ошибок в глубоком лесе коллбэков]</li>\n</ul>\n<h3>GC и утечки памяти</h3>\n<a href="https://github.com/bretcope/node-gc-profiler">node-gc-profiler</a>, <a href="https://github.com/Jimbly/node-mtrace">node-mtrace</a>, <a href="https://github.com/node-inspector/v8-profiler">v8 profiler</a>\n<ul>\n<li><a href="https://habrahabr.ru/company/plarium/blog/277129/">Понимание сборки мусора и отлов утечек памяти в Node.js</a> [ habr ]</li>\n<li><a href="https://github.com/felixge/node-memory-leak-tutorial">node memory leak tutorial</a></li>\n<li><a href="https://www.ibm.com/developerworks/library/wa-memleak/">Memory leak patterns in JavaScript</a> [ ibm ]</li>\n<li><a href="http://jayconrod.com/posts/55/a-tour-of-v8-garbage-collection">A tour of V8: Garbage Collection</a></li>\n<li><a href="https://www.joyent.com/blog/walmart-node-js-memory-leak">разбор полетов: Walmart Node.js Memory Leak</a></li>\n</ul>\n<h3>контейнеры состояний</h3>\n<a href="https://facebook.github.io/flux/">flux</a>, <a href="http://elm-lang.org/">elm</a>, <a href="http://redux.js.org/">redux</a>, <a href="https://github.com/Yomguithereal/baobab">baobab</a>	0	0	0	f	дайте посмотреть	0
\.


--
-- Name: articles_id; Type: SEQUENCE SET; Schema: public; Owner: openhabr
--

SELECT pg_catalog.setval('articles_id', 11, true);


--
-- Data for Name: comments; Type: TABLE DATA; Schema: public; Owner: openhabr
--

COPY comments (id, article_id, author, reply_to, body, stamp, rating, last_changed) FROM stdin;
1	2	1	0	первый коммент	2016-01-01 17:23:05.909006	0	2016-01-01 17:23:05.909006
2	2	1	1	первый ответ на первый коммент	2016-01-01 17:23:37.430392	0	2016-01-01 17:23:37.430392
3	2	1	0	второй коммент	2016-01-01 17:23:59.755391	0	2016-01-01 17:23:59.755391
4	1	1	0	куку	2016-01-31 13:12:40.302346	0	2016-01-31 13:12:40.302346
5	1	1	0	отлично, комменты в корень работают	2016-01-31 13:13:11.726708	0	2016-01-31 13:13:11.726708
6	1	1	0	только пока надо вручную обновлять - надо дорихтовать обработчик ответа.	2016-01-31 13:13:56.765415	0	2016-01-31 13:13:56.765415
7	1	1	0	и пока что пропускаются любые теги - это конечно зря, надо ограничить пыл комментирующих.	2016-01-31 13:15:22.018432	0	2016-01-31 13:15:22.018432
8	1	1	0	так, даты кривые, если что - сейчас февраль 2016-ого	2016-01-31 13:25:30.305636	0	2016-01-31 13:25:30.305636
9	1	1	0	счетчик комментариев.	2016-01-31 15:29:17.205995	0	2016-01-31 15:29:17.205995
10	1	1	0	работает!	2016-01-31 15:29:30.790898	0	2016-01-31 15:29:30.790898
11	2	18	0	Проверка!	2016-03-02 12:09:55.474767	0	2016-03-02 12:09:55.474767
12	2	18	0	Проверка!	2016-03-02 12:09:57.845318	0	2016-03-02 12:09:57.845318
13	2	18	0	Проверка!	2016-03-02 12:09:59.809185	0	2016-03-02 12:09:59.809185
14	2	18	0	Привет, мир!	2016-03-02 12:10:07.699805	0	2016-03-02 12:10:07.699805
15	2	18	0	Привет, мир!	2016-03-02 12:10:09.444331	0	2016-03-02 12:10:09.444331
16	1	18	0	Привет!	2016-03-02 12:13:02.622645	0	2016-03-02 12:13:02.622645
17	1	1	0	Привет!	2016-03-02 13:33:08.315075	0	2016-03-02 13:33:08.315075
18	1	1	0	а что со счетчиком?	2016-03-06 10:13:41.038911	0	2016-03-06 10:13:41.038911
\.


--
-- Name: comments_id; Type: SEQUENCE SET; Schema: public; Owner: openhabr
--

SELECT pg_catalog.setval('comments_id', 18, true);


--
-- Data for Name: hubs; Type: TABLE DATA; Schema: public; Owner: openhabr
--

COPY hubs (id, name, title, subscribers, posts, popular, rating) FROM stdin;
2	second	второй хаб	0	0	{5,3,1}	24.7000008
3	third	третий хаб	0	0	{4,2}	7.9000001
4	javascript	javascript	0	0	{}	0
5	надо перевести	надо перевести	0	0	{}	0
1	habr	обсуждение хабра	0	0	{1,3}	13.5
6	stackoverflow	stackoverflow	0	0	{}	0
\.


--
-- Name: hubs_id; Type: SEQUENCE SET; Schema: public; Owner: openhabr
--

SELECT pg_catalog.setval('hubs_id', 6, true);


--
-- Data for Name: medals; Type: TABLE DATA; Schema: public; Owner: openhabr
--

COPY medals (id, title, description) FROM stdin;
1	 комиттер	автор одного и более коммитов в движок сайт
2	автор	 имеет одну и более опубликованную статью
3	пользователь	пользователь
\.


--
-- Name: medals_id; Type: SEQUENCE SET; Schema: public; Owner: openhabr
--

SELECT pg_catalog.setval('medals_id', 3, true);


--
-- Data for Name: tags; Type: TABLE DATA; Schema: public; Owner: openhabr
--

COPY tags (id, title) FROM stdin;
1	первый тег
2	второй тег
3	третий тег
4	четвертый тег
5	пятый тег
6	шестой тег
\.


--
-- Name: tags_id; Type: SEQUENCE SET; Schema: public; Owner: openhabr
--

SELECT pg_catalog.setval('tags_id', 6, true);


--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: openhabr
--

COPY users (id, nickname, mail, carma, rating, fullname, status, pwd, sid, medals, readonly) FROM stdin;
14	yauser	alloao@yandex.ru	0	0	 	пользователь	ace32a9fde6c1cdce6c0a0f62c739a78b41fd99c792b8e2cbc769408f29af7992effcf6621a55f41f8b369b6105553c1c169ec6c25dd3ee4ea62860d29c5ccfb	55d1662ad1c05ddd442fb537220ea76f2fd0a76953bab9a494df2b78fbddbed3a55a23aba7b5dd66d28e238ca9cc71cea824420a7ab4de7a6505ad89bdcdeb9c	{3}	t
15	hedksi	hihu	0	0	 	пользователь	48cb21f9e4e698af0d6d97daa9d9308d0fd1f618d5faed6f46dsb0e9d241dc5b80ad41ace3873bd704d292d248af226d063eff94de8ef9a45d33a803b66aa818		{3}	t
16	chuba	cjfkdkdl@cu.ru	0	0	 	пользователь	45226585f15ff4afb2236bc01e24806d1934f51ad425e86aee58cc6318881f2626afbc190fa377a011e518bccbf54620b946b7741321957acffebb5961e71888	6a781504bc9ba2369da371efe3ddf24c8cb75d370cf67bed54d10b8e4d33dfa6a225ea90587dbd52ac127fb9ac58857092c419359851de5e93cfbc6cd0416191	{3}	t
17	chubadk	cjfdjkkdkdl@cu.ru	0	0	 	пользователь	f6c258e2f4f3b47924121ee32a92bfd908d63df7b45100dcbaa60acd09511093e6573693d89589795257bd46ca572f2099b3674b5e687ea2177d631f53143c27		{3}	t
18	armleo	aa-c-aa@mail.ru	0	0	 	пользователь	0843a40fd2a8be9904b837735712a437d5ec66c9ca4dde7427054037c1a1031a15a227f7e135e0658b9569075120a7f7b34a47a539aa315d9b6a1d8b337df9a4	e1739443d97d3a9ea1a00a8e6d0ec5997778709c6ed09812034c49cec2dc1cea9d7d104e9d1cd6070de1f9003719d345e18872fa5bd1fd0d3fb366e5b16030fb	{3}	t
19	RegBeify	inf1@fastshipcialis.com	0	0	 	пользователь	4fb09fc13f8bc2ee122ff9f177fb39c6caf3a8fd7e9974f9e74bb52a20ae3dc7f5a51a7f15b190d95e2bea135c25c1c5113584c99fcfaa4609a0e8abbbe50c00	e60531efa8d3cf57d9bcd1c0db252424705bc08e7cf59f2eb3905cfc4fd3bb22be3185adf0d4117cdd853a870297b3db71fc4b2a5816200991413562899343db	{3}	t
1	gonzazoid	alloaolla@gmail.com	19.5	63.2999992	Тимур	диссидент	ace32a9fde6c1cdceac0a0462c739a7db41fd99c792b8e2cbc769408f29af7992effcf6621a55f41f8b369b6105553c1c169ec6c25dd3ee4ea62860d29c5ccfb	310824de1c36a29ae9b68a2c0af4482c507180e98197e665fc99221033efdba57c97e02b6f8ce4ee2ef149cf055b143281513383b9afdf985d772c6017f0b568	{1,2}	f
\.


--
-- Name: users_id; Type: SEQUENCE SET; Schema: public; Owner: openhabr
--

SELECT pg_catalog.setval('users_id', 19, true);


--
-- Name: articles_pkey; Type: CONSTRAINT; Schema: public; Owner: openhabr; Tablespace: 
--

ALTER TABLE ONLY articles
    ADD CONSTRAINT articles_pkey PRIMARY KEY (id);


--
-- Name: comments_pkey; Type: CONSTRAINT; Schema: public; Owner: openhabr; Tablespace: 
--

ALTER TABLE ONLY comments
    ADD CONSTRAINT comments_pkey PRIMARY KEY (id);


--
-- Name: hubs_pkey; Type: CONSTRAINT; Schema: public; Owner: openhabr; Tablespace: 
--

ALTER TABLE ONLY hubs
    ADD CONSTRAINT hubs_pkey PRIMARY KEY (id);


--
-- Name: medals_pkey; Type: CONSTRAINT; Schema: public; Owner: openhabr; Tablespace: 
--

ALTER TABLE ONLY medals
    ADD CONSTRAINT medals_pkey PRIMARY KEY (id);


--
-- Name: tags_pkey; Type: CONSTRAINT; Schema: public; Owner: openhabr; Tablespace: 
--

ALTER TABLE ONLY tags
    ADD CONSTRAINT tags_pkey PRIMARY KEY (id);


--
-- Name: users_pkey; Type: CONSTRAINT; Schema: public; Owner: openhabr; Tablespace: 
--

ALTER TABLE ONLY users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- Name: public; Type: ACL; Schema: -; Owner: pgsql
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM pgsql;
GRANT ALL ON SCHEMA public TO pgsql;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--
